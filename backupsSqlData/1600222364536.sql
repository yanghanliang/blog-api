-- MySQL dump 10.13  Distrib 5.7.29, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.29-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `blog`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `blog` /*!40100 DEFAULT CHARACTER SET utf16 */;

USE `blog`;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `comment_id` int(11) DEFAULT NULL COMMENT '评论的id',
  `category_id` smallint(6) DEFAULT NULL COMMENT '分类',
  `title` varchar(30) NOT NULL COMMENT '文章标题',
  `synopsis` text NOT NULL COMMENT '文章简介',
  `createtime` bigint(13) DEFAULT NULL COMMENT '创建时间',
  `updatetime` bigint(13) DEFAULT NULL COMMENT '更新时间',
  `read` int(11) NOT NULL DEFAULT '0' COMMENT '阅读数',
  `praise` int(11) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `original` int(1) NOT NULL DEFAULT '0' COMMENT '原创0,转载1',
  `content` text NOT NULL COMMENT '文章内容',
  `reward` int(11) NOT NULL DEFAULT '0' COMMENT '打赏数',
  `reprint` int(11) NOT NULL DEFAULT '0' COMMENT '转载数',
  `comment_number` int(11) NOT NULL DEFAULT '0' COMMENT '评论数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=177 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (36,NULL,3,'插件实现代码高亮','在下是简历',1544972581332,1546588680398,4,2,0,'::: hljs-center\n\n## vue 操作“动态数据渲染”出来的 DOM\n\n:::\n\n\n> 借助 `highlight.js` 插件实现代码高亮\n\n### 关键点\n\n+ 添加序列号 （可以不用考虑 vue）\n  + 去除两边的换行 (为了下面的`html`结构好看-换行书写-于是引出以下问题)\n    + 因为下面还需要使用正则,所以一开始我想用正则匹配，于是发现了 `/^a(.*)a$/` \n    ```js\n      var str = &apos;abcdehjjsajhjjajhja&apos; \n      str.replace(/^a(.*)a$/, function(input, $1){return $1}) // 可以获得去除两边a后的字符串 bcdehjjsajhjjajhj\n    ```\n      + 然后出现一个问题,正则怎么匹配 \"包括换行\"的任意字符(除换行外的任意单个字符是 . )\n        + 发现: [dD] [sS] [g] [.] [a] 很多中括号中添加绝大多数字符,都能匹配包括换行的任意字符\n          + str.replace(/^\n([dD]*)\n$/, function(input, $1) {return $1}) 最开始我没想出来,于是有了下一种方法\n      + 直接简单粗暴的猜想\n        + `str.trim()` 可以去除字符串两边的空格, 所以我用它来验证我的猜想(去除两边的换行和空格),事实证明确实可以\n\n> 虽然想得复杂了,但是我第一次发现 replace 还能这么写, trim 还可以这么用 以及如何匹配包括换行的任意字符和匹配任意两端字符的方法\n\n```html\n<section>\n  <pre>\n    <code>\n  var box = document.querySelect(&apos;.box&apos;)\n  box.onclick = function() {\n      console.log(\"hh\")\n  }\n    </code>\n  </pre>\n</section>\n```\n\n```js\n\nlet str = document.getElementsByTagName(&apos;code&apos;).innerText.trim()\nitem.innerHTML = &apos;<ol><li>  &apos; + str.replace(/\n/g, &apos;\n</li><li>  &apos;) + &apos;\n</li></ol>&apos;\n\n```\n+ 复制 (需要考虑 vue)\n  + 点击复制按钮实现，将当前的代码块复制上\n```js\nlet str = item.innerText.trim()\nitem.innerHTML = &apos;<ol><li>  &apos; + str.replace(/\n/g, &apos;\n</li><li>  &apos;) + &apos;\n</li></ol><div class=\"copy\" style=\"top: 10px; right: 20px; color: #333; font-size: 12px; cursor: pointer; position: absolute; padding: 2px 10px; text-align: center; border-radius: 3px; background-color: #fff; font-family: 微软雅黑, 宋体;\">复制</div>&apos;\n```        \n  + 单纯的实现点击复杂当前按钮下的代码块,很简单(不考虑 vue)\n    + 直接写一个方法在 <javascript>function copy(that) {}</javascript>\n    + <div onclick=\"copy(this)\"> 在 div 中添加点击事件\n  + 在 vue 中这样写是不对的, 会提示找不到 copy 或者说他不是一个方法\n    + 不考虑动态渲染数据,可以添加自定义指令的方法来实现\n      + 可参考一下博文 https://blog.csdn.net/littlebearGreat/article/details/81131463\n      + 在不断尝试中发现 自定义方法也是可以的, 以及了解到 watch\n        ```vue\n          // 监听一个数据的变化， 变化时立即执行以下方法（不推荐使用箭头函数）\n          watch: {\n            a: function (val, oldVal) {\n              console.log(&apos;new: %s, old: %s&apos;, val, oldVal)\n          }\n\n\n          // 发送请求获取数据之后，操作DOM， 使用这个方法比较好\n          // DOM 还没有更新\n          this.$nextTick(function () {\n            // DOM 现在更新了\n            // `this` 绑定到当前实例\n            this.doSomethingElse()\n          })\n        ```\n      + this.$nextTick() 考虑代码块可能是在动态渲染出来的DOM元素中,于是有了这个方法\n        + 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n  + 复制需要两个方法\n    + `document.getElementsByTagName(&apos;textarea&apos;).select()`\n      + 选择对象 - 好像只有表单元素才有这个方法, 如: input textarea (头铁般的试出来的)\n    + `document.execCommand(&apos;Copy&apos;)`\n      + 复制成功返回一个 `true` (Boolean)\n\n+ 下载 highlight.js\nnpm install highlight.js --save\n\n+ 添加自定义方法\nplugins/highlight.js 自己写的自定义方法\n```js\n// 引入highlight.js 插件(需要安装)\nimport Hljs from &apos;highlight.js&apos;\n// 引入自己喜欢的 主题(样式)\nimport &apos;highlight.js/styles/dark.css&apos;\n\nlet Highlight = {}\nHighlight.install = function (Vue) {\n  // 先有数据再绑定，调用highlightA\n  Vue.prototype.code_highlight = function(el) {\n    // 等待下一次更新结束后执行\n    this.$nextTick(function() {\n      // 获取当前下的所有代码块\n      let code = el.querySelectorAll(&apos;code&apos;)\n      for (let i = 0; i < code.length; i++) {\n        const item = code[i]\n        // 获取代码块元素中的代码内容,并且去除两边的空格和换行\n        let str = item.innerText.trim()\n        item.innerHTML = &apos;<ol><li>  &apos; + str.replace(/\n/g, &apos;\n</li><li>  &apos;) + &apos;\n</li></ol><div class=\"copy\" style=\"top: 10px; right: 20px; color: #333; font-size: 12px; cursor: pointer; position: absolute; padding: 2px 10px; text-align: center; border-radius: 3px; background-color: #fff; font-family: 微软雅黑, 宋体;\">复制</div>&apos;\n        // 代码高亮\n        Hljs.highlightBlock(item)\n\n        // 实现点击复制的功能\n        let copy = el.querySelector(&apos;.copy&apos;)\n        copy.onclick = function() {\n          var that = this\n          // 创建一个文本域\n          var textarea = document.createElement(&apos;textarea&apos;)\n          textarea.value = this.parentElement.querySelector(&apos;ol&apos;).innerText\n          document.body.appendChild(textarea) // 文本域 可以保留代码块中的换行\n          textarea.select() // 选择对象 - 好像只有表单元素才有这个方法, 如: input textarea\n          if (document.execCommand(&apos;Copy&apos;)) { // 执行浏览器复制命令\n            this.innerText = &apos;复制成功&apos;\n            setTimeout(function() {\n              that.innerText = &apos;复制&apos;\n            }, 1000)\n          }\n          textarea.remove() // 删除不必要的 html 结构\n        }\n      }\n    })\n  }\n}\n\n// 导出自定义方法\nexport default Highlight\n```\n+ 在 main.js 中\n\n```js\n// highlight.js代码高亮指令\nimport Highlight from &apos;./plugins/highlight&apos;\n\n// 调用 highlight.js 代码高亮插件\nVue.use(Highlight)\n```\n+ 在组件中使用\n```js\nexport default {\n  name: &apos;articles_details&apos;,\n  components: {\n    myHeader,\n    myFooter,\n    category\n  },\n  created() {\n    this.loadData()\n  },\n  methods: {\n    async loadData() {\n      const data = await this.$http.get(`articleDetakils/${this.$route.params.articleId}`)\n      this.$refs.articleContent.innerHTML = data.data[0].content\n      this.code_highlight(this.$refs.articleContent) // 代码高亮\n    }\n  }\n}\n```\n\n## 字符串拼接\n\n```js\n\nvar startIndex = str.indexOf(&apos;_0\"&apos;)\nvar middleIndex = str.indexOf(&apos;</h&apos;, startIndex) // 找到需要的拼接点\nvar startStr = str.substr(0, middleIndex)\nvar middleStr = str.substr(middleIndex)\nthis.form.content = startStr + &apos;<i class=\"icon original\" title=\"原创\">&#xe612;</i>&apos; + middleStr\n\n```\n',0,0,0),(83,NULL,1,'HTML-1','学习 html 的第一天',1551249545307,1585124630504,5,2,0,'`<strong>`字体加粗`</strong>`\n\n`<em>`斜体`</em>`\n\n\n\n```css\n/* 下划线 */\ntext-decoration:underline;\n/* 顶划线 */\ntext-decoration:overline;\n/* 删除线 */\ntext-decoration:line-through;\n/* 闪烁 */\ntext-decoration:blink;\n```\n\n> 但是闪烁在IE浏览器中并不支持这个效果，所以建议不要使用。\n\n\n\n`<a href=\"#maodian\">`锚点链接`</a>`\n\n`<p id=\"maodian\">`锚点链接`</p>`\n\n\n```html\n<img src=\"地址\" title=\"图片还没出来时看到的名字\" alt=\"给搜索引擎用的\">\n```\n\n```txt\nctr+shfit+d 快速复制\n\nctr+l 选中\n\ntable+tab\n\ntable[bordet=1（边框） cellspacing=0（td与td的距离） 属性]>tr*7>td*7+tab\n```\n\n\nborder-radius 设置圆形边框\n\n\n> 在浏览器中，选中边框大小，按↑或↓可以调节大小。\n',0,0,0),(84,NULL,1,'HTML-2','学习HTML的第二天',1551256917603,1585124646167,6,2,0,'```html\n<!-- 设置字符集 -->\n<meta charset=\"utf-8\">\n\n<!-- 给搜索引擎用的（网站推广） -->\n<meta name=\"keywords\" content=\"设置网页关键字\">\n\n<!-- 网站推广（百度搜索京东看到京东的描述信息） -->\n<meta name=\"description\" content=\"描述信息\">\n\n<!-- 网页重定向: 打开一个网站，提示网站不存在，几秒后跳转到另一个网站（防止客户流失）3代表3秒后跳转到新页面 -->\n<meta http-equiv=\"refresh\" content=\"3；http://www.baidu.com\">\n\n<!-- 设置网页图标 -->\n<!-- 最好将这个小图标放在根目录下，最好用这个图片格式（优化性）放在head中 -->\n<link rel=\"icon\" href=\"favivon.ico\">\n\n<ul>\n    </li>无序列表</li>\n</ul>\n\n<!-- 列表前有顺序ABCD -->\n<ol type=\"A\">\n    <li>有序列表</li>\n</ol>\n\n<!-- 自定义列表:一般用于网页结尾处 -->\n<dl>\n  <dt>标题： 只能包含行内元素（span a）</dt>\n  <dd>项1</dd>\n</dl>\n\n\n<!--\n表格:\ncellspacing: 设置td与td之间的距离，默认值为: 2\ncellpadding: 设置内容与td左边的距离\nalign: 	     设置对齐方式 center || right || left\nalign -> 在tr中设置和在tabel不一样，一个应用于整个表格，一个应用于内容\n-->\n<table rules=\"all\" border=\"1表格线\" cellspacing=\"2\" cellpadding=\"\" align=\"right\" height=\"\">\n\n<!-- 表格行间距 -->\n<table style=\"border-collapse:separate; border-spacing:10px;\">\n    <tr></tr>\n</table>\n\n<!-- 去除td的行间距 -->\n<table cellspacing=\"0\">\n```\n\n##\n\n> css 去除td的行间距 :\n```css\ntable {\n    border-collapse:collapse;\n}\n```\n\n<br>\n\n> 内容居中显示，该元素只能给块级元素设置。\n\n`texe-align: left || center || right` \n\n##\n\n`<th>`表头`<th>` th代替td 只能有一行，提升语义\n\n\n\n`<caption>`设置标题 放在表格里的`</caption>`\n\n##\n\n\n\n```html\n<!-- 表格结构 -->\n<thead></thead>\n<tbody></tbody>\n<tfoot></tfoot>\n\n<td colspan=\"2\">横向合并单元格,把多余的去掉</td>\n<td rowspan=\"3\">纵向合并单元格</td>\n\n\n\n<!--\n表单（收集信息的，例如注册账号） \nmethod: get || post\n-->\n<form action=\"1.php\" method=\"post\">\n    用户名:<input type=\"text\" name=\"username\">\n    <br>\n    <br>\n    密码:<input type=\"password\" name=\"pwd\">\n    <br>\n    <br>\n    <!-- 提交数据的按钮 -->\n    <input type=\"submit\">\n</form>\n\n<!--\nmaxlength: 最大长度\nreadonly:  设置控件为只读\ndisabled:  禁止输入 （如果要实现和 readonly 一样的效果，推荐用前面的)\nvalue:     设置默认值（可以看到的框里提示）\nname:      给后台确认是密码，取名字，设置控件名称\naction:    设置后台处理数据的后台程序\nmethod:    提交数据给后台程序的方式\nget:       不安全，可以看到密码（数据），长度有限制\npost:      通过后台提交数据（提交方式）\n-->\n<form>\n    账号: <input type=\"text\" maxlength=\"20\" readonly=\"readonly\" disabled=\"disabled\" value=\"66\" name=\"username\">\n    密码: <input type=\"password\">\n    性别:\n    <input type=\"radio\">男\n    <input type=\"radio\">女\n</form>\n\n<!-- 密码输入框 -->\n<input type=\"password\">\n\n<!-- \n单选控件\nname: 相同的name才能单选\nchecked: 默认选中项\n-->\n性别:\n<input type=\"radio\" name=\"sex\" checked>男\n<input type=\"radio\" name=\"sex\">女\n\n<!-- 下拉列表 -->\n<select multiple=\"multiple（实现多选，很少用，按ctr键选择）\">\n    <option>河北</option>\n    <option>河北</option>\n    <option>河北</option>\n    <option selected（设置默认选中项）>河北</option>\n</select>\n\n<!-- 其他写法: 提示所属地区 -->\n<select>\n    <optgroup label=\"河北省\">\n        <option>张家界</option>\n    </optgroup>\n</select>\n\n<!-- 多选控件 -->\n爱好:\n<input type=\"checkbox\" checked>看书\n\n<!--\n资源上传控件: 图片上传之类的\n    上传图片需要在 from 表单中添加 multipart/form-data\n在使用包含文件上传控件的表单时，必须使用该值。\n-->\n<input type=\"file\">\n\n<!--文本域 resize: no; //禁止改变页面尺寸-->\n<textarea></textarea>\n\n<!-- 隐藏控件(有的字段不需要展示出来，但是提交的数据中必须存在，可所用此控件) -->\n<input type=\"hidden\" valu=\"1\" name=\"\">\n\n<!-- 提交按钮 -->\n<input type=\"submit\">提交数据\n<input type=\"button\">普通按钮\n\n\n<!-- 重置按钮 -->\n<input type=\"reset\">\n\n<!-- 图片提交按钮 -->\n<input type=\"image\" src=\"1.jpg\">\n\n<!-- 分组控件和标题 -->\n<form>\n    <fieldset>\n        <legend>人员注册信息</legend>\n    </fieldset>\n</form>\n',0,0,0),(85,NULL,1,'HTML-3','学习HTML的第三天',1551506630467,NULL,2,2,0,'lat 对图片标签的描述，应用于搜索引擎\n\nbackground-color 背景颜色\n\nfont-size 设置文字大小\n\nred 红色\n\n</br>\n---\n</br>\n\n> 半透明效果:\n\nbackground-color:rgba（0,0,0,0.1）; 可以写 .1\n\n只改变背景颜色透明度\n\nopacity:.1 连文字透明度也改变了\n\n`（filter:Alpha（opacity=10）; /*IE8以及更早的浏览器，解决兼容问题*/）`\n\n`标签命名不可以出现空格，下划线可以出现，但很老了，有的浏览器不认识，保险可以用中划线`\n\n</br>\n---\n</br>\n\n\n## 类选择器\n\n`.` 自定义类名{属性:值；}\n\n\n\n使用:通过 `.` 自定义类名 定义一个类样式\n\n```css\n.p_red {\n    color: red;\n}\n\n.public{\n    font-size: 30px;\n}\n```\n\n> 标签通过class属性调用类样式\n\n```html\n<p class=\"p_red\"></p>\n```\n\n</br>\n\n\n> 一个标签调用多种类名\n\n```html\n<p class=\"p_red public\"> 类名与类名之间用空格隔开就好 </p>\n```\n\n\n`text-indent:2em;` 设置首行缩进2个字符\n\n<br/>\n\n## id选择器\n\n> 语法: `#`自定义名称{属性:值}\n\n\n```css\n#p_color {\n    color:red;\n}\n```\n\n```html\n<p id=\"p_color\"></p>\n```\n\n`id选择器只能定义一个属性名，不建议使用`\n\n<br/>\n<br/>\n<br/>\n\n## 通配符选择器\n\n```css\n* {\n    color=\"red\"\n}\n```\n```html\n<p>hdbdj</p>\n```\n\n`能把所有标签都选中`\n\n<br/>\n---\n<br/>\n\n## font属性:\n\nfont-size 文字大小\n\nfont-weight:normal;\n\n700 加粗\n\nbold 加粗\n\n400 正常显示\n\n<br/><br/>\n\nfont-style:normal;正常\n\nitalic 斜体显示\n\n<br/><br/>\n\nfont-family 设置文体字体，可以设置多个字体，中间用，(逗号)隔开\n\n<br/><br/>\n\nescape(\"宋体\") 在浏览器console中输入然后回车，可看到对应编码，%是 (最好用他)\n\n<br/><br/>\n\nline-height:设置文字行高\n\n<br/><br/>\n\n### font联写：\n\nfont:700 italic 30px(font-size)/20px(line-height) 微软雅黑；\n\n属性联写中必须设置font-size和font-family\n\n在属性联写中font-size必须放到font-family前面设置\n\n行高必须放在字体后面用/隔开\n\nitalic 700必须放在最前面\n\n如果font属性联写中的属性都要设置，那么按照图片中的属性去设置font:30px 宋体;\n\n<br/><br/>\n\n### 复合标签：\n\n#### 标签指定式\n\ndiv.one{\n\ncolor:green;\n\n}\n\n\n```html\n<div class=\"one\">你特过第二题你饿了</div>\n```\n\n\n### 后代选择器\n\n1.后代选择器标签之间必须是嵌套关系\n\n2.选择器与选择器之间必须用空格隔开\n\n3.后代选择器只能选中后代元素\n\n语法:\n\n选择器 选择器{属性:值}\n\n<br/><br/>\n\n### 并集选择器\n\n语法:选择器，选择器{属性:值;}\n\n注意:1.选择器与选择器之间必须使用逗号隔开\n\n2.选择器标签之间的结构可以是任意一种关系\n\n<br/><br/>\n\n### 子代选择器\n\n语法\n\n选择器与选择器之间用>隔开\n\n<br/><br/>\n\n### 兄弟选择器\n\n语法\n\n选择器与选择器之间用 + 隔开\n\n<br/><br/>\n\n### 属性选择器\n\n语法:\n\n[属性名]{属性:值;}\n\n[id][class]{ (既包含id选择器又包含class选择器的才显示绿色)\n    color:green;\n}\n\n```html\n<head>\n<style>\n#one.two {\n    color:green;\n}\n</style>\n</head>\n\n<body>\n    <div class=\"one\">123</div>\n    <div class=\"one\" id=\"two\">456</div>\n    <div class=\"one\" name=\"username\">789</div>\n</body>\n```\n\n</br>\n---\n\n### 属性赋值\n\n[属性=值]{}\n\n[class=one]{}\n\n\n\n[属性^=字母] {} 属性值首字母\n\n[class^=o]{}\n\n\n\n[属性$=字母]{} 属性值尾字母\n\n\n\n[属性*=字母]{} 属性值包含字母，字母可以是多个\n\n[class^=o]{}\n\n</br>\n---\n\n### 伪元素\nfooter .one a:after {\n    content: \"\";\n    position: relative;\n    height: 15px;\n    width: 1px;\n    margin: 0px 25px;\n    top: 3px;\n    display: inline-block;\n    background-color: #ffffff;\n}\n\n// 选中after这个最后一个\nfooter .one a:nth-last-child(1):after {\n    display: none;\n}\n\n</br>\n---\n\n### 伪类选择器\n\n语法:\n\nli:first-child 选中第一个li标签{属性:值}\n\nli:last-child\n\nnth-child(n) 第几个\n\nnth-last-child(n) 倒数第几个\n\nli代表选择器，n可以取值123456....\n\nli:nth-child(odd) 改变奇数\n\nli:nth-child(even) 改变偶数\n\n#\n选择多行有6列的li的第二列\n\nli:nth-child(6n+2) 括号里是一个表达式(n从0到无限大0,1,2,3...)\n注意: 变量n必须在公式前面,公式结果==正整数\n\nli:nth-last-child(-n+3)  选中最后的三个li\n\n\n\n工作原理: li去找父元素,父元素下\"所有的子元素\",去找第n个子元素\n\n--\n\nli:nth-of-type(n)  \n\nli:first-of-type\n\nli:last-of-type\n\nli:nth-last-of-type\n\n\n工作原理: li去找父元素,父元素下\"类型为li的所有的子元素\",去找第n个子元素',0,0,0),(86,NULL,1,'HTML-4','学习HTML的第四天',1551516776838,NULL,1,2,0,'text-indent:2em; 首行缩进2个字符\n\nline-height:20px; 行高\n\n</br>\n\n> 设置鼠标样式\n\ncursor:pointer; 鼠标为小手模式\n\n</br></br>\n\n> 块级元素\n\n块级元素独占一行显示\n\n块级元素的默认宽度与其父元素的宽度一致\n\n块级元素可以设置宽度和高度\n\n</br></br>\n\n> 行内元素\n\n行内元素在一行上显示(多个行内元素)\n\n行内元素不能设置宽度和高度\n\n</br></br>\n\n> 行内块元素\n\n元素可以在一行上显示\n\n元素可以设置宽度和高度\n\n</br></br>\n\n> 转换元素\n\ndisplay:block; 转化为块级元素\n\ndisplay:inline-block; 转化为行内块元素\n\n</br>\n\n> 转化为行内元素\n\ndisplay:inline;\n\n</br>\n---\n\n> 继承性:在默认情况下，如果子元素没有设置样式，那么该子元素会受到父元素的样式影响。\n\n注意:\n\n1.css继承性只能发生在标签嵌套结构中(可以在浏览器中查看)\n\n2.宽度和高度不能被继承(但是宽度会被影响，其影响的效果通常为与其父元素宽度一致)\n\n```\n由于html元素宽度不具有继承特性，块级元素(block)的宽度会占据一整行，所以看似继承了，实则不是。\n让一个元素的宽度根据内容撑开，只要设置其display不为块级元素，不设置宽度就可以了\n```\n\n</br></br>\n\n> 可继承的属性:\n\n################################# 可继承 - start - ################################# -->\n\n1. text-aling   对齐方式\n2. font         属性相关的属性都可以被继承 如: font-color font-size\n3. line-height  行高\n\n################################# 可继承 - end - ################################# <--\n\n\n\n############################### 不能继承 - start - ############################### -->\n\n1. height 高\n2. width  宽\n\n############################### 不能继承 - end - ############################### <--\n\n\n> 层叠性: 在权重相同的情况下，同一个标签中样式发生冲突，后面定义样式会将前面定义的样式给覆盖掉。\n\n### 注意:\n\n样式与定义的顺序有关，与调用的顺序无关\n\n.testClass{ \n    color:blue !important; \n} \n\n</br>\n---\n\n> 优先级(权重):\n\n继承的值<标签选择器<类选择器<ID选择器<行内选择器<!important\n\n继承的权重为0\n\n权重可以叠加\n\n比较权重，先判断指向那个标签，注意继承性\n\n</br></br>\n\na:visited{属性:值;} 设置a标签访问过后的样式\n\n### 注意:\n\n1. `:visited{}` 该伪类中只能设置与颜色相关的属性\n\n2. 该伪类具有缓存特性\n\n</br></br>\n\n重点:\n\na:hover{属性:值;} 设置鼠标悬停到a标签的样式 (可以添加其他标签div......)\n```css\na:hover {\n    font-size:50px;\n    color:blue;\n}\n```\n</br></br>\n\ntext-decoration:none; 去掉下划线\n\ntext-decoration:underline; 显示下划线\n\n</br></br>\n\na:active{属性:值;} 设置a标签激活状态下的样式(鼠标左键点击时显示的样式)\n\n</br></br>\n\n## 总结:\n\n1.:hover{}该伪类可以单独使用\n\n2.如果以上伪类都要设置需要按照顺序设置LVHA\n\n</br></br>\n\n目标伪类\n\n:target{属性:值;}\n\n注意:\n\n该伪类要配合锚点链接使用 (可以设置背景颜色，点击后调到锚点处，令其背景颜色改变)\n\n</br></br>\n\n\n> 空伪类\n\n:empty{属性:值;}\n\ninput[type=\"text\"]  -- `实用`\n</br>\n\n\n[attr^=val]  找到属性为 `attr` 且值为 `val` 开头的\n\n#### 例子：\n找到属性为 `midd` 且值为 `abc` 开头的\n\nli[midd^=\"abc\"]\n```html\n<li midd=\"abc\"></li>\n```\n</br></br>\n\n[attr$=val]  找到属性为attr且值为val结尾的\n\n[attr*=val]  找到属性为attr且值为包含val的\n\n#\n\n> 排除伪类\n找到div标签的所有元素且排除其中带有 class `.two` 的元素\n\n```css\ndiv:not(.two){\n    width:200px;\n    height:200px;\n    background-color:red;\n}\n```\n\n```html\n<div class=\"one two\">23588</div>\n\n<div class=\"one\">只改变他的属性时，用排除伪类</div>\n```\n\n#\nbackground-image:url(2.png) 设置背景图片\n\nbackground-repeat:no-repeat; 设置背景图片不平铺\n\nbottom 底部对齐(实现一张图片上下部分转换，鼠标放上去看到另一张图片的效果)\n\nbackground-position:right top; 右上角 设置背景图片位置\n\n注意:当背景图片位置设置一个值时，另一个值默认为:center\n\n#\n\nbackground属性联写\n\n1.该属性联写中没有个数限制\n\n2.该属性中没有顺序的限制\n',0,0,0),(87,NULL,29,'Vue','Vue 项目文档',1551518215824,1551518606777,5,2,0,'vue init webpack itcast_store\n\n#  项目初始化(创建一个vue项目)\n\n\n## vue init webpack itcast_store   // itcast_store 项目名称\n\n> 安装包\n\n	+ npm --cache-min 515 install     // 如果要安装的包之前有过安装(从缓存中安装)\n	+ npm install  // 没有安装过,使用这个,会因为网络限速\n\n\n## 启动项目\n	+ npm start(有些不能启动的可以试一下 node app.js)\n	+ 在浏览器中打开 http://localhost:8080/ 访问测试。\n\n\n## 修改package.json文件\n	+ \"lintfix\": \"eslint --ext .js,.vue src --fix\",   // 自动修改错误语法(代码规范),添加如下一行\n	\n```js\n\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"lint\": \"eslint --ext .js,.vue src\",\n    \"lintfix\": \"eslint --ext .js,.vue src --fix\",\n    \"build\": \"node build/build.js\"\n  }\n\n```\n\n		+ npm run lintfix  // 执行它(用于多处代码规范不符)\n\n\n## 修改代码规范\n	+ 找到 .eslintrc.js 这个文件\n\n```js\n\nrules: {\n    &apos;semi&apos;: [&apos;error&apos;, &apos;always&apos;],\n    &apos;space-before-function-paren&apos;: &apos;off&apos;\n}\n\n```\n\n&apos;semi&apos;: [&apos;error&apos;, &apos;always&apos;],  // 每一个语句结束后都要有分号\n&apos;space-before-function-paren&apos;: &apos;off&apos;  // 不需要在函数名后面加空格\n\n## 删除不必要的文件\n	+ src/components/  这个目录下的 HelloWorld.vue 文件\n\n\n## 修改\n	+ src/router 这个目录下的 index.js 文件\n\n```js\n\nimport HelloWorld from &apos;@/components/HelloWorld&apos;   // 删除\n\n//删除路由\n{\n  path: &apos;/&apos;,\n  name: &apos;HelloWorld&apos;,\n  component: HelloWorld\n}\n\n```\n\n## 修改 package.json \n	+ \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --open\",\n		+ 加上 --open 可以在启动项目时自动打开浏览器\n\n\n# 加入Git版本控制\n	+ 初始化本地仓库并完成一次提交。\n		+ git init\n		+ git status  // 可以省略\n		+ git add .\n		+ git commit -m \"描述\"\n	+ 在 GitHub 上创建一个在线仓库。(将本地项目推送到 GitHub。)\n		+ git remote add origin https://github.com/你的GitHub用户名/admin-vue.git\n		+ git push -u origin master \n	可选:\n	+ 创建一个新分支(创建功能)\n		+ git branch dev-login  	// dev-login  新分支的名称(最好写功能的名称)\n		+ git branch  				// 查看分支\n		+ git checkout dev-login  	// 切换分支\n		+ git branch -D dev-login 	// 删除分支\n		+ git checkout -b dev-login // 创建并切换分支\n		+ git add .\n		+ git commit -m &apos;描述&apos;\n		+ git push origin dev-login // 交代码提交到分支中\n		+ 合并分支\n			+ git checkout master 	// 切换到主分支\n			+ git merge dev-login 	// 合并(合并前必须切换回主分支)\n			+ git branch -r			// 查看远程分支\n			+ 删除远程分支\n				+ git branch -r -d origin/dev-login\n				+ git push origin :dev-login\n					+ dev-login  	// 分支名 \n\n\n\n# 使用ui组件(element-ui)\n	+ npm install element-ui -save  //安装\n	+ 在 src/ 找到 main.js 引入 element-ui\n\n```js\n\n// 导入elementUi\nimport ElementUI from &apos;element-ui&apos;;\nimport &apos;element-ui/lib/theme-chalk/index.css&apos;;\n\n// 全局配置\nVue.use(ElementUI);\n\n```\n\n## 检查代码语法 \n	+ npm run lint 	   // 检查语法规范\n	+ npm run lintfix  // 自动修改语法错误\n\n\n# 实现登录页面\n\n## 1. 创建组件(自己的)\n	+ 找到 src/components 创建 login.vue 文件\n		+ <sc  // 快捷输入,需要装插件\n```\n\n<template>\n   	<el-form :model=\"form\" label-width=\"80px\" class=\"form\" label-position=\"top\">\n        <h2>用户登录</h2>\n        <el-form-item label=\"用户名\" >\n            <el-input v-model=\"form.name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\">\n            <el-input v-model=\"form.password\"></el-input>\n        </el-form-item>\n        <el-form-item>\n            <el-button type=\"primary\" @click=\"onSubmit\">登录</el-button>\n            <el-button>取消</el-button>\n        </el-form-item>\n    </el-form>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      form: {\n        name: &apos;,\n        password: &apos;\n      }\n    };\n  }\n};\n</script>\n\n<style>\n\n</style>\n\n\n```\n\n\n## 2. 导入主键\n	+ 找到 src/router/index.js\n\n\n## 便捷操作\n	+ 新建一个 .txt 文本文件  写入命令 如: npm start  ||  node app.js\n	+ 修改 .txt 文件的后缀名为 .bat  // 以后执行命令可以直接双击这个文件\n\n## 打开package.json文件进行便捷配置\n// 在 scripts 的最后面添加以下两条代码\n// 1. 进行语法设置 2. 进行代码提交\n\n```js\n\n\"prepush\": \"npm run lint\",\n\"push\": \"git add . && git commit && git push\"\n\n```\n\nnpm run push  // 修改后用它来提交代码到git,它还可以进行便捷操作 .bat\n\n\n> api-serverconfigdefault.json 中的 \"jwt-config\": expiresIn:代表token过期时间\n\n// jwt  == json web token\n// jwt 基于现实的身份验证,请求头中增加 Authorization\n\n\n### 导致token身份失效的几种原因\n	+ 重启服务器\n	+ 超过设定的过期时间\n\n## 安装 axios (发请求的包)\n	+ 先查看是否安装了 axios 在 package.json 中 dependencies 里查看\n\n```npm\n\nnpm i axios --save\n\n```\n\n### @keyup.enter.native=\"fn\"  // 注册鼠标按下事件\n\n\n### 回调地狱\n\n```js\n\nmethods: {\n    async headleLogin() {\n      const res = await this.$http.post(&apos;login&apos;, this.form)\n      const data = res.data;\n      if(data.meta.status === 200){\n        this.$root.directives = &apos;/&apos;;\n        sessionStorage.setItem(&apos;token&apos;, data.data.token);\n        this.$message.success(&apos;登录成功 !&apos;);\n      }else {\n        this.$message.error(&apos;登录失败 !&apos;);\n      }        \n    }\n  }\n\n```\n\n\n\n# 创建后台首页\n\n## 创建后台组件\n\n### 定义组件\n### 定义路由\n\n// this.$router.push({ name: &apos;home&apos; });  //跳转页面\n\n# 用户管理\n\n## 创建组件\n// 注意文件多的时候创建文件夹进行分类管理\n	+ 导入组件\n\n## 配置路由(配置子路由)\n\n```js\n\n//{ name: &apos;home&apos;, path: &apos;/&apos;, component: Home } // 原来的\n\n//注意配置子路由时不要有空格\n{\n  name: &apos;home&apos;,\n  path: &apos;/&apos;,\n  component: Home,\n  children: [\n    // 子路由\n    {\n      name: &apos;users&apos;,\n      path: &apos;users&apos;,\n      component: Users\n    }\n  ]\n}\n\n \n\n```\n\n\n> scoped  作用域\n\n```js\n<style scoped>\n  \n</style>\n```\n\n\n\nloopback  接口文档\n\n\n## 模板\n\n```html\n<template slot-scope=\"scope\">\n</template>\n```\n\n### 创建一个子组件(全局)\n\n// 调用的那个文件\n```js\n\n<my-breadcrumb level1=\"商品管理\" level2=\"商品分类\"></my-breadcrumb>\n\n```\n\n\n```js\n\n<template>\n    <el-breadcrumb separator=\"/\">\n      <el-breadcrumb-item :to=\"{ path: &apos;/&apos; }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item><a href=\"/\">{{ level1 }}</a></el-breadcrumb-item>\n      <el-breadcrumb-item>{{ level2 }}</el-breadcrumb-item>\n    </el-breadcrumb>\n</template>\n\n<script>\nexport default {\n    name: &apos;MyBreadcrumb&apos;, // 调用有格式限制驼峰式,中划线\n    props: [&apos;level1&apos;, &apos;level2&apos;]  // 父组件给子组件传值\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n// 在入口文件中\n```js\n\n// 导入自己封装的面包屑组件\nimport MyBreadcrumb from &apos;@/components/mybreadcrumb&apos;;\n\n// 全局组件\nVue.component(MyBreadcrumb.name, MyBreadcrumb);\n\n```\n\n// 父组件给子组件传值是单向的\n\n\n\n### 设置局部组件\n\n// element-tree-grid 表格插件,在github上下载\n\n```html\n<!-- 调用 -->\n<el-table>\n  <el-tree-grid\n  prop=\"cat_name\"\n  label=\"分类名称\"\n  treeKey=\"cat_id\"\n  parentKey=\"cat_pid\"\n  levelKey=\"cat_level\"\n  :indentSize=\"20\"></el-tree-grid>\n</el-table>\n```\n\n\n```js\n\n// 导入tree-colum组件\nimport ElTreeGrid from &apos;element-tree-grid&apos;;\n\n\n// 定义\nexport default {\n  components: {\n    &apos;el-tree-grid&apos;: ElTreeGrid\n  }\n};\n</script>\n\n```\n\n\n\n### 在(表格中)需要判断的时候使用模板\n\n```js\n<el-table\n    :data=\"tableData\"\n    height=\"370px\"\n    style=\"width: 100%;\">\n    <el-tree-grid\n      prop=\"cat_name\"\n      label=\"分类名称\"\n      treeKey=\"cat_id\"\n      parentKey=\"cat_pid\"\n      levelKey=\"cat_level\"\n      :indentSize=\"20\"></el-tree-grid>\n    <el-table-column\n    label=\"级别\"\n    prop=\"cat_level\">\n        <template slot-scope=\"scope\">\n            <span v-if=\"scope.row.cat_level === &apos;0&apos;\">第一级</span>\n            <span v-else-if=\"scope.row.cat_level === &apos;1&apos;\">第二级</span>\n            <span v-else-if=\"scope.row.cat_level === &apos;2&apos;\">第三级</span>\n        </template>\n    </el-table-column>\n    <el-table-column\n    label=\"是否有效\"\n    prop=\"cat_deleted\">\n    </el-table-column>\n</el-table>\n\n```\n\n\n\n# 父组件给子组件传值\n\n- 在子组件中加入 props 属性 [&apos;count&apos;]\n- count 就相当于子组件内部的一个属性\n- 父组件 需要给子组件传值 <num :count=\"c\"></num>\n\n\n## 子组件\n\n```vue\n\n<template>\n  <div>\n    <button>+</button>\n    <input v-model=\"count\">\n    <button>-/button>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  props: [&apos;count&apos;]\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n\n## 父组件\n\n```vue\n\n<template>\n  <div id=\"app\">\n    <!-- 数据放在子组件中 -->\n    <num :count=\"c\"></num>\n  </div>\n</template>\n\n<script>\nimport num from &apos;@/components/num&apos;;\n\nexport default {\n  name: &apos;App&apos;,\n  data() {\n    return {\n      c: 1\n    }\n  },\n  components: {\n    num\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n\n\n# 子组件给父组件传值\n\n## 父组件\n\n```vue\n\n<template>\n  <div id=\"app\">\n    购物车\n    <br />\n    <index @numchange=\"nc\" :gg=\"c\"></index>\n    {{ c }}\n  </div>\n</template>\n\n<script>\nimport index from &apos;@/components/index/index&apos;\n\nexport default {\n  name: &apos;App&apos;,\n  data() {\n    return {\n      c: 20\n    }\n  },\n  components: {\n    index\n  },\n  methods: {\n    nc(num) { // 带上参数实现父子组件双向数据绑定\n      this.c = num\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n\n```\n\n\n## 子组件\n\n```text\n\n注意: 触发的事件\n\n```\n\n```vue\n\n<template>\n    <div>\n        <input @click=\"numadd\" type=\"button\" value=\"+\">\n        <input type=\"text\" v-model=\"num\">\n        <input @click=\"numsub\" type=\"button\" value=\"-\">\n    </div>\n</template>\n\n<script>\nexport default {\n  props: [&apos;gg&apos;], // vue 不建议直接修改它的值\n  data() {\n    return {\n      num: &apos;\n    }\n  },\n  created() {\n    this.num = this.gg\n  },\n  methods: {\n    numadd() {\n      this.num++ // 别忘了加 this\n      // vue给我们实现的一套自定义事件的机制 让我们能 触发一个自定义事件 \n      // 给当前组件添加一个事件\n      this.$emit(&apos;numchange&apos;, this.num) // 第二个参数实现父子组件双向数据绑定\n    },\n    numsub() {\n      this.num--\n      // 给当前组件增加一个事件\n      this.$emit(&apos;numchange&apos;, this.num)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n\n\n\n# 不相关组件传值\n\n$on     监听-先监听再触发\n$emit   触发\n\n```text\n\n事件是属于某个对象的\n监听的对象和触发的对象必须一致  // 所以需要导入一个js文件->文件中创建一个 vue 实例\n\n```\n\n\n## 从另一文件中导 入 vue 实例\n\n```js\n\nimport Vue from &apos;vue&apos;\n\nconst vueObj = new Vue()\n\nexport default vueObj\n\n```\n\n\n## 在 b 中注册事件\n\n```vue\n\n<template>\n    <div>\n        b\n        <input @keyup=\"handleKeyup\" v-model=\"gg\" type=\"text\">\n    </div>\n</template>\n\n<script>\nimport vueObj from &apos;@/components/utils/communications&apos;\n\nexport default {\n  data() {\n    return {\n      gg: &apos;\n    }\n  },\n  methods: {\n    handleKeyup() {\n      vueObj.$emit(&apos;change&apos;, this.gg)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n## 在 a 中监听事件\n\n```\n\n<template>\n    <div>\n        a\n        <br />\n        {{ heihei }}\n    </div>\n</template>\n\n<script>\nimport vueObj from &apos;@/components/utils/communications&apos;\n\nexport default {\n  data() {\n    return {\n      heihei: &apos;\n    }\n  },\n  created() {\n    vueObj.$on(&apos;change&apos;, (num) => {\n      this.heihei = num\n    })\n  }\n}\n</script>\n\n<style>\n</style>\n\n```\n\n\n\n\n\n> 数组的结构赋值\n\n```js\n\nlet arr = [1, 52, 8, 10];\nlet [a, b, ...c] = arr;\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n\n1\n52\n[8, 10]\n\n\n```\n\n\n> 对象的解构赋值\n\n```js\n\nlet res = {\n  data: [],\n  status: 200,\n  headers: {\n\n  } \n}\n\n```\n\n\n> 数组的扩展运算符(es6)\n\n```js\n\n// 合并数组\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet newarr = [...arr1, ...arr2];\n\n```\n\n\n\n> 为动态元素添加数据绑定\n\n```\n\n{{ user.age }}\n\ncreated() {\n  this.$set(this.user, &apos;age&apos;, 18);\n},\ndata: {\n  user: {\n    name: &apos;zz&apos;\n  }\n}\n\n```\n\n> 获取DOM元素\n\n```\n<div ref=\"chart\" style=\"width: 600px; height: 400px;\"></div>\n\nthis.$refs.chart\n\n```\n\n## 打包项目\n\n+ npm run build\n  + .map  // 映视的文件\n\n```text\n\n利用路由懒加载拆分大文件\n\n```\n\n+ 路由懒加载 ( Vue Router )\n  + 懒加载: 用的时候才加载\n  + 将文件变小\n\n### 1. 将import 改成 const\n\n```js\n\nimport Vue from &apos;vue&apos;;\nimport Router from &apos;vue-router&apos;;\n\n// 导入element-ui 中的Message方法\n// 他不要转成那种形式,他不是自己写的模块,不需要走路由\nimport { Message } from &apos;element-ui&apos;;\n\n// 导入主键\nconst Login from &apos;@/views/login&apos;;\nconst Home from &apos;@/views/home&apos;;\nconst Users from &apos;@/views/users/users&apos;;\nconst Rights from &apos;@/views/roles/rights&apos;;\nconst Roles from &apos;@/views/roles/roles&apos;;\n\n// 商品分类组件\nconst Categories from &apos;@/views/goods/categories&apos;;\nconst Goods from &apos;@/views/goods/goods&apos;;\nconst GoodsAdd from &apos;@/views/goods/goodsadd&apos;;\nconst Params from &apos;@/views/goods/params&apos;;\n\nconst Orders from &apos;@/views/orders/orders&apos;;\nconst Reports from &apos;@/views/reports/reports&apos;;\n\n```\n\n\n### 2. \n\n```js\n\n// 路由懒加载\n// 导入主键\nconst Login = () => import(&apos;@/views/login&apos;);\nconst Home = () => import(&apos;@/views/home&apos;);\nconst Users = () => import(&apos;@/views/users/users&apos;);\nconst Rights = () => import(&apos;@/views/roles/rights&apos;);\nconst Roles = () => import(&apos;@/views/roles/roles&apos;);\n\n// 商品分类组件\nconst Categories = () => import(&apos;@/views/goods/categories&apos;);\nconst Goods = () => import(&apos;@/views/goods/goods&apos;);\nconst GoodsAdd = () => import(&apos;@/views/goods/goodsadd&apos;);\nconst Params = () => import(&apos;@/views/goods/params&apos;);\n\nconst Orders = () => import(&apos;@/views/orders/orders&apos;);\nconst Reports = () => import(&apos;@/views/reports/reports&apos;);\n\n```\n\n\n\n### 3.重新 npm run build\n\n\n## CDN 配置\n\n+ 1. 找到 package.json 中的 dependencies 模块, 查看项目中所用到的库(模块)\n\n+ 2. * http://www.bootcdn.cn/ * 到这个网站中找到它的cdn网址\n\n+ 3. 将其复制到 index.html 入口文件中,进行引用\n  + 注意 element-ui 有css文件也需要进行cdn\n  + 注意引用有先后顺序\n\n+ 4. 找到webpack.base.conf.js\n  + 找到 module.exports\n  + \n```js\n\n  entry: {\n    app: &apos;./src/main.js&apos;\n  },\n  // 配置cdn - 在entry下面添加这个配置\n  externals: {\n    // 前面的属性 vue 代表的是 import ... from &apos;vue&apos;;\n    // 值 Vue 是 vue.js 暴露在全局中的构造函数名称\n    // 参考 main.js 中写的以下值\n    vue: &apos;Vue&apos;,\n    axios: &apos;axios&apos;,\n    echarts: &apos;echarts&apos;,\n    &apos;element-ui&apos;: &apos;ELEMENT&apos;,\n    moment: &apos;moment&apos;,\n    &apos;vue-router&apos;: &apos;VueRouter&apos;\n  }\n\n```\n\n\n## npm install http-server -g  安装服务\n\n+ 重新 npm run build 运行 \n+ hs -o  // 启动服务\n\n\n# Vuex\n\n```text\n\n中心化的状态管理工具\n为了解决很多组件之间的通讯(数据交互)\nvuex 是 vue的一个插件\n\n```\n\n+ Vue components\n  + 当用户跟视图进行交互的时候,点了按钮或文本框改变的时候\n\n+ Actions\n  + 会去调用 actions 触发一个行为, actions 会发送一个异步的请求\n  + 拿到后端接口的数据, 它不直接更改数据,\n\n+ Mutations\n  + 它会将拿到的数据发送给Mutations 这个动作, Mutations 会去改变数据\n  + Devtools 监听它的所有操作\n\n+ State\n  + 数据改变直接,它会更新视图\n',0,0,0),(88,NULL,30,'Vuex','简单的记录一下之前的项目步骤',1551518283302,1551573493374,5,2,0,'\n## 安装 vuex\n\n`vue init webpack vuex-demo`  安装vue\n`npm install vuex --save` 安装vuex\n\n## 删除没用的代码,以及配置语法规范\n\n## 引入vuex\n\n+ 在main.js 文件中\n\n```js\n\nimport Vuex from &apos;vuex&apos;\n\nVue.use(Vuex) // 注意这里是 Vue\n\n```\n\n\n## 在 main 创建一个仓库\n\n```js\n\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from &apos;vue&apos;\nimport App from &apos;./App&apos;\nimport Vuex from &apos;vuex&apos;\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increate(state) {\n      state.count++\n    }\n  }\n})\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: &apos;#app&apos;,\n  store, // store: store  因为都是store所以可以简写\n  components: { App },\n  template: &apos;<App/>&apos;\n})\n\n```\n\n### 在 App.vue 中写入\n\n```vue\n\n<template>\n  <div id=\"app\">\n    {{ $store.state.count }}\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: &apos;App&apos;,\n  components: {\n  }\n}\n</script>\n\n<style>\n</style>\n\n```\n\n+ 对于store的封装,具体看github,已经上传\n\n\n### 计算属性,简化代码\n\n```\n\n<template>\n    <div>\n        com-a\n        {{ $store.state.count }}\n    </div>\n</template>\n\n<script>\nexport default {\n\n}\n</script>\n\n<style>\n\n</style>\n\n-------------------------简化后-------------------------------------\n\n<template>\n    <div>\n        com-a\n        {{ count }}\n    </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n+ 计算属性 - 简化视图中的数据绑定, 但是如果要绑定多个状态的话, \n要提供多个计算属性,比较麻烦\n  + 利用 mapstate 映视状态来解决这一问题, 自动生成计算属性\n\n## state\n\n```vue\n\n<template>\n    <div>\n        com-a\n        {{ num }}\n    </div>\n</template>\n\n<script>\nimport { mapState } from &apos;vuex&apos;\n\nexport default {\n  // 假设当前组件中已经有count属性\n  // 属性 是要映视到当前组件中的属性名称 this.num\n  // 值: 是 vue 的仓库中管理的数据 this.$store.count\n  // computed: mapState({\n  // num: &apos;count&apos;\n  // })\n\n  // this.count (这是一个计算属性) 映视到 this.$store.state.count\n  computed: {\n    // 组件本身的计算属性,写于不写都可以,不知道为什么我写了就报错,但仍能正常执行\n    //test() {\n    //}\n    ...mapState({\n      num: &apos;count&apos;\n    })\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n## 安装 bootstrap\n\n### npm i bootstrap@3.3.7 --save\n\n### 在 main.js 这个文件中 导入 import &apos;bootstrap/dist/css/bootstrap&apos;\n\n```js\n\n// 加载 bootstrap 的样式\nimport &apos;bootstrap/dist/css/bootstrap&apos;\n\n```\n\n### 配置省略后缀名\n+ build/webpack.base.conf.js\n+ resolve: {\n    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;], // 在这里面加入想省略的后缀名\n    + 修改配置文件后重启\n\n### 在 src/assets/css/index.css  创建这个文件,并将需要的css复制过来\n\n### 在 main.js 中载入\n\n```js\n\n// 加载自定义样式\nimport &apos;@/assets/css/index&apos;\n\n```\n\n```txt\n\njsonp 的原理:\n  1. 会动态的生成 script 标签, 并设定 src 的属性\n  2. src 属性, 设置成了接口地址\n  3. src 属性的接口地址, 必须带一个参数, 一般默认为 ?callback=随机的函数名\n  4. 要求接口返回的格式是: 随机的函数名({...})\n  5. 客户端, 要提供一个随机的函数\n\nCORS 的原理:\n  1. 服务器 要设置一个响应头, 告诉浏览器能够跨域\n  2. XMLHTTPRequest2.0  FomData\n\n\n```\n\n\n+ 豆瓣api不支持跨域\n+ 解决方案:\n  + a. jsonp\n    + axios 不支持 jsonp\n  + b. 代理服务器\n\n## 检测 api 是否支持jsonp\n+ https://api.douban.com/v2/movie/in_theaters\n+ https://api.douban.com/v2/movie/in_theaters?callbake=fn\n  + 如果返回的数据值 fn 包裹的那么,就说明是支持的\n\n## 安装jsonp\nnpm install jsonp --save\n\n### 创建一个src/store/index.js 文件\n\n```js\n\nimport Vue from &apos;vue&apos;\nimport Vuex from &apos;vuex&apos;\n\nVue.use(&apos;Vuex&apos;)\n\n// 创建仓库\nconst store = new Vuex.Store({\n  state: {},\n  getters: {},\n  mutations: {},\n  actions: {}\n})\n\nexport default store\n\n```\n\n\n```txt\n\n当多个模块中的 state 里的数据有命名重复时,才开启命名空间, 加以区别\n\n```\n\n\n### vuex 分模块管理\n\n+ 创建 src/store/modules/movie-list.js 文件\n\n```js\n\nimport { defaultCoreCipherList } from \"constants\";\n\nconst movieList = {\n  namespaced: true, //开启命名空间\n  state: {\n\n  },\n  mutations: {\n    \n  },\n  actions: {\n\n  }\n}\n\nexport default movieList\n\n```\n\n### 在src/store/index.js\n\n导入 movieList\n\n```index.js\n\nimport Vue from &apos;vue&apos;\nimport Vuex from &apos;vuex&apos;\nimport movieList from &apos;./modules/movie-list&apos;\n\nVue.use(&apos;Vuex&apos;)\n\n// 创建仓库\nconst store = new Vuex.Store({\n  modules: {\n\n  },\n  state: {},\n  getters: {},\n  mutations: {},\n  actions: {}\n})\n\nexport default store\n\n```\n\n### 导入src/main.js\n\n```mainjs\n\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from &apos;vue&apos;\nimport App from &apos;./App&apos;\nimport router from &apos;./router&apos;\nimport store from &apos;./store&apos; // 导入vuex创建的仓库\n\n// 加载 bootstrap 的样式\nimport &apos;bootstrap/dist/css/bootstrap&apos;\n\n// 加载自定义样式\nimport &apos;@/assets/css/index&apos;\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: &apos;#app&apos;,\n  store,\n  router,\n  components: { App },\n  template: &apos;<App/>&apos;\n})\n\n```\n\n\n## 封装公共组件\n\n> 将公共的部分封装起来\n\n\n+ 在 components 里面新建一个组件\n+ 将公共的部分将切放入组件中\n  + `<template>...`\n+ 在原文件里引入这个组件\n  + `import MyHeader from &apos;@/components/myheader&apos;`\n+ 在源文件组件中注册局部组件\n\n```js\nexport default {\n  name: &apos;App&apos;,\n  components: {\n    MyHeader // 关键\n  }\n}\n```\n\n+ 在原文件中使用公共组件\n  + `<my-header></my-header>`',0,0,0),(89,NULL,29,'Vue-1','学习Vue的第一天',1551518538350,1551518684467,2,2,0,'总结： \n1. 计算属性：	对于任何复杂逻辑，你都应当使用计算属性。\n2. 侦听器： 		当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的\n3. 过滤器：		可被用于一些常见的文本“格式化” - 时间格式化\n4. 自定义指令：	对普通 DOM 元素进行底层操作 - 聚焦输入框\n5. ref: 		被用来给元素或子组件注册引用信息 - 可用于操作 DOM 元素\n\n\n\n\njson-server    在github\n\n--watch  监视文件的(不加也可以)\n\n百度脑图\n\n渐进式: 先实现最小功能,不够再加\n\n在胡子语法中可以进行:\n1. 运算, 如: 加减乘除\n2. 判断, 如: 三元表达式\n3. 展示\n4. 插值表达式不能有语句, 如: var a = 1;\n5. 不能有分号 ;\n\n\n###\nvue对象里:\n\n+ _ 下划线开头的是私有的,\n+ data 选项中的内容,vue自动把它添加到实例的属性中\n+ 属性都是 $ 开头\n\n\n###### 指令: 带有 v- 前缀的\n\n想解析 html 标签\n\n<div v-html=\"msg\"> </div>\n\nvar vm = new Vue({\n	el: &apos;.box&apos;,\n	data: {\n		msg: &apos;<b> kdjfd </b>&apos;\n	}\n});\n\nv-html 会解析内容中的html标签   对应 innerHTML\nv-text 不会解析, 原样输出\n\n单向数据绑定\nv-bind:src  绑定任何属性	\nv-bind:class=\"{ active: isActive}\"  data: { isActive: true}\nv-bind:class=\"[fontClass, colorClass]\"  data: { isActive: true, fontClass: &apos;font20&apos;}\nv:bind:style=\"{color: colorStyle, fontSize: font18 + &apos;px&apos;}\"  data: {colorStyle: &apos;pink&apos;}\nv:bind:style=\"[blue, font20]\"  data: {blue: {color: &apos;blue&apos;}}\nv-bind: 可以简化为 :\n\n\n####  双向数据绑定\n\n+ 数据发送变化可以更新到界面\n+ 通过界面可以更改数据\n\nv-model=\"name\"  data: {name: &apos;}\n\n\n### v-on 绑定事件\n\nv-on:click=\"num = num + 2;\"    data: {}\n\n绑定方法:\n记得加 el 绑定元素\nv-on:click=\"fn\"  new Vue({ methods: {fn: function(){} } });\nv-on:click=\"fn\"  new Vue({ methods: { fn(){} } });  //简便写法\n\n如果onclick 要执行的方法中传递多个参数\nv-on:click=\"fn(abc, $event)\"\n\nprevent 阻止默认事件执行\n<a href=\"#\" @click.prevent=\"handleDelete\">删除</a>\n\n## v-show\nv-show=\"isShow\"   data: {isShow: true}\n在methods中的方法内部的this是当前vue的实例(对称)\nv-show=\"isShow\"   设置了 display\n\n## v-if\nv-if=\"score === &apos;A&apos;\"   data: {score: &apos;A&apos;}\n如果条件不成立, 此时不会输出对应的标签\n\n<span v-if=\"score === &apos;A&apos;\"></span>	\n<span v-else=\"score === &apos;A&apos;\"></span>	\n\n## v-for\n<li v-for=\"\"\n\n## v-cloak  //防止数据短暂性不解析\n\n需要添加属性选择器\n<style>\n	[v-cloak] {\n		display: none;\n	}\n</style>\n\n<span v-cloak>{{ msg }}</span>\n\n## v-once 取消数据绑定(可用于优化性能)\n<span v-once></span>\n\n\n文本框的change 事件触发条件:\n	+ 文本框内容发生改变\n	+ 失去焦点的时候\n\n\nv-model 修饰符：\n.lazy - 取代 input 监听 change 事件\n.number - 输入字符串转为数字\n.trim - 输入首尾空格过滤\n\n\n##\n绑定单个文本框:\nv-model=\"ischecked\"\n绑定多行文本框\nv-model=\"checklist\"	',0,0,0),(90,NULL,29,'Vue-2','学习 Vue 的第二天',1551519162966,NULL,1,2,0,'\nvue-devtools\n\nGo Live\n\njson-server --watch db.json  开启服务\n##########  过滤器\n\n```js\n{{ msg | abc }}\n\nnew Vue({\n  data: {\n    msg: &apos;jkdfn&apos;\n  },\n  filters: {\n    abc(value) {\n      return value.charAt(0).toUpperCase() + value.substr(1).toLowerCase();\n    }		\n  }	\n});\n```\n\n##\nmoment 下载,用于格式化日期\n\n全局过滤器\n```js\n{{ item.time | fmtDate(&apos;YYYY-MM-DD HH:mm:ss&apos;) }}\n\nVue.filter(&apos;fmtDate&apos;, (value, fmtStr) => {\n  return moment(value).format(fmtStr)\n});\n```\nfmtStr 形式\nvalue 日期\n\n##\n\n{{ abc }}\n\n计算属性\n```js\nVue({\n  computed: {\n    abc() {\n      return a + b;\n    }\n  }\n})\n```\n\n\n#### ref\n```js\n<input ref=\"abc\"> </input>\n\nVue({\n  mounted() { //页面加载完毕\n    this.$refs.abc.focus();\n  }\n})\n```\n\n### 局部自定义指令\n```js\n<input type=\"text\" v-abc> </input>\n\nnew Vue({\n  directives: {\n    abc: {\n      inserted(el){\n        // el 指令所在的dom元素\n        el.focus();\n      }\n    }\n  }\n});\n```\n\n\n### 全局自定义指令\n```js\n<input type=\"text\" v-abc> </input>\n\n// 注册一个全局自定义指令 `v-abc`\nVue.directive(&apos;abc&apos;, {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n\n###############################\n\n\n自定义属性 computed\n\n\n\n2. get 根据id获取数据\n\n```js\naxios.get(&apos;http://Localhost:3000/brands/111&apos;)\n.then((response) => {\n	console.log(response.data);\n})\n```\n\n\n根据id删除数据\n\n3. delete 根据id 删除数据\n\n```js\naxios.delete(&apos;http://localhost/&apos;)\n```\n\n4. post 添加数据\n\n```js\naxios.post(&apos;http://localhost:3000/brans&apos;, {\n  name: &apos;jdfndng&apos;,\n  date: &apos;2018-1-1&apos;\n})\n.then((response) => {\n  console.log(response.data);\n})\n.catch((error) => {\n  console.log(error);\n})\n```\n\n\n##############\n\nhistory  历史记录\n\n\n\n###########\n\naxios 独立的脚本库,和Vue没有关系	(可以实现数据交互)\n\n需要下载,然后引用\n\n`npm i axios --save`\n\n\n// 导入axios模块\nimport axios from &apos;axios&apos;;\n\n```js\n// get 根据id获取数据\naxios.get(&apos;http://localhost:3000/brands/111&apos;)\n	.then((response) => {\n	  console.log(response.data);\n	})\n	.catch((error) => {\n	  console.log(error);\n	});\n\n\n// post 添加数据\naxios.post(&apos;http://localhost:3000/brands&apos;, {\n	name: &apos;djfkdjg&apos;,\n	date: &apos;2018-2-5&apos;\n})\n	.then((response) => {\n	  console.log(response.data);\n	})\n	.catch((error) => {\n	  console.log(error);\n	});\n\n\n// get 根据条件查询数据\naxios.get(&apos;http://localhost:3000/brands?name_like=x&apos;)\n	.then((response) => {\n	  console.log(response);\n	})\n	.catch((error) => {\n	  console.log(error);\n	})\n```\n\n#\n\n```js\nvar vm = new Vue({\n	axios.get(&apos;http://localhost:3000/brands&apos;)\n	.then((res) => {\n		if(res.status === 200){\n			this.list = res.data;\n		}\n	})\n});\n```\n\n插件\n\nVue 2 Snippets\n\nVetur\n\n\n###\n\nsvn   是集中式的版本控制 (所有的版本只有在服务端)\ngit   是分布式的(客户端服务端都存在所有的版本)\n\n#\n\n初次使用需要配置\ngit config --global user.name \"xxx\"\ngit config --global user.email xxx@example.com\n\n\ngit init  创建本地仓库\n\ngit add .  添加到暂存区\n\ngit status   查看状态\n\ngit commit -m &apos;提交信息&apos; 提交到本地仓库\n\ngit status\n\ngit log  查看版本\ngit log --pretty=oneline  查看版本\n\ngit reset --hard commit_id(输入前几个就可以了)\ngit reset --hard 165516165e   回到这个版本\n\ngit reflog  查看所有操作记录\n\ngit checkout -- file.js   还原指定文件到最后一次提交  \n\n\nCreate a new repository\n\ngit push origin master  //上传到远程仓库\n\nSourcetree  可视化界面\n\n\n\n######\n\n添加方法: methods: {}',0,0,0),(91,NULL,29,'Vue-3','学习Vue的第三天',1551570877408,NULL,1,2,0,'## 全局组件\n\n```js\n<div id=\"app\">\n	<my-breadcrumb></my-breadcrumb>\n</div>\n\nVue.component(&apos;my-breadcrumb&apos;, {\n	//  模板中只能有一个根元素\n	template: &apos;<div><span>首页</span><span>用户管理</span></div>&apos;,\n	// 组件中的data是方法,因为每个组件都有自己的作用域\n	data: \n});\n\nvar vm = new Vue({\n	el: &apos;#app&apos;,\n	data: {\n\n	}\n});\n```\n\n\n## 局部组件\n\n```js\n<div id=\"app\">\n	<component-b></component-b>\n<div>\n\n\nvar ComponentB = {\n	template: &apos;<div> {{name}} </div>&apos;,\n	data() {\n		return {\n			name: &apos;用户管理&apos;\n		}\n	}\n};\n\nnew Vue({\n	el: &apos;#app&apos;,\n	data: {\n\n	},\n	components: {\n		ComponentB\n	}\n})\n```\n\n\n## 父组件传值给子组件\n\n```js\n<div id=\"app\">\n	<my-breadcrumb :lname1=\"name\" :lname2=\"name2\"></my-breadcrumb>\n</div>\n\nVue.component(&apos;my-breadcrumb&apos;, {\n	//  模板中只能有一个根元素\n	template: &apos;<div><span>{{lname1}}</span><span>{{lname2}}</span></div>&apos;,\n	// 组件中的data是方法,因为每个组件都有自己的作用域\n	data: \n});\n\nvar vm = new Vue({\n	el: &apos;#app&apos;,\n	data: {\n\n	}\n});\n```\n\n\n`github  vue-cli  master`\n\n#\n\n```js\n<router-link to=\"/\">首页</router-link>\n<router-link to=\"/users\">用户管理</router-link>\n\n<script src=\"vue.js\"></script>\n<script src=\"vue-router.js\"></script>\n// 组件\nvar Home = {\n	template: &apos;<div>这是首页的内容</div>&apos;\n};\nvar User = {\n	tempalte: &apos;<div>这是用户的内容</div>&apos;\n}\n\nvar router = new VueRouter({\n	routers: [\n		{ name: &apos;home&apos;, path: &apos;/&apos;, component: Home},\n		{ name: &apos;users&apos;, path: &apos;/users&apos;, component: Users }\n	]\n})\n\nvar vm = new Vue({\n	el: \"#app\",\n	router\n});\n```\n\n#\n\n\nnpm run dev  启动项目\n\nnpm run lint  语法检查\n\n```txt\neslint --ext .js,.vue src --fix  报不是内部命令也不是外部命令\n可以找到 package.json文件\n在script中,\n添加:\n\"lintfix\": \"eslint --ext .js,.vue src --fix\",\n```\n\n然后执行 npm run lintfix   // 自动修改语法错误\n\n\n## 导出模块\n\n```js\nexport default {\n	name: &apos;App&apos;\n}\n\n// 导入模块\nimport Vue from &apos;vue&apos;;\n\n// 注册Vue-Router插件\nVue.use(Router);\n```\n\n下载bootstrap@3.3.7 --save',0,0,0),(92,NULL,29,'Vue-4','学习Vue的第四天',1551571015670,NULL,2,2,0,'```js\n<router-link>\n\n\n{ name: &apos;home&apos;, path: &apos;/&apos;, redirect: &apos;/heroes&apos; }\n{ name: &apos;home&apos;, path: &apos;/&apos;, redirect: { name: &apos;heroes&apos; } } // 另一种写法\n// edirect  重定向\n\n\n// 方式一:\n// 实现页面跳转(编程式导航)\nthis.$router.push({\n    name: &apos;abx&apos;\n})\n\n// 方式二:\n<el-button style=\"margin-top: 15px;\" @click=\"$router.push({name: &apos;goodsadd&apos;})\" type=\"primary\" plain>添加商品</el-button>\n\n// 根据路由地址获取id(根据url获取id)\ncreated() {\n    this.id = this.$route.params.id;	\n}\n```',0,0,0),(93,NULL,29,'Vue-5','学习Vue的第五天',1551572379928,NULL,4,2,0,'`npm run push`  快速提交\n\n`.bat` `window` 的可执行文件（可将命令写入，如： `npm run dev` || `node app`)\n\n`@keyup.enter.native=\"fn\"`   // 按下回车键\n\n</br>\n\n## async (es7的)\n\n> 解决回调地狱\n\n```js\nmethods: {\n    async fn() {\n        const res = await this.$http.post(&apos;login&apos;, this.form);\n    }\n}\n```\n\n`async`  // 异步\n`await`  // 等待请求结束之后才能拿到结果\n\n</br>\n\n## 一个项目的开始\n`vue init webpack 项目名称`\n\n\n### 项目初始化(创建一个vue项目)\n \nvue init webpack blog// blog 项目名称\n\nnpm --cache-min 515 install     // 如果要安装的包之前有安装,即可从缓存中进行安装\n\n</br>\n\n### 语法糖 ES6\n\n```js\nlet arr = [1,2,3];\n\n\nlet [a, b] = arr;\n\n// 上面是简洁写法\nlet a = arr[0];\nlet b = arr[1];\n```\n\n```js\nlet res = {\n    data: [],\n    age: 18\n};\n\nlet {data, meta} = res;\nlet {data: d1, meta: m1} = res;\n```\n\nbabel 可以将es6语法转化成es5的语法格式\n\n\n\n#####\n\nelement tree grid  表格组件\n\nhttps://github.com/foolishchow/element-tree-grid\n\n####\n\n> 事件: 触发->响应\n\n\n`npm run build` 打包\n\n\n`hs -o` 运行打包后的项目\n\n`npm install http-server -g `\n\n## 作用域\n```css\n<style scoped></style>\n```\nscoped\n\n\n##\n\nbootcdn   cdn 加速服务\n\nDisable cache   禁用缓存(浏览器的)\n\n## 配置cdn   webpack\n```js\nexternals: {\n    // 前面的属性,代表的是 import ... from &apos;vue&apos;;\n    // 值 Vue 是vue.js 暴露在全局中 构造函数名称\n    vue: &apos;Vue&apos;,\n    axios: &apos;axios&apos;,\n    echarts: &apos;echarts&apos;,\n    &apos;element&apos;: &apos;\n\n}\n```\n\n</br>\n\n## 组件之间的传值\n\n> 多个组件嵌套,最外层的组件向最里面的组件传值\n\n### 父组件\n\n`$emit`\n\n###\n\n{{ count }}\n\n// 计算属性 - 简化视图中的数据绑定,但是如果要绑定多个状态的话,要提供多个计算属性,比较麻烦\n```js\ncomputed: {\n    count() {\n        return a + b;\n    }\n}\n\n// 解决上述问题 vuex提供了 mapState 的函数,自动生成计算属性\ncomputed: mapState([\n    &apos;count&apos;\n])\n```\n</br>\n\n## curs   解决跨域\n\n1. 服务器要设置一个响应头, 告诉浏览器能够跨域 access-origin\n2. XMLHTTPRequest2.0  FomData(新增的功能)\n\n\n#\n`webpack`  一个模块化的打包工具,用于打包所有资源,基于 `node`\n\n将所有的内容(它将所有的内容都当作模块)打包成一个文件\n\n`import`  是模块化的语法\n`require()`  `AMD` 模块化的规范,node默认支持这种,\n`浏览器天生是不支持模块化的语法的,可以用脚本库。`\n</br>\n\n#\n\n> 模块化可以解决: 文件间的依赖关系(js的先后顺序), 作用域\n\n\nLTS  长期维护的版本\n\n\n`npm i webpack -D`  安装\n\n`npm uninstall webpack webpack-cli -g`  删除全局的 webpack\n\n\nloader  打包其他类型的\n\n\n\n// 打包模式\nmode\n\n// 打包入口\nentry\n\n// 出口\noutput\n\n// 配置Loader  可以让我们处理\n\n\n</br></br></br>\n\n\nnprogress   加载条\n\n\n###\n\n`vue-quill-editor`    副文本框(插件)\n\n\n### 路由高亮显示\n点谁谁高亮,在当前路径下高亮\n```js\n<router-link tag=\"li\" to\"/heroes\" active-class=\"active\">\n	<a>英雄管理</a>\n</router-link>\n```\n\n关键在于： `active-class=\"active\"`',0,0,0),(94,NULL,3,'BOM与DOM的区别','这是多年前偶然在某位大神的博客中看到的，觉得有助于理解BOM和DOM，故而摘录下来。',1551573805885,1551576354519,7,2,1,'## Window对象：\n\n+ 是整个`BOM`的核心，所有对象和集合都以某种方式回接到`window`对象。`Window`对象表示整个浏览器窗口，但\n\n不必表示其中包含的内容。\n\n## Document对象：\n\n+ 实际上是`window`对象的属性。这个对象的独特之处是唯一一个既属于`BOM`又属于`DOM`的对象。从`BOM`角度看，\n\n`document`对象由一系列集合构成，这些集合可以访问文档的各个部分。\n\n## Location对象：\n\n+ 它是`window`对象和`document`对象的属性。`Location`对象表示载入窗口的`URL`，此外它还可以解析`URI`.\n\n## Navigator对象：\n\n+ `Navigator`包含大量`Web`浏览器相关的信息。各种浏览器支持该对象的属性和方法不尽相同。\n\n## Screen对象：\n\n通过其可以获取用户屏幕相关的信息\n\n`BOM`是浏览器对象模型，用来获取或设置浏览器的属性、行为，例如：新建窗口、获取屏幕分辨率、浏览器版本号等。 `DOM`是文档对象模型，用来获取或设置文档中标签的属性，例如获取或者设置`input`表单的`value`值。 `BOM`的内容不多，主要还是`DOM`。 由于`DOM`的操作对象是文档（`Document`），所以`DOM`和浏览器没有直接关系。',0,0,0),(95,NULL,29,'Vue生命周期','Vue生命周期函数的使用场景',1551605741285,NULL,5,2,0,'```js\n\nvar vm = new Vue({\n            el: &apos;#app&apos;,\n            data: {\n                label: &apos;abc&apos;\n            },\n            // 创造vue实例之后运行此函数, vm中的data/methods中的成员不可用\n            beforeCreate() {\n                console.log(&apos;beforeCreate&apos;)\n                console.log(this.label)\n            },\n            // 创造vue实例之后运行此函数, vm中data/methods属性可用\n            created() {\n                console.log(&apos;created&apos;)\n                console.log(this.label)\n                // 想要拿到数据发送请求可以在这里执行\n            },\n            // 当vue实例的el节点或组件挂载到页面以前运行此函数\n            beforeMount() {\n                console.log(&apos;beforeMount&apos;)\n            },\n            // 当vue实例的el节点或组件挂载到页面以后运行此函数\n            // 可用于操作 DOM\n            mounted() {\n                console.log(&apos;mounted&apos;)\n            },\n            // 当vue实例数据发生改变前触发此函数\n            beforeUpdate() {\n                console.log(&apos;beforeUpdate&apos;)\n            },\n            // 当vue实例数据发生改变后触发此函数\n            updated() {\n                console.log(&apos;updated&apos;)\n            },\n            // 销毁前\n            beforeDestroy() {\n                console.log(&apos;beforeDestroy&apos;)\n            },\n            // 销毁后\n            destroyed() {\n                console.log(&apos;destroyed&apos;)\n            },\n        })\n```',0,0,0),(96,NULL,3,'正则表达式','其实正则表达式不属于js,它是一门独立的语言。之所以归类在此，因为在前端，通常它与js一起使用。',1551608013436,NULL,0,2,0,'## 非严格模式\n\n> 元字符:\n\n`.`  --------------------------------除了 `\n` 以外的任意的一个单个字符\n`|`  --------------------------------或者\n`()` -------------------------------分组或提升优先级别\n`(()(()))` -------------------------从最左边开始查\n`[]` -------------------------------范围\n`[0-9]` ----------------------------任意一个数字就能匹配\n`[a-z]` ----------------------------只要有符合 `a-z` 范围内的任意一个小写字母就能匹配\n`[A-Z]` ----------------------------只要有符合 `A-Z` 范围内的任意一个大写字母就能匹配\n`[a-zA-Z]` -------------------------只要有符合 `a-z,A-Z` 任意一个字母就能匹配\n`[0-9a-zA-Z]`-----------------------只要有符合 `0-9,a-z,A-Z` 任意一个数字或字母就能匹配\n\n一般的元子符如果进入到 `[]` 里面 失去原有的意义\n`[.]` 在这就表示 点\n\n</br></br>\n\n## 限定符 (也是元字符)\n\n`*` ----前面的表达式出现了0次到多次\n`+` ----前面的表达式出现了1次到多次\n`?` ----前面的表达式出现了0次到1次(在非严格模式,不管多少次都能匹配)贪婪模式\n\n`{0,}` -------前面的表达式出现了0次到多次和 * 一样\n`{1,}` -------前面的表达是出现了1次到多次和 + 一样\n`{0,1}` ------前面的表达式出现了0次到 1次和 ? 一样\n`{9}` --------前面的表达式出现了9次  \n`{,1}` -------错误的写法\n\n`d` --------数字--相当于[0-9]\n`D` --------非数字\n`s` --------空白符号\n`S` --------非空白符\n`w` -------非特殊符号 [a-zA-Z0-9_]\n`W` -------特殊符号 [^a-zA-Z0-9]\n`` --------单词边界\n\n`^` -------------------以什么开始或取反\n`^[0-9]` --------------以数字开头 \n`[^a-zA-Z0-9_]` -------取反,区别在于 ^ 在不在括号里面\n\n`$`     以什么结尾\n\n`/g` 意思就是：global可选标志，带这个标志表示替换将针对行中每个匹配的串进行，否则则只替换行中第一个匹配串。\n\n`/i` 意思就是 case insensitive,区分大小写小字。如：sw与sW不管；\n\n`/m` 多行搜索\n\n\n</br></br></br>\n\n## 例子\n\n> ip/掩码：&apos;192.168.255.245/24&apos;\n\n`/^([1-9]|[1-9]d|1d{2}|2[0-5][0-5]).(d|[1-9]d|1d{2}|2[0-5][0-5]).(d|[1-9]d|1d{2}|2[0-5][0-5]).(d|[1-9]d|1d{2}|2[0-5][0-5])([/](d|1d|(2[0-4]))){1}$/`\n\n#\n\n> 匹配一个单词\n\n`/(com)/`    // `/com/`也可以,不需要加 `{1}`\n\n#\n\n> 邮箱验证：\n\n`/^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*.[a-zA-Z0-9]{2,6}$/` // 百度的\n\n`/[0-9a-zA-Z_.-]+[@]{1}[0-9a-zA-Z_.-]+([.]com)$/` // 我写的\n\n#\n\n> 正则匹配判断\n\nvar reg = /[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+){1,2}/;\n\nreg.test(str) // 返回布尔值\n\n#\n\n> 字符串替换\n```js\nfunction ReplaceDemo(){   \n  var r, re; // 声明变量。\n  var ss = \"The man hit the ball with the bat.while the fielder caught the ball with the glove.\";\n  re = /The/g; // 创建正则表达式模式。\n  r = ss.replace(re, \"A\"); // 用 \"A\" 替换 \"The\"。\n  console.log(r); // 返回替换后的字符串。\n}\n\nReplaceDemo();\n```\n#\n> 去除空格\n\n```js\nfunction trim(str) {\n    return str.replace(/(^s+)|(s+$)/g, \"\");\n}\n```\n\n#\n\n> 替换斜杠\n\n```js\nvar r, re;\nvar ss = \"The man hit t/he /ball wit/h the bat.\";\n\nfunction ReplaceDemo(){   \n  re = /[/]+/g;\n  r = ss.replace(re, \"\\\");\n  alert(r);\n}\n\nReplaceDemo();\n```\n#\n\n> 替换第一个和最后一个字母\n\n```js\nvar str = &apos;abcdeafeesa&apos;\nstr.replace(/^a(.*)a$/, function(input, $1) {\n  return &apos;*&apos;+$1+&apos;*&apos;\n})\n```\n#\n\n> exec 方法\n\n用正则表达式模式在字符串中运行查找，并返回包含该查找结果的一个数组。\n\nrgExp.exec(str)\n\n-----------------构造函数来生成正则表达式------------------ \n\n\nvar re = new RegExp(\"^\\d+$\",\"gim\"); //注意，反斜杠需要转义\n\nvar v = \"bl\";\n\nvar re =new RegExp(\"^\\d+\" + v + \"$\",\"gim\"); // re为/^d+bl$/gim\n\n第一个参数不需要`//`,其他都一样',0,0,0),(97,NULL,3,'cookie','操作 cookie',1551608539660,NULL,2,2,0,'## cookie\n\ndocument.cookie\n\n`cookie` 大小不能超过4kb,由于cookie是存放在客户端的计算机中,修改很方便,所以cookie不能存放重要信息\n\n`cookie` 的类型是字符串,而不是数组\n\n`document.cookie = \"name=value;expires=date\"` // 设置 `cookie` 有效期\n\n#\n\n> 例子1:\n\n生成cookie并设置到期时间: \n\n```js\nfunction setCookie(c_name, value, expiredays){\n　　　var exdate=new Date();\n　　　exdate.setDate(exdate.getDate() + expiredays);\n　　　document.cookie=c_name+ \"=\" + escape(value) + ((expiredays==null) ? \"\" : \";expires=\"+exdate.toGMTString());\n}\n```\n\n使用方法：`setCookie(&apos;username&apos;,&apos;Darren&apos;,30)`\n</br>\n#\n\n> 例子2\n\n最常用的例子就是让 cookie 在根目录下,这样不管是哪个子页面创建的 cookie，所有的页面都可以访问到了:\n\n`document.cookie = \"name=Darren;path=/\"`\n\n#\n`\"www.qq.com\"` 与 `\"sports.qq.com\"` 公用一个关联的域名 `\"qq.com\"`，我们如果想让 `\"sports.qq.com\"` 下的 `cookie` 被 `\"www.qq.com\"` 访问，我们就需要用到 `cookie` 的 `domain` 属性，并且需要把 `path` 属性设置为 `\"/\"`。例：\n\n`document.cookie = \"username=Darren;path=/;domain=qq.com\"`\n### 注：一定的是同域之间的访问，不能把 `domain` 的值设置成非主域的域名。\n\n#\n\n> cookie 编码细节\n\n在输入 `cookie `信息时不能包含空格，分号，逗号等特殊符号，而在一般情况下，`cookie` 信息的存储都是采用未编码的方式。所以，在设置 `cookie` 信息以前要先使用 `escape()` 函数将 `cookie` 值信息进行编码，在获取到 `cookie` 值的时候再使用 `unescape()` 函数把值进行转换回来。如设置 `cookie` 时：\n\n\n> 例子3\n\n```js\ndocument.cookie = name + \"=\"+ escape (value)\nreturn unescape(document.cookie.substring(c_start,c_end))\n```\n#\n\n`escape()` 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。(类似于加密)\n`unescape()`  解密\n\n\n##\n```js\n//获取指定cookie的值\nfunction getCookie(cookieName) {\n    var strCookie = document.cookie;\n    var arrCookie = strCookie.split(\"; \");\n    for(var i = 0; i < arrCookie.length; i++){\n        var arr = arrCookie[i].split(\"=\");\n        if(cookieName == arr[0]){\n            return arr[1];\n        }\n    }\n    return \"\";\n}\n```',0,0,0),(98,NULL,3,'Math','Math函数集合',1551615945114,NULL,1,2,0,'## 需求:给好多数字,找出里面的最大值\n  var result = Math.max(10, 20, 30, 40, 50, 100);\n  console.log(result);\n\n\n## 需求:给好多数字,找出里面的最小值\n  var result = Math.min(10, 20, 30, 40, 50, 100);\n  console.log(result);\n\n#\n\n例子:\n\nvar a=[1,2,3,5];\nalert(Math.max.apply(null, a)); // 最大值\nalert(Math.min.apply(null, a)); // 最小值\n\n## 绝对值\n\nMath.abs(number) \n返回的值是 number 参数的绝对值。\n求一个数字的绝对值---Math中的方法来实现\nconsole.log(Math.abs(-20));\n\n## 向上取整\n\nMath.ceil(number)\n返回值为大于等于其数字参数的最小整数。 \n78.1   78.3   78.9   用Math的方法能够实现后的结果是79\n     console.log(Math.ceil(78.1));\n     console.log(Math.ceil(78.3));\n     console.log(Math.ceil(78.9));\n\n## 向下取整\n\nMath.floor(number)\n返回值为小于等于其数值参数的最大整数值。\nconsole.log(Math.floor(78.1));\n  console.log(Math.floor(78.3));\n    console.log(Math.floor(78.9));\n\n#\n\n## 关于js小数的bug\n    var num1 = 0.1;\n    var num2 = 0.2;\n  \n    var sum = num1 + num2;\n    console.log(sum);\n    console.log(sum == 0.3);\n\n###############\n\nMath.random()\n产生的伪随机数介于 0 和 1 之间（含 0，不含 1），也就是，返回值可能为0，但总是小于1\n\n获取某个范围的随机数（x >= 300 && x < 1300\n(Math.random() * (1300-300)) + 300\n\n\n获取某个范围的随机数（x >= min && x <= max\n`Math.floor(Math.random() * (max - min + 1) + min)`\n\n## 平方根\nMath.sqrt(number)\n返回数字的平方根,如果 number 为负数，则返回值为零。 \nconsole.log(Math.sqrt(9));\n',0,0,0),(99,NULL,3,'Array','常用数组方法集合',1551618269426,1551620115314,2,2,0,'## 判断某个值(某些值)是否是数组\n\n> 用于确定传递的值是否是一个 `Array`。\n\nArray.isArray()   \n\nArray.isArray([1, 2, 3]); // true\n\nArray.isArray({foo: 123}); // false\n\nArray.isArray(\"foobar\"); // false\n\nArray.isArray(undefined); // false\n\n</br>\n\n## 数组遍历 forEach()\n```js\nvar arr=[10,20,30,40];\n\narr.forEach(function (x,y,z) {\n  // 第一个参数----元素值\n  // 第二个参数----索引(下标)\n  // 第三个参数----谁调用了这个forEach方法--那么就是谁\n  // console.log(arguments[2]);\n  console.log(x+&apos;=====&apos;+y+&apos;====&apos;+z);\n});\n```\n</br>\n\n## 合并数组 concat()\nvar arr1 = [10, 20, 30];\nvar arr2 = [60, 50, 40];\nvar arr3 = [70, 80, 90];\nvar newArr = arr1.concat(arr2, arr3);\nconsole.log(newArr);\n\n</br>\n\n## 数组反转 reverse()\nvar arr = [1, 100, 20, 50, 30, 90, 70];\n\narr.reverse(); // 反转\nconsole.log(arr);\n\n</br>\n\n## 数组排序\n\n排序:但不稳定\n\n#### 注意:\n\n比较的是一个一个的的字符串 300>1999\n\n> 大到小排序\n```js\nvar arr = [1, 100, 20, 50, 30, 90, 70];\narr.sort(function (a, b) {\n  if (a < b) {\n    return 1;\n  } else if (a == b) {\n    return 0;\n  } else {\n    return -1;\n  }\n});\nconsole.log(arr);\n```\n</br>\n\n> 小到大排序\n```js\nvar names = [&apos;abx&apos;,&apos;abd&apos;,&apos;adc&apos;];\nnames.sort(function(x,y){\n  if(x>y){ // if 可写可不写,只是展示了不同情况的返回值\n    return 1;\n  }else if(x==y){ //从小到大排序\n    return 0;\n  }else{\n    return -1;\n  }\n});\nconsole.log(names);\n```\n\n</br>\n\n## join 拆分或连接某字符串数组\n\n> 指定一个字符串分开每对相邻元素的数组(给数组元素中间添加一个元素,使其分开,或者说:在数组元素中间添加一个元素使其相连)\n\n```js\nvar elements = [&apos;Fire&apos;, &apos;Wind&apos;, &apos;Rain&apos;];\n\nconsole.log(elements.join());\n// expected output: Fire,Wind,Rain(执行后的效果)\n\nconsole.log(elements.join(&apos;));\n// expected output: FireWindRain\n\nconsole.log(elements.join(&apos;-&apos;));\n// expected output: Fire-Wind-Rain\n```\n\n</br>\n\n## slice 删除或截取一个\"数组\"中的某些元素\n\n```js\nvar arr = [10, 20, 30, 40, 50, 60, 70, 80, 90];\nvar result=arr.slice(5); // 删除的是5个元素,从0的位置开始删除到4结束,没有索引5的\nvar result=arr.slice(2,5); // 保留索引为2的开始到4的数据 （包括2不包括5）\nconsole.log(result);\nconsole.log(arr);\n```\n\n</br>\n\n## unshift()\n\n> 将指定的元素插入数组开始位置并返回该数组\n\n`arrayObj.unshift([item1[, item2 [, . . . [, itemN]]]])`\n\n参数\narrayObj\n\n必选项。一个 Array 对象。\n\nitem1, item2,. . .,itemN\n\n可选项。将插入到该 Array 开始部分的元素。\n\n### 例子：\n\nvar arr = [10, 20, 30, 40, 50];\narr.unshift(70);\nconsole.log(arr);\n\n结果:\nArray(6)\n0: 70\n1: 10\n2: 20\n3: 30\n4: 40\n5: 50\nlength: 6\n`__proto__`: Array(0)\n\n</br>\n\n## pop()\n\n移除数组中的最后一个元素并返回该元素。\n\narrayObj.pop()\n\n必选的 arrayObj 引用是一个 Array 对象。\n\n</br>\n\n## `pop` 和 `unshift` 综合案例\n\nvar arr = [10, 20, 30, 40, 50];\narr: 是一个数组\narr.unshift(arr.pop());\n可以将数组的第一个元素与最后一个元素交换位置,多次这样循环可将数组\n的元素反过来显示\narr.unshift(arr.pop());//交换元素位置\nconsole.log(arr);\n\n﻿结果:\n(5) [50, 10, 20, 30, 40]\n0:50\n1:10\n2:20\n3:30\n4:40\nlength:5\n`__proto__`:Array(0)\n\n理解:往后挤\n\n</br>\n\n## shift()\n\n> 移除数组中的第一个元素并返回该元素。\n\nvar arr = [10, 20, 30, 40, 50];\n\narr.shift();\n//console.log(arr.shift());--------10\nconsole.log(arr)\n结果:\n(4) [20, 30, 40, 50]\n0: 20\n1: 30\n2: 40\n3: 50\nlength: 4\n`__proto__`: Array(0)\n\narrayObj.shift( )\n\n必选的 arrayObj 引用是一个 Array 对象。\n\n</br>\n\n## push()\n\n> 将新元素添加到一个数组中，并返回数组的新长度值。\n\narrayObj.push([item1 [item2 [. . . [itemN ]]]])\n\n参数\narrayObj\n\n必选项。一个 Array 对象。\n\nitem, item2,. . . itemN\n\n可选项。该 Array 的新元素。\n\n\n例子:\nvar arr = [1,2,3];\narr.push(4);\nconsole.log(arr);\n\n结果:\n(4) [1, 2, 3, 4]\n\n</br>\n\n## `push` 和 `shift` 综合案例\n\nvar arr = [10, 20, 30, 40, 50];\n\narr.push(arr.shift());\n\nconsole.log(arr);\n\n结果:\n(5) [20, 30, 40, 50, 10]\n0:20\n1:30\n2:40\n3:50\n4:10\nlength:5\n`__proto__`:Array(0)\n\n理解:往前挤\n\n</br>\n\n## filter(过滤)\n\n```js\nvar newArr = [10,11,20,30,40,50,66,80,10].filter(function(ele){\n    //ele数组中的元素\n    return ele > 40;\n});\n\nconsole.log(newArr);\n```\n\n</br>\n\n## 数组反转\narr.reverse()\n\n</br>\n\n## splice() \n\n> 删除数组中的某个值\n\n`arr.splice(index,howmany,item1,.....,itemX)`\n\n例: \n\nvar arr = [1, 2, 3]\narr.splice(0, 1) // return [1]\nconsole.log(arr) // [2, 3]\n\n</br>\n\n> 将某个值插入到数组中特定的位置\n\n例:\n\nvar arr = [1, 2, 4]\narr.splice(2, 0, 3) // return []\nconsole.log(arr) // [1, 2, 3, 4]\n\n参数  描述\nindex 必需。整数，起始值，删除项目的位置，使用负数可从数组结尾处规定位置。\nhowmany 必需。要删除的项目数量。如果设置为 0，则不会删除项目。\nitem1, ..., itemX 可选。向数组添加的新项目。\n\n### 特别注意: 此方法会改变原有数组,若想不改变原数组可使用 slice() 此方法\n\n</br>\n\n##  结构赋值\n\n> 数组的结构赋值\n\n```js\nlet arr = [1, 5, 9];\nlet[a,b,...c] = arr;\nconsole.log(a); // 1\nconsole.log(b); // 5\nconsole.log(c); // array[1,5]\n\n// 数组的扩展运算符\nlet arr1 = [1,2,3];\nlet arr2 = [4,5,6];\n\n// 合并数组\nlet arr = [...arr1,...arr2];\n```\n\n</br>\n\n## map()\n\n> 遍历数组中的每一个元素, 并返回符合条件的数组\n用于从数组中取出想要的某些元素,并组成新数组\n\narr.map((item) => {\n  \n})\n\n</br>\n\n例:\n```js\nvar arr = [\n    {\n        id: 1,\n        name: &apos;y&apos;,\n        age: 18\n    },\n    {\n        id: 2,\n        name: &apos;h&apos;,\n        age: 19\n    },\n    {\n        id: 3,\n        name: &apos;l&apos;,\n        age: 20\n    }\n];\n\nvar newArr = arr.map((item) => {\n    return { gg: item.age }\n});\n// newArr 相当于 var newArr = []\n// return { gg: item.age } 相当于 newArr.push({ gg: item.age })\n\n// 结果: \n\n(3) [{…}, {…}, {…}]\n0: {gg: 18}\n1: {gg: 19}\n2: {gg: 20}length: \n3__proto__: Array(0)\n\n```\n\n</br>\n\n###  数组去重\n\n```js\nlet arr = [1, 2, 8, 5, 2, 11, 9, 5, 55, 11, 9, 100, 111, 9]\nfunction dr(arr) {\n  let newarr = [arr[0]];\n  for(let i = 1; i < arr.length; i++) {\n    if(newarr.indexOf(arr[i]) == -1) { // !newarr.includes(arr[i])\n      newarr.push(arr[i])\n    }\n  }\n  return newarr\n}\n\nconsole.log(dr(arr))\n```\n\n</br>\n\n## 清除数组中所有的元素\n`arr.length = 0;`',0,0,0),(100,NULL,3,'Arguments','一个不常用却很正要的对象',1551620081358,NULL,0,2,0,'```js\nvar sum = function (n) {\n    if (1 == n) {\n        return 1\n    } else {\n        return n + arguments.callee(n - 1);\n        // 6 + 5 + 4 + 3 + 2 + 1  类似于递归调用\n    }\n}\nconsole.log(sum(6));\n```\n`Javascrip` 每个函数都会有一个 `Arguments` 对象实例 `arguments`，它引用着函数的实参，\n可以用数组下标的方式 `[]` 引用 `arguments` 的元素。`arguments.length` 为函数实参个数，\n`arguments.callee` 引用函数自身。\n',0,0,0),(101,NULL,3,'快速排序','一种算法',1551620254919,NULL,0,2,0,'## 快速排序\n\n```js\nfunction quickSort(arr){\n    //如果数组<=1,则直接返回\n    if(arr.length<=1){return arr;}\n    var pivotIndex=Math.floor(arr.length/2);\n    //找基准，并把基准从原数组删除\n    var pivot=arr.splice(pivotIndex,1)[0];\n    //定义左右数组\n    var left=[];\n    var right=[];\n\n    //比基准小的放在left，比基准大的放在right\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<=pivot){\n            left.push(arr[i]);\n        }\n        else{\n            right.push(arr[i]);\n        }\n    }\n    //递归\n    return quickSort(left).concat([pivot],quickSort(right));\n}',0,0,0),(102,NULL,3,'apply 和 call ','改变 tihs 指向,改变指向后，可调用其对象的方法。',1551621015212,NULL,5,2,0,'> 什么东西可以调用 `call`?(`apply` 和 `bind`) --`函数式对象`\n\n# call()\n第一个参数是:对象\n第二个参数是:任意的类型--多个参数\n返回值:任意的类型\n对象调用 `call` 方法的时候使用的方式:\n1.函数名字.call();\n2.函数名字.call(null);\n上面的这两种方式里面的this都是window\n\n`call` 方法作用: 改变里面 `this` 的指向的\n\n`call` 方法如果不想改变里面this的指向,就传入 `null` ,就可以了\n\n`call` 方法可以借用其他对象的方法\n\n</br>\n\n# apply()\n\n参数1:对象\n参数2:数组\n`apply` 和 `call` 作用一样, 唯一不一样的就是第二个参数\n`call` 第二个参数传入的时候是一个一个传入的\n`apply` 是以数组的方式传入\n\nf1.apply(null,[10,20,30]);\n\n\n小例子:\n```js\n// apply\nvar obj1 = {\n  age:200,\n  eat:function(){\n    console.log(this);\n  }\n};\n\nvar obj2 = {\n  sex:&apos;男&apos;\n};\n\nobj1.eat.apply(obj2);\n\n// call\nvar stu = {\n  name:&apos;小明&apos;,\n  eat:function(){\n    console.log(this);\n  }\n};\n\nstu.eat();\nvar tea = {\n  age:20\n};\n\nstu.eat.call(tea);\n```\n\n</br>\n\n# call 和 forEach 综合 （前面的看不懂，看这个就行了）\n\n```js\nvar arr = [&apos;高铁&apos;,&apos;动车&apos;,&apos;鹿皮策&apos;,&apos;直达&apos;,&apos;特快&apos;];\n\n// 遍历数组\narr.forEach(function(ele,index){\n    console.log(ele);\n});\n\n// String 中没有 forEach 方法\n// 字符串不能用 forEach\nvar str = &apos;hello world&apos;;\n[].forEach.call(str,function(ele){\n    console.log(ele); \n});\n\n//输出\nh\ne\n l\no\n \nw\no\nr\nl\nd\n\n```',0,0,0),(103,NULL,3,'深拷贝与浅拷贝','简单理解深拷贝与浅拷贝',1551621859420,NULL,1,2,0,'## 对象强制值传递 (引用传递,对象拷贝)\n\n```js\nvar a = {&apos;name&apos;: &apos;wangying&apos;};\nvar b = Object.assign({}, a); // 对象\n// var b = Object.assign([], a); // 数组\nb.name = &apos;yingwang&apos;;\nconsole.log(a.name);\n\n/*\n如何区分深拷贝与浅拷贝，简单点来说: \n就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，\n如果B没变，那就是深拷贝，自食其力。\n*/\n```\n\n</br>\n\n## 继承\n\n```js\nvar b = Object.assign({}, a, c); // 可做继承,后面的会继承替换前面的\n\nObject.assign({}, {a: &apos;1&apos;, b: &apos;2&apos;},{c: &apos;3&apos;, a: &apos;5&apos;});\n// 结果： \n{a: \"5\", b: \"2\", c: \"3\"}\n```\n\n```js\nvar fn = function(cs) {\n    var canshu = {\n        name: &apos;abc&apos;,\n        age: 19\n    }\n    \n    for (const key in cs) {\n        canshu[key] = cs[key]\n    }\n    console.log(canshu)\n    // 结果： {name: \"xx\", age: 19, sex: \"男\"}\n}\n\nfn({name: &apos;xx&apos;, sex: &apos;男&apos;})\n```',0,0,0),(104,NULL,3,'跨域','解决跨域问题',1551622330248,NULL,6,2,0,'## jsonp 的原理:\n  1. 会动态的生成 script 标签, 并设定 src 的属性\n  2. src 属性, 设置成了接口地址\n  3. src 属性的接口地址, 必须带一个参数, 一般默认为 ?callback=随机的函数名\n  4. 要求接口返回的格式是: 随机的函数名({...})\n  5. 客户端, 要提供一个随机的函数\n  \n[详细可参考](https://www.cnblogs.com/chiangchou/p/jsonp.html)\n</br></br>\n\n## CORS 的原理:\n\n  1. 服务器 要设置一个响应头, 告诉浏览器能够跨域\n  2. XMLHTTPRequest2.0  FomData\n\n```js\n\n// 提供跨域(curs)\nvar allowCrossDomain = function(req, res, next) {\n    res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;http://localhost:8080&apos;)\n    res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;GET,PUT,POST,DELETE&apos;)\n    res.header(&apos;Access-Control-Allow-Headers&apos;, &apos;Content-Type&apos;)\n    // res.header(&apos;Access-Control-Allow-Headers&apos;, &apos;application/x-www-form-urlencoded&apos;)\n    res.header(&apos;Access-Control-Allow-Credentials&apos;,&apos;true&apos;)\n    next()\n};\n\n```\n\n',0,0,0),(105,NULL,2,'css 兼容问题','记录一下 css 的兼容问题',1551622816724,1590327336882,7,2,0,'问题1： 在 google，火狐中可以给 table 表格直接设置阴影，但在ie11中无效\n解决： 给表格添加一个div，给div设置阴影\n\n\n问题2： 在ie中直接给table设置rules=\"all\"添加border 边框颜色时，table的第一行边框颜色会变深一些\nborder-color: #ebebeb;\n解决：border-color: rgba(0, 0, 0, 0.2);\n\n---\n\n问题3： 页面打开了两个（其中一个是不必要的\n\n```html\n\n<a @click=\"promotionLink\" href=\"javascript:;\" target=\"_blank\" status=\"link\" class=\"cre-preview clearfix fl mr20 cursor\">\n    <i class=\"fl icon-preview2\"></i>\n    <span>预览</span>\n</a>\n\n```\n\n```js\n\npromotionLink() {\n    window.open(this.form.promotionLink)\n},\n\n```\n\n\n```\nFirefox57.0.4\n+ href: 因为`target=\"_blank\"`的存在，导致\n    + javascript:;\n        + 跳转一个空白页\n    + #\n        + 跳转当前`url#`\n\n+ 谷歌则没有\n\n\n解决：\n    + 把链接直接赋值给`href`\n    + 把`target=\"_blank\"`去掉\n```\n\n---\n\n### 图标兼容\n\n> 此方法可替换所有的icon,争对一些没有配置icon选项的ui,极为有用~\n\n实现方式就是找到生成icon的所有属性，一一复制，覆盖掉即可。\n\n```css\n.van-dropdown-menu__title::after {\n    top: -8px;\n    right: -86px;\n    color: #9699a6;\n    content: &apos;F00A&apos;;\n    display: inline-block;\n    font: normal normal normal 16px/1 vant-icon;\n    opacity: 1;\n    width: 16px;\n    height: 16px;\n    display: inline-block; /* 兼容手机端，没有的话图标出不来 */\n\n    margin-top: 0;\n    border: none;\n    transform: rotate(0);\n    transition: none;\n  }\n```',0,0,0),(106,NULL,31,'JavaScript 兼容问题','记录一下js的兼容问题',1551622941923,NULL,13,2,0,'前提：\n给父元素设置了移出事件，给子元素设置了点击事件。当点击子元素时，会偶尔触发父元素的移出事件\n谷歌会出现这样的问题，而火狐浏览器不会\n\n解决： 先去找到触发的元素，通常是子元素的字体图标 i 元素，设置父元素的移出事件后，在函数内部添加判断 `event.target === this 时 return false`\n\n```js\n$(&apos;.content_middle&apos;).mouseleave(function(event) { // 鼠标移出\n    var e = window.event || event // 利用传参兼容火狐\n    var target = e.target ? e.target : e.srcElement; // 兼容所有浏览器\n\n    if(target === i_ele  || target === i_ele2) {\n        return false // 兼容谷歌浏览器\n    } else {\n        top.css(&apos;display&apos;, &apos;none&apos;)\n        bottom.css(&apos;display&apos;, &apos;none&apos;)\n        timer = setInterval(function() { // 开启自动滚动的定时器\n            top.trigger(&apos;click&apos;)\n        }, 500)\n    }\n})\n```',60,90,0),(107,NULL,32,'JavaScript 优化','js 优化',1551623171825,NULL,111,2,0,'1. 将不必要的 `forEach` 换成 `for` 循环，有助于提高代码性能\n\n2. 获取程序执行时间,用于判断性能\n`console.time(&apos;global&apos;)`\n这里放需要执行的代码块\n`console.timeEnd(&apos;global&apos;)`\n\n3. 尽量使用DOM原生的api, 相对于jq的api，会好很多\n例如：`document.getElementsByClassName` 性能是 `$(classSelector)` 的 50 多倍\n\n4. 操作 `DOM` 时尽量使用 `id` 选择器，可以提高性能\n\n',20,60,90),(113,NULL,21,'权限控制','记录实现权限控制的思路',1582602321704,1582606143027,5,2,0,'首先，权限控制在于区分不同的用户及权限，保证用户只能操作自己所能操作的权限。通常情况，大家都会把自己不具备的权限进行隐藏。\n\n单纯的只是做隐藏，其实对于用户来说已经足够了，但是为了防止一些以特殊情况进入权限，所以需要进行多方面的验证。\n\n此站点的权限，基于这种考虑，做了三种权限的形式。\n\n---\n\n1. 对不具备权限功能的地方，进行了隐藏。\n2. 对不具备权限的路由进行了拦截，并进行提示。\n3. 对不具备权限的接口进行了控制，并进行提示。\n\n---\n\n> 其实简单的来说,就是进行前端页面的控制，以及对接口的验证。\n\n### 对接口的验证\n\n> 权限表\n\n```sql\n\ncreate table if not exists jurisdiction(\n	`id` int NOT NULL auto_increment primary key,\n	`j_name` varchar(25) NOT NULL UNIQUE KEY COMMENT &apos;权限名&apos;,\n 	`j_pid` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;父id&apos;,\n	`identification` text NOT NULL COMMENT &apos;标识: 用它来判断权限&apos;,\n	`is_open` TINYINT(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否开启权限:1(开启),0(关闭)&apos;,\n	`weight` TINYINT DEFAULT 0 COMMENT &apos;权重：默认为0，意思是默认只有管理员有权限&apos;,\n	`distribution` TINYINT(1) NOT NULL DEFAULT 0 COMMENT &apos;0(后端),1(前端页面)&apos;\n)ENGINE=INNODB DEFAULT CHARSET=utf8;\n\n```\n\n1. 先获取权限表中接口需要验证的权限列表\n2. 将接口`url`作为权限表的标识进行存储\n3. url与标识进行匹配，来验证此接口是否需要验证\n4. 如果接口需要验证，那么需要判断用户是否登录，若登录则需要判断此用户是否具备访问此接口的权限\n5. 用户登录验证我是用`token`验证，并且我将用户所具备的权限存在`token`中\n6. 用户登录验证通过后，我取`token`中的权限进行判断\n\n### 对路由的验证\n1. 我写了一个`获取用户不存在且需要验证的权限`的接口\n2. 然后在`vue-router`里面写了一个`全局前置守卫`，对路由进行验证\n3. 由于`全局前置守卫`里面获取不到`this`，所以我将获取到的值存在`localStorage`中\n4. 每一次对权限进行操作的时候都需要去更新`localStorage`中的值，否则只有重新登录刚修改的权限才会生效\n\n### 页面功能隐藏\n1. 有过前面的对路由的验证后，对于页面功能的隐藏就更简单了\n2. 取`localStorage`中的值，进行判断，做隐藏显示即可\n\n---\n\n### 权限的功能\n\n+ 判断某个接口是否需要权限验证\n	+ 需要验证\n		+ 判断用户是否登录\n			+ 已登录\n				+ 判断此用户是否具备此权限\n			+ 未登录\n				+ 提示用户登录\n	+ 不需要验证\n\n\n+ 判断用户是否登录(不用他)\n	+ 已登录\n		+ 判断用户是否具备此权限\n			+ 假设某一个接口不需要验证也会导致接口没有权限\n	+ 未登录\n		+ 提示用户登录	\n\n---\n\n+ 当操作权限的时候\n	+ api\n		+ 需要更新 token，因为api的权限是取token中的权限，进行验证的\n			+ 获取用户权限\n	+ view\n		+ 需要重新获取当前用户不具有并且需要验证的权限，取进行验证（阻止页面跳转并提示当前用户不具备此权限）\n			+ 拿到用户名，去查询此用户具备什么权限，再去权限表中找到当前用户不具有并且需要验证的权限\n			+ 已知当前用户的权限，直接去权限表中找到当前用户不具有并且需要验证的权限\n',0,0,0),(114,NULL,34,'git 常见命令','记录git常见命令，方面查询',1582725526349,NULL,1,2,0,'+ 初始化本地仓库并完成一次提交。\n	+ git init\n	+ git status  // 可以省略\n	+ git add .\n	+ git commit -m \"描述\"\n+ 在 GitHub 上创建一个在线仓库。(将本地项目推送到 GitHub。)\n	+ git remote add origin https://github.com/你的GitHub用户名/admin-vue.git\n	+ git push -u origin master\n\n+ git基本操作\n	+ git branch dev-login  	// dev-login  新分支的名称(最好写功能的名称)\n	+ git branch  			// 查看分支\n	+ git checkout dev-login  	// 切换分支\n	+ git branch -D dev-login 	// 删除分支\n	+ git checkout -b dev-login	// 创建并切换分支\n	+ git push origin dev-login 	// 交代码提交到分支中\n	+ 合并分支（把report合并到develop）\n		+ git chekout develop\n		+ git merge report\n		+ git push origin develop\n	+ git branch -r			// 查看远程分支\n	+ 删除远程分支\n		+ git branch -r -d origin/dev-login\n		+ git push origin :dev-login 	// dev-login分支名\n\n---\n\n+ git回滚到任意版本\n	+ git log\n		+ 提示：如果提交次数太多，一屏显示不了，最后一行会显示: 表示未显示全，按键盘上的Q键，可以显示下一页\n	+ git reset --hard e377f60e28c8b84158  // 回滚到指定的版本\n	+ git push -f origin master // 强制提交\n	+ git 回滚某一个文件到某一个版本\n		+ git checkout 21a43bc65e9517c457f64d94 src/routers/mc/report.js\n\n+ clone 克隆一个项目(下载)\n	+ git clone https://github.com/yanghanliang/douban-demo.git\n	+ 克隆指定分支\n		+ git clone -b 分支名 地址\n+ pull 拉取最新代码\n	+ git pull https://github.com/yanghanliang/douban-demo.git\n+ 更新分支源\n	+ git remote update\n\n+ 修改git commit之后的描述信息\n	+ git rebase -i HEAD~3  // 3代表倒数第3次提交的内容\n	+ pick改为edit // 第一行的\n	+ wq  // 保存退出\n	+ git commit --amend  // 修改commit信息\n	+ git rebase --continue\n	+ git push -f  // 强制推送到服务端\n\n+ 让 git 不管理某些文件\n	+ 删除之前错误上传的一些不需要管理的文件(文件夹需要添加 -r 参数)\n	+ 创建 .gitignore 文本\n		+ 直接将文件或文件夹名写入其中即可\n		+ 参考网站 https://www.cnblogs.com/rickqin/p/7068088.html\n\n+ 有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：\n	+ git add .\n	+ git commit --amend\n\n+ git 查看某一个文件的（提交／修改）记录\n    + git log --pretty=oneline 文件路径 || git log -p 文件路径\n    + git show 6b14b5883e5a03d5e2110eb78633f622e81a36ac\n+ git 查看文件还未提交的更改\n	+ git diff\n+ 查看git源\n	+ git remote -v\n\n\n+ 配制个人信息\n    git config --global user.name \"userName\"\n    git config --global user.email \"user@domain\"\n+ 强制提交\n	git push -u origin master -f   // 慎用\n+ 查看远程仓库\n	git remote -v\n+ git通过命令更换远程仓库地址\n	+ git remote set-url origin ssh://git@git.quclouds.com:8022/mn_web/mnmc_static_front.git\n\n---\n\n提示出错信息：fatal: remote origin already exists.\n\n解决办法如下：\n\n1、先输入$ git remote rm origin\n\n2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！\n\n\n',0,0,0),(115,NULL,35,'mysql','学习mysql时的笔记，以及使用中记录的问题和方法',1582725955568,NULL,1,2,0,'```sql\n\n#开启MySQL 服务器\n--services.msc  (ctr+r)\n--net start mysql  (cmd)\n\n#登录mysql服务器\n--mysql -h127.0.0.1 -P3306 -uroot -p;\n--mysql -uroot -p;\n--可以用 G 来结束程序\n\n-- s 来查看服务器和客户端的相关信息(我在哪?)\n\n-- 创建一个数据库\nCREATE DATABASE `quanzhan5`;\n-- 不能使用纯数字的名称\nCREATE DATABASE  05;\n-- 正确的采用纯数字的命名方法,需要用`` 包裹起来\ncreate database `05`;\n\ncreate database `jd`;\n\n-- 创建一个中文名 的数据库\n-- 需要给中文名用``包裹\ncreate database 名字;\n-- 创建一个中文名 的数据库\n-- 需要给中文名用``包裹\ncreate database `名字`;\n\n-- 客户端告知服务器我们cmd的编码格式\n-- 服务器会自动进行转码\nset names gbk;\n\n\n--显示所有的数据库\n-- 显示所有的数据库\n#我也是注释,我好用,用我吧\nshow databases;\n\n-- 查看数据库的创建语句(库选项)\nshow create database `quanzhan5`;\n\n-- 删除数据库\ndrop database `star`;-- &apos;\n\n-- 把jd的默认的编码格式utf8 改成gbk\nalter database `jd` charset=gbk;\n\n#创建一个数据表,我们创建一个person\n#学号,姓名\ncreate table `person` (\n	xuehao int,		-- int整形\n	name varchar(20) -- varchar 字符串\n);\n\n#显示的指定一下数据库名\ncreate table `quanzhan5`.`person` (\n	xuehao int,		-- int整形\n	name varchar(20) -- varchar 字符串\n);\n\n-- use 隐式指定数据库\n-- 当我们使用use 指定了数据库之后,如果不切换数据库,\n-- 默认会在当前的窗口中一直使用\nuse quanzhan5;\n\n-- 创建一个什么字段都没有的表\ncreate table person2();\n\n#创建一个商品表\ncreate table jd_goods(\n	goods_name varchar(255),\n	goods_jinhuo_price float,\n	goods_lingshou_price float,\n	goods_miaoshu text,\n);\n\n#错误的 最后一个字段不要加逗号\ncreate table jd_goods(\n	goods_name varchar(255),\n	goods_jinhuo_price float,\n	goods_lingshou_price float,\n	goods_miaoshu text,\n);\n#错误的 比较隐蔽,字段名和字段类型之间没有空格\ncreate table jd_goods(\n	goods_name 						varchar(255),\n	goods_jinhuo_price				float,\n	goods_lingshou_price 			float,\n	goods_miaoshu 					text\n);\n\n\n-- 查看数据表的创建语句\nshow create table jd_goods;\n\n-- 删除表\ndrop table jd_goods;\n-- 如果jd_goods表存在就删了,如果不存在就不保存\ndrop table if exists jd_goods;\n\n\ncreate database jd;\n\ncreate database if not exists jd;\n\ncreate table person (\n	name varchar(20)\n);\n\ncreate table if not exists person (\n	name varchar(20)\n);\n\n-- 改变数据表的名字\nrename table person to new_person;\n-- 可以修改多个表名\nrename table new_person to person,person1 to person2;\n\n--添加字段\n-- 给person增加一个age字段,age字段的类型为int\nalter table person\nadd age int;\n\nALTER TABLE article\nADD COLUMN rewazrd int(11) NOT NULL DEFAULT 0 COMMENT &apos;打赏数&apos;,\nADD COLUMN reprint int(11) NOT NULL DEFAULT 0 COMMENT &apos;转载数&apos;,\nADD COLUMN comment_number int(11) NOT NULL DEFAULT 0 COMMENT &apos;评论数&apos;;\n\n-- 删除字段名\nalter table person\ndrop age;\n\n-- 我们把xuehao名改为id\nalter table person\nchange xuehao id int;\n\n-- 我们把id名改为stu_id\nalter table person\nchange id stu_id;\n\n-- 修改类型\nalter table person\nmodify age int;\n\n-- 将表的utf8编码改为gbk\nalter table person \ncharset=gbk;\n\n-- 插入数据\ninsert into person(name,id) values \n	(\"鹏哥\",1);\n-- 严格的数据类型\ninsert into person(name,id) values \n	(2,\"鹏哥\");\n\n-- 如果我们省略字段列表(所有字段都插入数据)\n-- 值列表的顺序必须 和表的字段顺序一致\n-- id,name,age\ninsert into person values \n	(3,&apos;名字&apos;,18);\n\n-- 如果插入多条相同字段的数据,可以添加多个值列表\n-- 值列表之间用逗号分隔\ninsert into person values \n	(4,&apos;名字&apos;,28),\n	(5,&apos;名字&apos;,38),\n	(6,&apos;名字&apos;,48);\n\n\n-- 查询所有的数据\nselect * from person;\n\n-- 查询name和age字段\nselect name,age from person;\n\n-- 查询年龄小于30的\nselect name,age from person\nwhere age<30;\n\ndelete from person where age = 18;\n-- 删除数据,如果不加where所有的数据都会被删除\ndelete from person;\n\n\n-- 更新数据\nupdate person set age=20 \n	where id=6;\n\n-- 如果不加where所有的数据都会变化\nupdate person set age = 22;\n\n-- 查看校对规则\nshow collation;\n\n-- 我们创建2个数据库\n-- 一个是校验规则是 utf8_general_ci  不区分大小写\ncreate table t_ci (\n	name varchar(10)\n) collate=utf8_general_ci;\n-- 插入数据的时候,如果数据的类型为字符串,必须用引号包裹\ninsert into t_ci values (&apos;a&apos;),(&apos;B&apos;),(&apos;c&apos;);\n-- ci结尾的 不区分大小写\nselect * from t_ci where name=\"b\";\n-- 另外一个校验规则是 utf8_bin		按照二进制\ncreate table t_bin (\n	name varchar(10)\n)collate=utf8_bin;\n\ninsert into t_bin values (&apos;a&apos;),(&apos;B&apos;),(&apos;c&apos;);\n-- 以bin结尾的 是根据二进制进行查询\nselect * from t_bin where name=\"b\";\n\n\n-- 创建一个 myisam的数据表\ncreate table t_myisam (\n	name varchar(10)\n)engine=myisam;\n-- 创建一个innodb的数据表\ncreate table t_innodb(\n	name varchar(10)\n)engine=innodb;\n\n\n##########################第二天###########################\n\ncreate table int_1 (\n	a tinyint,  -- 范围 -128+127\n	b smallint -- 范围 -32768 +32767\n);\n\ninsert into int_1 values \n	(10,10);\n\ninsert into int_1 values \n	(255,255); -- 错误的数值\n\n-- 指定M 是没有任何明显效果的\n-- 因为默认就是右对齐,左边补空\nalter table int_1 \nadd c tinyint(2);\n\ninsert into int_1(a,b,c) values \n	(10,10,10);\n\n-- 123\n-- M 单独使用只是一个形式,如果你插入的数据超过M的宽度,\n-- 只要它的类型范围之内,就可以插入\ninsert into int_1 values\n	(111,111,111);\n\n-- type(M) 和zerofill配合使用才会发生化学反应\ncreate table int_2 (\n	a tinyint(3) zerofill,\n	b smallint(4) zerofill\n);\n\ninsert into int_2 values (1,1);\n\n-- 001 0001\n\n-- unsigned 是无符号类型,一定要紧随整形后边\nalter table int_2 \nadd c tinyint unsigned;\n\ninsert into int_2(c) values (255);\n\n-- 创建float\ncreate table float_1 (\n	a float,\n	b double\n);\n\ninsert into float_1 values \n	(1200000000,1200000000000000);\n\n-- 12345678901234567890\n-- 指数形式:1.234567890123456789*10的19次方\n-- 小数是以 无限接近于真实值的形式存在的.\n-- 它不能保存这么精确\ninsert into float_1 values\n	(12345678901234567890,12345678901234567890);\n\n-- 3.1415926\ninsert into float_1 values \n	(3.1415926,3.1415926);\n\n\n-- type(M,D)\ncreate table float_2 (\n	a float(5,3),\n	b double(10,2)\n);\n\n-- a 能够插入的最大值是多少?\n-- 11.111\ninsert into float_2 values\n	(99.999,99.999);\n\ninsert into float_2(a) values(100);\n\n-- 鹏哥 现有有身价\n-- 12345678901234567890\n\ncreate table float_3 (\n	a double\n);\n\ninsert into float_3 values (12345678901234567890);\n\n-- 重定义类型\nalter table float_3\nmodify a decimal;\n\ninsert into float_3 values (0.12345678901234567890);\n\n-- 总位数为20位,整数位为 20-16\nalter table float_3\nmodify a decimal(20,16);\n\ninsert into float_3 values (0.12345678901234567890);\n\n\n-- 日期类型中的 datetime 和timestamp\ncreate table time_1 (\n	a datetime,\n	b timestamp\n);\n\n-- 插入的形式是一样的 yyyy-mm-dd HH:ii:ss\n-- 以字符串的形式插入\ninsert into time_1 values \n	(&apos;2017-12-22 06:55:25&apos;,&apos;2017-12-22 10:40:10&apos;);\n\n-- datetime记录的范围从1000-01-01 00:00:00 ~ 9999-12-31 23:59:59\n-- timestamp 从1970-01-01 00:00:00~2038-01-19 \n-- 记录字段为 生日 我们可以选择datetime\n-- 订单下单的时间: 我们可以选择timestamp 或者 datetime\ninsert into time_1(a) values\n	(&apos;1945-11-29 12:12:12&apos;);\n\ninsert into time_1(b) values\n	(&apos;1945-11-29 12:12:12&apos;);\n\n-- 年月日 时分秒 数据正确,格式可以无所谓\ninsert into time_1 values \n	(&apos;2017,12,22,06,55,25&apos;,&apos;2017/12/22 10/40/10&apos;); --正确的\n\ninsert into time_1 values \n	(&apos;2017,13,22,06,55,25&apos;,&apos;2017/12/22 10/40/10&apos;); -- 错误的\n\n-- \ninsert into time_1 values (now(),&apos;2017/12/22&apos;);\n\n\nalter table time_1 \nadd c date;\n-- date 插入的数据分隔符也是没有任何要求的\ninsert into time_1(c) values\n	(&apos;2000,12,12&apos;);\n\n\n-- time 第一层含义表示当前的时间 \n-- 第二次含义就是距离一个时间有多少天多少个小时\nalter table time_1\nadd d time;\n\ninsert into time_1(d) values \n		(&apos;11:00:00&apos;);\n\n-- 距离时间结束还有1天 10个小时\n-- d HH:ii:ss\n-- HH:ii:ss\ninsert into time_1(d) values\n	 (&apos;1 10:00:00&apos;),\n	 (\"34:00:00\");\n\n\n-- varchar 和char 声明的时候都需要使用 type(M)\n-- M表示 字符的长度 , 并不是字节长度\ncreate table string_1 (\n	a char(10),\n	b varchar(10)\n);\n-- 字符串插入必须要用引号包裹\ninsert into string_1 values\n	(&apos;你若安好&apos;,&apos;便是晴天&apos;);\n\ninsert into string_1 values\n	(&apos;我很长,有多长,你试试&apos;,&apos;便是晴天&apos;);\n\ncreate table string_2 (\n	name varchar(20),\n	xihuan enum(\"林志玲\",\"如花\",\"名字\",\"鹏哥\")\n);\n\ninsert into string_2 values\n	(\"正哥\",\"名字\");\n\ninsert into string_2 values \n	(\"正哥\",\"刘欢\");\n-- 我们可以通过插入整数值,来选择enum中的数据\n-- 默认是从1开始\ninsert into string_2 values \n	(\"正哥\",1);\n\n-- 添加一个hobby 喜好字段\nalter table string_2\nadd hobby set(\"足球\",\"篮球\",\"兵乓球\",\"羽毛球\");\n\n-- 错误数据\ninsert into string_2(hobby) values \n	(\"乒乓球,羽毛球\");\n-- 正确数据\ninsert into string_2(hobby) values \n	(\"兵乓球,羽毛球\");\n\ninsert into string_2(hobby) values \n	(9);\n\ncreate table student (\nname varchar(20),\nsex enum(\"男\",\"女\",\"保密\"),\nage tinyint unsigned, \nheight float(5,2),\nweight float(5,2),\nmoney decimal(20,2),\naddress varchar(100),\nbirthday date,\nhobby set(\"足球\",\"篮球\",\"柳岩\",\"乒乓球\"),\ndescription text\n)\n\ninsert into student(sex) values\n	(\"女\");\n\ndesc student;\n\n-- 修改student表中的name为非空\nalter table student\nmodify name varchar(20) not null;\n\n\ninsert into student(name) values\n	(\"鹏哥\");\n\n\ndesc student;\n-- 给name设置一个默认值\nalter table student\nmodify name varchar(20) not null default \"学生\";\n\n-- name字段会自动填充为学生\ninsert into student(sex) values\n	(\"女\");\n\n-- 我们来创建一个学生表,给一些字段设置默认值\ncreate table student_1 (\n	name varchar(20) not null default &apos;学生&apos;,\n	sex enum(\"男\",\"女\",\"保密\") default \"保密\",\n	age tinyint unsigned default 18\n);\n\ninsert into student_1 values(\"成哥\",default,default);\n\n\n-- 给学生表添加一个主键\nalter table student_1\nadd id int unsigned primary key;\n\n\ninsert into student_1(id,name) values \n	(1,\"鹏哥\");\n-- id 重复 或者id没有设置都是错误的\ninsert into student_1(id,name) values \n	(0,\"杨哥\");\n\n-- id 为主键,主键不能为null\ninsert into student_1(id,name) values \n	(null,\"杨哥\");\n\n\n-- 设置主键的第二种方式\ncreate table student_2 (\n	id int unsigned ,\n	name varchar(20) not null default &apos;学生&apos;,\n	sex enum(\"男\",\"女\",\"保密\") default \"保密\",\n	age tinyint unsigned default 18,\n	primary key(id)\n);\n\n\ncreate table student_2 (\n	id int unsigned ,\n	name varchar(20) not null default &apos;学生&apos; primary key,\n	sex enum(\"男\",\"女\",\"保密\") default \"保密\",\n	age tinyint unsigned default 18,\n	primary key(id)\n);\n\n\n-- 组合主键\n-- 必须以这样的形式来创建组合主键\ncreate table user (\n	host varchar(20) ,\n	user varchar(20) ,\n	description text,\n	primary key(host,user)\n);\n\ninsert into user values \n	(&apos;192&apos;,&apos;root&apos;,&apos;一条记录&apos;),\n	(&apos;192&apos;,&apos;abc&apos;,&apos;一条记录&apos;);\n\ninsert into user values \n	(&apos;191&apos;,&apos;root&apos;,&apos;一条记录&apos;);\n\n-- 冲突了, host-user都一样就冲突了\ninsert into user values \n	(&apos;192&apos;,&apos;root&apos;,&apos;一条记录&apos;);\n\n-- 唯一键\ncreate table unique_1 (\n	name varchar(20) not null unique key,\n	age tinyint unsigned default 0\n);\n\n--创建主键索引\nalert table table_name add prinmary key 取个索引名(字段)\n\n--创建唯一索引\nalert table table_name add unque key 取个索引名(字段)\n\n--创建普通索引\nalert table table_name add key 取个索引名(字段)\n\n--创建联合索引:以普通索引\n\n\ninsert into unique_1 values\n	(\"帅哥\",default);\n\ninsert into unique_1 values\n	(\"帅哥\",18);\n\ninsert into unique_1 values\n	(\"美女\",18);\n\n-- 再创建一个表格, 商品的分类表格\ncreate table category(\n	id smallint unsigned ,\n	name varchar(20),\n	primary key(id),\n	unique key(name)\n);\n\ninsert into category values\n	(1,&apos;家用电器&apos;);\n-- 主键不能插入null\ninsert into category(id) values\n	(null);\n-- 唯一键可以插入null\ninsert into category(name) values\n	(null);\n\n-- 修改category 字段\n-- 给它添加一个主键\nalter table category\nadd c_id tinyint unsigned primary key;\n-- 添加一个唯一键\nalter table category\nadd email tinyint unsigned unique key;\n\n-- 主键不能重复\ninsert into category(id,name) values\n	(2,\"手机\"),\n	(3,\"电脑\");\n\n\n-- 创建一个商品表\ncreate table jd_goods (\n	id mediumint unsigned auto_increment,\n	name varchar(100) not null ,\n	price decimal(12,2),\n	color enum(\"yellow\",\"white\",\"yinse\") default \"yinse\",\n	primary key(id),\n	unique key(name)\n);\n\ninsert into jd_goods values\n	(default,\"iphonex\",12.34,default);\n\ninsert into jd_goods values\n	(null,\"iphone 8\",8.88,default);\n-- 修改自动增长的起始值,默认就是从1000开始\ncreate table jd_goods_auto (\n	id mediumint unsigned auto_increment,\n	name varchar(100) not null ,\n	price decimal(12,2),\n	color enum(\"yellow\",\"white\",\"yinse\") default \"yinse\",\n	primary key(id),\n	unique key(name)\n) auto_increment = 1000;\n\ninsert into jd_goods_auto values\n	(null,\"iphone 8\",8.88,default);\n\ninsert into jd_goods_auto values\n	(null,\"iphone 4\",8.88,default);\n-- comment 就是添加注释\nCREATE TABLE jd_goods_comment (\n	id 			mediumint unsigned 				auto_increment 		comment \"主键\",\n	name 		varchar(100) 					not null 			comment \"名字\",\n	price 		decimal(12,2)										comment \"价格\",					\n	color 		enum(\"yellow\",\"white\",\"yinse\") 	default \"yinse\" 	comment \"颜色\",\n	primary key(id),\n	unique key(name)\n) ENGINE=INNODB CHARSET=utf8 AUTO_INCREMENT = 1000;\n\n\n-- 创建索引\ncreate table index_1 (\n	a varchar(20),\n	b varchar(20),\n	c varchar(20),\n	primary key(a),\n	unique key(b),\n	key(c)\n);\n\n########################第三天##################\n\n-- 蠕虫复制\ncreate table ruchong_1 (\n	name varchar(20)\n);\n\ninsert into ruchong_1 values (&apos;abc&apos;);\n\n-- 蠕虫复制\n-- 自己复制自己\ninsert into ruchong_1 \n	select name from ruchong_1;\n\n\n-- 主键冲突\ncreate table person_3 (\n	id int unsigned auto_increment,\n	name varchar(20) not null default &apos;学生&apos;,\n	age tinyint unsigned default 16,\n	primary key(id),\n	unique key(name)\n)engine=myisam charset=utf8 auto_increment=1000;\n\ninsert into person_3 values (null,&apos;阿三&apos;,20);\n\nupdate person_3 set name=\"阿三\" where id =1;\n\n\n-- 插入一条数据\ninsert into person_3 values (null,&apos;阿四&apos;,30);\n\n-- update person_3 set name=\"阿三\" where id = 2;\n\ninsert into person_3(name,age) values(&apos;阿三&apos;,30)\n	on duplicate key update name=&apos;阿三&apos;,age=30;\n\n\ninsert into person_3(name,age) values (\"阿三\",40);\n\ninsert into person_3(name,age) values (\"阿三\",40)\n	on duplicate key update name=\"阿三\",age=40;\n\n\n--更新多条数据\nupdate goods set num=case id\n	when 1 then 3\n	when 2 then 4\n	end\n	where id in(1,2);\n \n\n-- 我们可以通过 replace 来解决主键冲突\ninsert into person_3(name,age) values (\"阿三\",40); -- 会报错\n\n-- 我们把 insert into person_3(name,age) values (\"阿三\",40); 中的insert\n-- 用 replace 代替\nreplace into person_3(name,age) values(&apos;阿三&apos;,50);\n\n\ncreate table person_4 (\n	id int unsigned auto_increment,\n	name varchar(20),\n	primary key(id)\n);\n\ninsert into person_4 values (null,&apos;abc&apos;);\n\n-- 蠕虫复制\ninsert into person_4(name)\n	select name from person_4;\n\n-- limit 一个参数 返回我们前5条记录\nselect * from person_4 limit 5;\n\n-- limit 两个参数 第一个参数是索引值,第二个参数是条数\nselect * from person_4 limit 3,2;\n\n-- 查询前5条,可以使用的语法\nselect * from person_4 limit 5;\nselect * from person_4 limit 0,5;\n-- 我想删除前5条\n-- 错误的语法, delete 后边跟limit的时候 limit只能有一个参数\ndelete from person_4 limit 0,5; \n-- 正取的语法,就是跟一个参数\ndelete from person_4 limit 5;\n\n-- 把表中的数据都清空\ntruncate person_4;\n\n\n-- 创建一个成绩表\ncreate table score (\n	english smallint unsigned, -- 英语\n	chinese smallint unsigned, -- 语文\n	math smallint unsigned -- 数学\n);\n\ninsert into score values\n	(100,100,100),\n	(68,83,88),\n	(23,5,8);\n-- 如果只是显示字段名字\n-- 加引号 和不加引号都可以\nselect english as 英语 ,chinese as 语文,math as 数学 from score;\nselect english as &apos;英语&apos; ,chinese as &apos;语文&apos;,math as &apos;数学&apos; from score;\n\n-- 数据表也可以用as其别名\n-- 给数据表其别名不要用 引号包裹\nselect * from score as s cross join score as c;\n\nselect * from (select * from score where chinese>80) as s;\n\n\n-- \ncreate table it_student(\n	id int unsigned auto_increment,\n	name varchar(20),\n	age tinyint unsigned default 18,\n	xueke varchar(20),\n	sex enum(\"男\",\"女\"),\n	primary key(id)\n);\n\ninsert into it_student values\n	(null,\"鹏哥\",22,\"全栈\",1),\n	(null,\"成哥哥\",23,\"Java\",1),\n	(null,\"霞妹妹\",18,\"全栈\",2),\n	(null,\"浩哥\",26,\"PHP\",1);\n\n\n\n-- 我们查询一下 鹏哥的id\nselect id from it_student where name=\"鹏哥\";\n-- 学科为全栈的人\nselect name from it_student where xueke=\"全栈\";\n-- 年龄 18 到 24\nselect * from it_student \nwhere age between 18 and 24;\n\n-- 年龄是18到24 并且性别是女的\nselect * from it_student\nwhere age >= 18 and age<=24 and sex=&apos;女&apos;;\n\n-- 学科为php或者全栈\nselect * from it_student\nwhere xueke=\"全栈\" or xueke=\"php\";\n-- 或者的另外一种表示方式\nselect * from it_student\nwhere xueke in(&apos;全栈&apos;,&apos;php&apos;);\n\n\nselect * from it_student\nwhere xueke not in(&apos;全栈&apos;,&apos;php&apos;);\n\n-- 查询一下,没有选择学科的人的姓名\nselect name from it_student\nwhere xueke = null; -- 错误\n\nselect name from it_student\nwhere xueke is null;\n\nselect name from it_student\nwhere xueke is  not null;\n\n-- 我就知道隔壁班的美女姓霞\n-- %可以通配多个字符\nselect name,age from it_student\nwhere name like &apos;霞%&apos; ;\n\n-- 就知道她的名字2个字\n-- 一个_表示通配一个字符\nselect name,age from it_student\nwhere name like &apos;霞__&apos; ;\n\n-- 如果我们只知道中间的字,我们把两边进行通配\nselect name,age from it_student\nwhere name like \"%妹%\";\n\n\nselect name,age from it_student\nwhere name like \"__妹%\";\n\nselect name,age from it_student\nwhere name like \"___妹%\";\n\n-- select 后边可以对字段的数值部分\n-- 进行一个运算\nselect chinese+english+math as 总分 from score;\n\n-- select 相当于把 硬盘的数据加载到了内存\n-- where后边不能直接跟内存计算的数据\nselect chinese+english+math as t from score\nwhere t>200;\n\n\nselect chinese+english+math as t from score\nwhere (chinese+english+math)>200;\n\n-- select chinese+english+math as t from score\n-- having t>200;\n\n\n-- 根据学科进行分组\nselect xueke from it_student\ngroup by xueke;\n\n-- count 是统计个数\nselect xueke,count(*) from it_student\ngroup by xueke;\n\n-- 分组中的select字段,一般只是放分组字段和聚合函数\nselect xueke,count(*),name,id from it_student\ngroup by xueke;\n\n\nselect xueke,count(*) from it_student\ngroup by xueke;\n\nselect xueke,count(xueke) from it_student\ngroup by xueke;\n\nselect xueke,sum(age) from it_student\ngroup by xueke;\n\nselect xueke,count(age) from it_student\ngroup by xueke;\n\nselect xueke,avg(age) from it_student\ngroup by xueke;\n-- 组中的最大值\nselect xueke,max(age) from it_student\ngroup by xueke;\n\n-- 组中的最小值\nselect xueke,min(age) from it_student\ngroup by xueke;\n\n-- 按照性别进行分类,统计每个性别的人数\nselect sex,count(sex) from it_student\ngroup by sex;\n\n-- 以上的统计,没有算 null的,所以我们需要\nselect sex,count(*) from it_student\ngroup by sex;\n\n\nselect  xueke,sex,count(*) from it_student\ngroup by xueke,sex;\n\n\n-- xueke 分组\nselect xueke,count(*) from it_student\ngroup by xueke;\n\n\nselect xueke,count(*) from it_student\ngroup by xueke\nhaving count(*)>1;\n\n-- where 子句不能在group by 后边\nselect xueke,count(*) from it_student\ngroup by xueke\nwhere count(*)>1;\n\n\nselect name,age from it_student\nwhere age>20;\n\nselect name,age from it_student\nhaving age>20;\n\n-- where 后边不能跟统计函数\nselect xueke,count(*) from it_student\nwhere count(*)>1\ngroup by xueke;\n\n\n-- 排序\n-- 根据age进行排序\n-- 默认是升序\nselect * from it_student\norder by age;\n\n-- 默认是升序\nselect * from it_student\norder by age asc;\n\n-- desc是降序\nselect * from it_student\norder by age desc;\n\n\n-- 先根据年龄降序排序,\n-- 如果年龄相同,则根据id进行一个升序\nselect * from it_student\norder by age desc,id asc;\n\n-- 先根据年龄降序排序,\n-- 如果年龄相同,则根据id进行一降序\nselect * from it_student\norder by age desc,id desc;\n\n\nselect * from it_student;\n\n-- 就要2条数据\nselect * from it_student \nlimit 2;\n\n-- 我们需要年龄最大的2个数据\nselect * from it_student\norder by age desc \nlimit 2;\n\n-- 女生中年龄比较小的三个人\nselect * from it_student\nwhere sex=\"女\"\norder by age asc\nlimit 3;\n\n-- 每页返回我2条数据\n-- 第一次索引从0开始\nselect * from it_student\nlimit 0,2;\n\n\nselect * from it_student\nlimit 2,2;\n\n\n# 创建表\n# 雇员表\ncreate table emoloyee (\n	empid int unsigned auto_increment,\n	name varchar(10),\n	sex enum(&apos;male&apos;,&apos;female&apos;),\n	title varchar(20),\n	birthday date,\n	depid int unsigned,\n	primary key(empid)\n);\n# 部门表\ncreate table department(\n	depid int unsigned auto_increment,\n	depname varchar(20),\n	primary key(depid)\n);\n# 工资表\ncreate table salary(\n	empid int unsigned,\n	basesalary decimal(10,2),\n	titlesalary decimal(10,2),\n	deduction decimal(10,2),\n	primary key(empid)\n);\n\n#修改表结构,在部门表中添加简介字段\nalter table department\nadd depdesc text;\n\n#插入数据\ninsert into emoloyee values (1001,&apos;张三&apos;,&apos;male&apos;,&apos;高级工程师&apos;,&apos;1975-01-01&apos;,&apos;111&apos;),\n	(1002,&apos;李四&apos;,&apos;female&apos;,&apos;助理工程师&apos;,&apos;1985-01-01&apos;,&apos;111&apos;),\n	(1003,&apos;王五&apos;,&apos;male&apos;,&apos;工程师&apos;,&apos;1978-01-01&apos;,&apos;222&apos;),\n	(1004,&apos;赵六&apos;,&apos;male&apos;,&apos;工程师&apos;,&apos;1979-01-01&apos;,&apos;222&apos;);\n\ninsert into department values (111,&apos;生产部&apos;,null),\n	(222,&apos;销售部&apos;,null),\n	(333,&apos;人事部&apos;,null);\n\ninsert into salary values (1001,2200,1100,200),\n	(1002,1200,200,100),\n	(1003,1900,700,200),\n	(1004,1950,700,150);\n\n#修改李四的职称为工程师,将他的基本工资改为 1700,职务工资为600\nupdate salary set basesalary = 1700,titlesalary = 600\n	where empid = 1002;\n\n\n-- 7.	查询出每个雇员的雇员编号，实发工资，应发工资。\n# 要什么字段 --> 雇员编号,实发工资,应发工资\n# 根据要的字段确认表 --> salary\n# 我们查询, \n#实际上应该发多少 =  基本工资+职务工资\n#应发工资 --> 基本工资+职务工资-扣除\n# 我们可以对表的字段进行运算\nselect empid,basesalary+titlesalary as 应发工资, basesalary+titlesalary\n-deduction as 实发工资 from salary;\n\n#8.	查询出基本工资大于2000的雇员编号\n#我们要什么 --> 雇员编号\n#根据要什么明确哪个表 --> salary\n#条件 --> 基本工资大于2000\nselect empid from salary\nwhere basesalary>2000;\n\n\n#9.	查询出职称为工程师的人数\n#要  工程师 人数 --> count --> 分组\n#确认表是  emoloyee\n# \nselect title,count(title) from emoloyee\ngroup by title\nhaving title=\"工程师\";\n\n-- 这种方式也是可以的\nselect title,count(title) from emoloyee\nwhere title = \"工程师\";\n\n#10.	查询出部门人数为2人以上的部门编号\n# 部门编号\n# 雇员表\n# 部门人数为2人以上 --> count --> 分组 group by \nselect depid,count(depid) from emoloyee\ngroup by depid\nhaving count(depid)>=2;\n\n-- count 是对内存中的数据进行操作\n-- having也是对内存中的数据进行操作\nselect depid,count(depid) as c from emoloyee\ngroup by depid\nhaving c>=2;\n\n-- select where 子句是从硬盘中将数据一条一条的比对\n-- count是对所有的数据进行的统计\nselect count(depid) from emoloyee\nwhere count(depid)>2;\n\n\n\n#11.	查询姓“张”且性别为男的员工的记录。\n#要的字段\n#明确表\n#姓“张”且性别为男\nselect * from emoloyee\nwhere name like \"张%\" and sex=\"male\";\n\n-- 12.	统计各个性别的人数\n# 人数 --> count --> 分组 --> 性别\n select sex,count(sex) from emoloyee\n group by sex;\n -- count(字段) 和 count(*) 的区别\n\n-- 13.	查询出基本工资最低的2个人\n-- 人 \nselect empid from salary\norder by basesalary asc \nlimit 2;\n-- limit 一般和order by 配合使用\n\n\n-- 14.	查询出扣除工资最多的2个人\nselect empid from salary\norder by deduction desc \nlimit 2;\n\n-- 15.	汇总所有人的基本工资,职务工资和扣除工资.\n-- 要工资\n-- salary\n-- 条件-->汇总所有人 --> sum\nselect sum(basesalary),sum(titlesalary),sum(deduction) from salary;\n\n-- 16.	查询出所有人的平均基本工资\n-- 基本工资\n-- salary\n-- 所有人的平均\nselect avg(basesalary) from salary;\n\n\n\n####第4天###############################################\n-- 主键(唯一键)冲突\n\ninsert into person_3 values (2,&apos;阿屋&apos;,60);\ninsert into person_3 values (2,&apos;阿屋&apos;,60)\n	on duplicate key update id=2,name=&apos;阿屋&apos;,age=60;\n\nreplace into person_3 values (2,&apos;阿屋&apos;,60);\n\n\n-- 创建一个表,说明默认的null 和字符串的NULL的区别\ncreate table person_4 (\n	id int unsigned auto_increment,\n	name varchar(20),\n	primary key(id)\n);\n\ninsert into person_4(id) values (1);\n\ninsert into person_4(name) values (&apos;NULL&apos;);\n\n-- 把it_student的2个查询,分别理解为一个是北京的表\n-- 另外一个是上海的表\nselect * from it_student\nunion distinct\nselect * from it_student;\n\n-- union的默认选项是去重,我们改为all就显示所有的数据了\nselect * from it_student\nunion all\nselect * from it_student;\n\n-- 字段数量不一致\nselect name,age from it_student\nunion all\nselect * from it_student;\n\n-- 字段列表数量一致\nselect name from it_student\nunion all\nselect age from it_student;\n\n-- 我想查询一下, 学生表中年龄最大的一个人和年龄最小的一个人的信息\nselect name from it_student\norder by age desc limit 1;\n\nselect * from it_student\norder by age asc limit 1;\n\n\n-- 正确的子句中出现order by需要用()把子句包裹起来\n(select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1)\n;\n-- 没有给子句进行()包裹,如果union出现order by\n-- 必须在union的最后\nselect name,age from it_student\norder by age desc limit 1\nunion \nselect name,age from it_student\norder by age asc limit 1\n;\n\n-- union 联合出来的数据也是可以进行筛选的,只不过需要作为数据源\n-- 当然排序的话就可以不用作为数据源\n\n\n\nselect * from ((select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1)) as s \nwhere age is not null;\n\n\n\n-- select * from it_student\n-- where age=(select max(age) from it_student) \n-- or age=(select min(age) from it_student);\n\n-- 2个表格\ncreate table t_left(\n	a varchar(10),\n	b varchar(20)\n);\n\ncreate table t_right(\n	x varchar(10),\n	y varchar(20),\n	z varchar(20)\n);\n\ninsert into t_left values\n	(\"o no\",&apos;o year&apos;),\n	(&apos;o my god&apos;,&apos;ooo &apos;),\n	(&apos;kiss&apos;,&apos;baby &apos;);\n\n\ninsert into t_right values \n	(&apos;圣诞节&apos;,&apos;元旦节&apos;,&apos;春节&apos;),\n	(&apos;光棍节&apos;,&apos;情人节&apos;,&apos;劳动节&apos;),\n	(&apos;清明节&apos;,&apos;端午节&apos;,&apos;重阳节&apos;),\n	(&apos;儿童节&apos;,&apos;中秋节&apos;,&apos;国庆节&apos;);\n\n-- 2个表交叉连接\nselect * from \nt_left cross join t_right;\n\n-- 现在有2个表,一个是学生表\n-- 另外一个班级表\ncreate table stu_student (\n	id int unsigned auto_increment,\n	name varchar(20),\n	score int,\n	sex enum(&apos;男&apos;,&apos;女&apos;),\n	class_id int,\n	primary key(id)\n);\n\ncreate table stu_class (\n	class_id int unsigned auto_increment,\n	name varchar(20),\n	room_num varchar(20),\n	primary key(class_id)\n);\n\ninsert into stu_student values\n	(null,&apos;孙悟空&apos;,99,1,1),\n	(null,&apos;唐僧&apos;,100,1,1),\n	(null,&apos;女儿国国王&apos;,96,2,2);\n\ninsert into stu_class values\n	(null,\"全栈\",&apos;306&apos;),\n	(null,\"UI\",&apos;206&apos;);\n\n\n\n-- 交叉连接\nselect * from \nstu_student cross join stu_class;\n\n-- select * from \n-- stu_student cross join stu_class\n-- where stu_student.class_id = stu_class.class_id;\n\n\n-- 内连接\ninsert into stu_student values\n	(null,&apos;妖精&apos;,45,2,null);\n\n-- 我的需求是 查询已经开班的学生的信息\nselect * from \nstu_student inner join stu_class\nwhere stu_student.class_id = stu_class.class_id;\n\nselect * from \nstu_student inner join stu_class\non stu_student.class_id = stu_class.class_id;\n\n\n-- 我们的内连接不添加条件,这个时候的结果就是交叉连接\nselect * from \nstu_student inner join stu_class;\n\n\n-- 把已经报名的所有学生的信息返回给我\n-- 已经开班的和没开班的\nselect * from \nstu_student left outer join stu_class\non stu_student.class_id = stu_class.class_id;\n\n-- 左和右就是一个相对的概念\nselect * from \nstu_class right outer join stu_student\non stu_class.class_id = stu_student.class_id;\n\n-- 外链接只能用on\nselect * from \nstu_class right outer join stu_student\nwhere stu_class.class_id = stu_student.class_id;\n\n\n-- 要所有学生的\n\n-- 我们要指定字段的数据\n-- 指定字段的数据是2个表中\n-- 所以我们对2个表进行了连接\n-- 又因为是要所有学生的,以学生表为主\nselect stu_student.name,stu_class.name,room_num from\nstu_student left outer join stu_class\non stu_student.class_id = stu_class.class_id;\n\n-- 要所有学生的\n-- 我们要指定字段的数据\n-- 指定字段的数据是2个表中\n-- 所以我们对2个表进行了连接\n-- 又因为是要所有学生的,以学生表为主\nselect s.name,c.name,room_num from\nstu_student as s left outer join stu_class as c\non s.class_id = c.class_id;\n\n\n\nselect * from \nstu_student as a cross join stu_student as b\ncross join stu_student as c\n\n\n\ninsert into stu_student values\n	(null,&apos;猪八戒&apos;,100,1,1);\n\nselect * from stu_student\norder by score desc\nlimit 1;\n-- 查询出分数最高的人员的信息(名字和分数)\n-- 先明确要什么 分数和名字\n-- 确定表 --> stu_studnet\n-- 分数最高的分你得先查询出来\n-- 让分数 = 最高分的 才是正确的结果\nselect name,score from stu_student\nwhere score = 最高分;\n\n-- 写一个假数据去测试逻辑对不对\nselect name,score from stu_student\nwhere score = 100;\n-- 查询出最高分\nselect max(score) from stu_student;\n\nselect score from stu_student\norder by score desc\nlimit 1;\n\n\n-- 把子查询的结果 套到主(父)查询\nselect name,score from stu_student\nwhere score = (select max(score) from stu_student);\n\n\nselect name,score from stu_student\nwhere score = (select score from stu_student\norder by score desc\nlimit 1);\n\n\n-- 跟孙悟空一个班级的同学都有谁\n-- 要名字 name\n-- stu_student\n-- 跟孙悟空同一个班级\n\n-- 跟孙悟空同一个班级 -- > 孙悟空在哪个班\nselect name from stu_student\nwhere class_id = 1;\n\n-- 再去写子查询\nselect class_id from stu_student\nwhere name = \"孙悟空\";\n\nselect name from stu_student\nwhere class_id = (select class_id from stu_student\nwhere name = \"孙悟空\");\n\n-- 查询出已经开班的学生的姓名和班级id\nselect name,class_id from stu_student\nwhere class_id is not null;\n\n\n-- 用子查询\nselect name,class_id from stu_student\nwhere class_id in (1,2);\n\n\n-- 1,2是通过查询出来的\nselect class_id from stu_class;\n\nselect name,class_id from stu_student\nwhere class_id in (select class_id from stu_class);\n\ninsert into stu_student values\n	(null,&apos;沙僧&apos;,60,1,1);\ninsert into stu_student values\n	(null,&apos;白骨精&apos;,61,2,2);\n\n-- 1班和2班\n-- 从1班中找出 比2班 所有人分数都高的 人员名字\n\n--需要: 名字\nselect name from stu_student\nwhere  class_id = 1 \nand score > 2班的最高分\n\n-- 2班的最高分\nselect max(score) from stu_student\nwhere class_id=2;\n\nselect name,score from stu_student\nwhere  class_id = 1 \nand score > (select max(score) from stu_student\nwhere class_id=2);\n\n-- 第二种方式\nselect score from stu_student\nwhere class_id=2;\n\nselect name from stu_student\nwhere  class_id = 1 \nand score > all (\n	select score from stu_student\nwhere class_id=2\n);\n\n\nselect name from stu_student\nwhere  class_id = 1 \nand score > any (\n	select score from stu_student\nwhere class_id=2\n);\n\n\n-- 我们查询一下年龄最小,分数最高的人员信息\nselect name from stu_student\nwhere (age,score)=(select min(age),max(score) from stu_student);\n\nselect min(age),max(score) from stu_student;\n\n\n-- 替代语句\nselect name from stu_student\nwhere age=(select min(age) from stu_student) \nand score=(select max(score) from stu_student);\n\n-- 我想查询一下男生中,分数最高的前3个人的名字\nselect name,score from stu_student\nwhere sex = &apos;男&apos;\norder by score desc \nlimit 3;\n\n\n-- select name,score from 表名|数据源\n\nselect name,score from (select * from stu_student \nwhere sex=\"男\") as a \norder by score desc \nlimit 3;\n\n-- 多行多列作为数据源要其别名 不起别名是错误的\nselect name,score from (select * from stu_student \nwhere sex=\"男\")  \norder by score desc \nlimit 3;\n\nselect * from stu_student \nwhere sex=\"男\";\n\n\n\n\n(select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1)\n;\n\n-- 返回给我们一条 age为null的数据\n-- 这个时候我们可以对结果再次进行筛选\n(select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1)\nwhere age is not null;\n\n(select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1)\nhaving age is not null;\n\n((select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1))\nhaving age is not null;\n\n\nselect * from ((select name,age from it_student\norder by age desc limit 1)\nunion \n(select name,age from it_student\norder by age asc limit 1)) as a \nwhere age is not null;\n\n\n-- exists\n-- 子查询有返回结果,则为真\nselect * from stu_student\nwhere exists (select * from stu_student);\n\nselect * from stu_student \nwhere exists (select * from stu_student where name like \"神仙姐姐\");\n\n-- 查询出已经开班的学生的信息\nselect * from stu_student\nwhere exists (select * from stu_class \n	where stu_class.class_id=stu_student.class_id\n	);\n-- select *|字段 from 表名|数据源\n-- where\n-- group by \n-- having \n-- order by \n-- limit;\n\ninsert into emoloyee(name) values (\"义哥\");\n-- 6.	查询出每个雇员的雇员编号，姓名，基本工资，应发工资。\n-- 我们要什么??? 雇员编号,姓名,基本工资,应发工资\n-- 根据字段确定是2个表 salary 和emoloyee表\n-- \nselect s.empid,name,basesalary,basesalary+titlesalary from \nsalary as s inner join emoloyee as e\non s.empid = e.empid;\n\nselect s.empid,name,basesalary,basesalary+titlesalary from \nsalary as s right outer join emoloyee as e \non s.empid = e.empid;\n\n\n-- 7.	查询雇员的雇员编号，姓名，职称，部门名称，基本工资。\n-- 我们要的字段 设置到3个表\n-- salary,emoloyee,deparemnt\nselect e.empid,name,title,depname,basesalary from \nemoloyee as e inner join department as d\non e.depid = d.depid\ninner join salary as s \non s.empid = e.empid;\n\nselect e.empid,name,title,depname,basesalary from \nemoloyee as e left outer join department as d \non e.depid = d.depid \nleft outer join salary as s \non s.empid = e.empid;\n\n\nselect e.empid,name,title,depname,basesalary from\nemoloyee as e inner  join department as d \ninner  join salary as s \non e.depid = d.depid  and s.empid = e.empid;\n\n-- 8.	查询出和张三同一个部门的雇员姓名\n-- 我们要 雇员姓名\n-- emoloyee\n-- 和张三同一个部门\n	-- 张三的部门 select depid from emoloyee where name = \"张三\"\n	-- emolyee 的id = 查询的id\nselect name from emoloyee\nwhere depid = 111;\n\n-- 查询张三的部门id\nselect depid from emoloyee\nwhere name = \"张三\";\n\nselect name from emoloyee\nwhere depid = (select depid from emoloyee\nwhere name = \"张三\");\n\n-- 9.	查询出职称为工程师的基本工资\n-- 基本工资 basesalary   -->需要知道员工的id\n-- 表 --> salary\n-- 职称为工程师的id\n select empid from emoloyee\n where title = \"工程师\";\n\n-- 错误的写法\nselect basesalary from salary\nwhere empid = (\nselect empid from emoloyee\n where title = \"工程师\"\n);\n\nselect basesalary from salary\nwhere empid in (\nselect empid from emoloyee\n where title = \"工程师\"\n);\n\nselect basesalary from \nsalary as s left outer join emoloyee as e \non s.empid = e.empid\nwhere title = \"工程师\";\n\n\n-- 10.	查询出生产部门的雇员姓名,职称,部门名称和基本工资\n-- 必须把三个表连接起来\n\n-- 11.	查询出比销售部所有人薪资都高的生产部人员姓名\n-- 人员姓名\n-- emoloyee\n-- 条件   生产部的人\n-- 条件 比销售部所有人薪资都高\n-- 逻辑是正确的再通过子查询套进去\nselect name from \nemoloyee as e left outer join salary as s\non e.empid = s.empid \nwhere depid = 111 \nand basesalary > 1950;\n\n\nselect depid from department \nwhere depname = \"生产部\";\n\nselect name from \nemoloyee as e left outer join salary as s\non e.empid = s.empid \nwhere depid = (select depid from department \nwhere depname = \"生产部\") \nand basesalary > 1950;\n\n\n\n-- max\n-- all\n\nselect basesalary from \nsalary as s left outer join emoloyee as e\non s.empid = e.empid\nleft join department as d \non e.depid = d.depid\nwhere depname = \"销售部\";\n\nselect name from \nemoloyee as e left outer join salary as s\non e.empid = s.empid \nwhere depid = (select depid from department \nwhere depname = \"生产部\") \nand basesalary > all (\n	select basesalary from \n	salary as s left outer join emoloyee as e\n	on s.empid = e.empid\n	left join department as d \n	on e.depid = d.depid\n	where depname = \"销售部\"\n);\n\n\n-- 12.	查询出比销售部任意一人薪资高的生产部人员姓名\n\n-- 13.	查询出基本工资最高并且扣款最多的雇员编号\n-- 行子查询\n-- empid\n-- salary\n-- 出基本工资最高并且扣款最多\n-- 求 基本工资最高的 和 扣款最多的\n-- select empid from salary\n-- where basesalary = (基本工资最高)\n-- and deduction = (扣款最高)\n\nselect max(basesalary),min(deduction) from salary;\n\nselect empid from\nsalary \nwhere (basesalary,deduction) = \n(select max(basesalary),min(deduction) from salary);\n\n\n-- 14.	查询出生产部门基本工资最高的人的姓名,基本工资\n-- 要什么 : 姓名,基本工资\n-- 表 --> emoloyee 和 salary\n-- 生产部门基本工资最高的人\n	-- 生产部门\n	-- 基本工资最高的人\nselect name,basesalary from \nemoloyee as e left outer join salary as s \non e.empid = s.empid\nwhere depid = 111\nand basesalary = 2200;\n\n-- 111 --> 生产部门\nselect depid from department\nwhere depname = \"生产部\";\n\n\nselect name,basesalary from \nemoloyee as e left outer join salary as s \non e.empid = s.empid\nwhere depid = (select depid from department\nwhere depname = \"生产部\")\nand basesalary = 2200;\n\n-- 2200 --> salary \nselect max(basesalary) from\nsalary as s left join emoloyee as e\non s.empid = e.empid\nleft join department as d \non e.depid = d.depid\nwhere depname = \"生产部\";\n\n\nselect name,basesalary from \nemoloyee as e left outer join salary as s \non e.empid = s.empid\nwhere depid = (select depid from department\nwhere depname = \"生产部\")\nand basesalary = (select max(basesalary) from\nsalary as s left join emoloyee as e\non s.empid = e.empid\nleft join department as d \non e.depid = d.depid\nwhere depname = \"生产部\");\n\n-- 15.	查询出生产部门和销售部门基本工资最高的人的部门,姓名和基本工资\n\n\n-- 首先明确要查询的字段\n-- 根据查询的字段 确定要查询的表\n-- 分析条件\n	-- 先假设\n	-- 套用一个假数据来判断我们的逻辑是否正确\n	-- 再去完成子查询\n	-- 最后每把一个子查询套回到父查询的时候都要测试一把\n-- select * from 表 \n-- where \n\n\nselect * into outfile \"C:/Users/Ricky/Desktop/a.txt\" \nfrom it_student;\n\n-- 路径的斜杠要正确 /\nselect * into outfile \"C:UsersRickyDesktopa.txt\" \nfrom it_student;\n\n\nload data infile \"C:/Users/Ricky/Desktop/a.txt\"\ninto table it_student;\n\n\nsource C:/Users/Ricky/Desktop/a.sql\n\n-- 创建一个localhost用户\ncreate user \"abc\"@\"localhost\" identified by \"123456\";\n\n-- 创建一个允许本网段的人登录的账号\ncreate user \"abc\"@\"192.168.149.%\" identified by \"123456\";\n\ngrant all on *.* to \"abc\"@\"192.168.149.%\";\n\ndrop user \"abc\"@\"192.168.149.%\";\n\n\n-- 删除\n-- delete from 表名 limit 一个参数\n-- delete from 表名 where 子句\ndelete from it_student\n	where id in (5,6);\n\ndelete from it_student\n	order by id desc \n	limit 2;\n\n-- having 和 where\n-- having 和where 都是筛选\n\nselect name,age from it_student\nwhere age>18;\n\n\nselect name,age from it_student\nhaving age>18;\n\n-- where 是对 从硬盘中的数据筛选到内存\n-- having 是对内存中的数据再次筛选\nselect name,age from it_student\nhaving xueke=&apos;java&apos;;\n\nselect *|字段 from 表|数据源\nwhere\ngroup by \nhaving \n\n#######################第5天##########################\n\ncreate table jd_user (\n	user_id int unsigned auto_increment,\n	user_name varchar(20),\n	primary key(user_id)\n);\n\n-- 添加外键进行数据约束\ncreate table jd_order (\n	order_id int unsigned auto_increment,\n	user_id int unsigned,\n	order_time datetime,\n	primary key(order_id),\n	foreign key(user_id) references jd_user(user_id)\n) engine=innodb charset=utf8 auto_increment = 10000;\n\ninsert into jd_user values (null,\"雷哥\");\n\ncreate table jd_order (\n	order_id int unsigned auto_increment,\n	user_id int unsigned,\n	order_time datetime,\n	primary key(order_id)\n) engine=innodb charset=utf8 auto_increment = 10000;\n\n-- 添加外键进行数据约束\ncreate table jd_order (\n	order_id int unsigned auto_increment,\n	user_id int unsigned,\n	order_time datetime,\n	primary key(order_id),\n	foreign key(user_id) references jd_user(user_id)\n) engine=innodb charset=utf8 auto_increment = 10000;\n\n-- 如果表已经创建好了我们可以通过 alter 修改表来添加外键\nalter table jd_order\nadd foreign key(user_id) references jd_user(user_id);\n\n\ninsert into jd_order values (null,1,now());\n\n-- 插入一条不符合要求的数据\n-- 我们没有id为100的这个人\ninsert into jd_order values (null,100,now());\n\n-- 删除外键,删除外键的时候必须\n-- 通过show create table 来查看外键名\nalter table  jd_order\ndrop foreign key jd_order_ibfk_1;\n\n\n-- 创建外键的注意事项\n-- 先创建父表\ncreate table jd_user (\n	user_id int unsigned auto_increment,\n	user_name varchar(20),\n	primary key(user_id)\n);\n\ninsert into jd_user values(null,\"老大\");\n\n-- 再去创建子表\ncreate table jd_order (\n	order_id int unsigned auto_increment,\n	user_id int unsigned,\n	order_time datetime,\n	primary key(order_id),\n	foreign key(user_id) references jd_user(user_id)\n) engine=innodb charset=utf8 auto_increment = 10000;\n\ninsert into jd_order values \n	(null,1,now()),\n	(null,1,now()),\n	(null,1,now());\n\ndelete from jd_user where user_id = 1;\n\n-- 我们以 父表删除,子表为null\n-- 先删除外键\n-- show create table jd_order\n-- 再删除\nalter table jd_order\ndrop foreign key jd_order_ibfk_1;\n-- 再添加外键\nalter table jd_order\nadd foreign key(user_id) references jd_user(user_id) \non delete set null;\n\n\n-- 创建一个myisam存储引擎表\ncreate table jd_myisam_order (\n	order_id int unsigned auto_increment,\n	user_id int unsigned,\n	order_time datetime,\n	primary key(order_id),\n	foreign key(user_id) references jd_user(user_id)\n) engine=myisam charset=utf8 auto_increment = 10000;\n\n\n\n-- 图书管理系统\n-- 用户表\n	-- id\n	-- 名字\n	-- 班级\n\n-- 图书表\n	-- id\n	-- 书名\n	-- 价格\n\n-- 借阅表\n-- 谁借阅 user_id \n-- 借阅了那本书 book_id\n-- foreign key(user_id) references user(id),\n-- foreign key(book_id) references book(id)\n\n-- 创建一个只显示学生名字和学科的视图\n-- 视图名最好有一个前缀和我们的真实表进行区分\n-- jd_user\n-- v_jd_user\n-- vw_jd_user\n\nCREATE VIEW v_name_xueke as\n	select name,xueke from it_student;\n\n\nselect * from v_name_xueke\nwhere xueke=\"全栈\";\n\n-- 查看所有视图\nshow tables;\n-- 查看视图表结构\ndesc v_name_xueke;\n\n-- 查看视图的创建语句\nshow create view v_name_xueke;\n\n-- 修改视图\nalter view v_name_xueke as \nselect name from it_student;\n\n-- 删除视图\ndrop view v_name_xueke;\n\n\ncreate view v_shengchanbu_max_salary as \nselect name,basesalary from \nemoloyee as e left outer join salary as s \non e.empid = s.empid\nwhere depid = (select depid from department\nwhere depname = \"生产部\")\nand basesalary = (select max(basesalary) from\nsalary as s left join emoloyee as e\non s.empid = e.empid\nleft join department as d \non e.depid = d.depid\nwhere depname = \"生产部\");\n\n\n-- create view v_max as \n-- 	(select max(basesalary) from\n-- salary as s left join emoloyee as e\n-- on s.empid = e.empid\n-- left join department as d \n-- on e.depid = d.depid\n-- where depname = \"生产部\");\n\n\ncreate table goods (\n	id int unsigned auto_increment,\n	name varchar(20),\n	orginal_price decimal(10,2),\n	primary key(id)\n);\n\ninsert into goods values (null,&apos;玉石&apos;,1000);\n\ncreate view v_jinjia as\n	select name,orginal_price+10000 from goods;\n\nalter view v_jinjia as\n	select name,orginal_price+10000 as jinjia from goods;\n\n-- \n(select * from it_student)\nunion all\n(select * from it_student)\n\n\ncreate view v_all_xiaoqu_student as \n	(select * from it_student)\n	union all\n	(select * from it_student);\n\n\nselect name,basesalary from \nemoloyee as e left outer join salary as s\non e.empid = s.empid;\n\ncreate view v_emoloyee_salary as \n	select e.empid,e.name,s.basesalary from \nemoloyee as e left outer join salary as s\non e.empid = s.empid;\n\n\n-- 我们要的是 每个班中分数最高的一个人的信息\n-- 错误的.\nselect name,score,class_id from stu_student\ngroup by class_id\norder by score desc;\n\n-- 先排序,再分组\n-- 正确的是\nselect * from  (\n	select name,score,class_id from stu_student\norder by score desc\n) as s\ngroup by class_id;\n\n\n-- 把排序好的结果放到视图中\n\n-- 合并算法\ncreate algorithm=merge view v_merge as \n	select name,score,class_id from stu_student\n	order by score desc;\n\n-- 临时表算法\ncreate algorithm = temptable view v_temp as \n	select name,score,class_id from stu_student\n	order by score desc;\n\n\n-- 合并算法分组结果\nselect * from v_merge \n	group by class_id;\n\n-- 合并算法是将 视图中的sql语句和现在的sql语句进行合并\n	select name,score,class_id from stu_student\n	group by class_id\n	order by score desc;\n\n-- 临时表分组结果\nselect * from v_temp\n	group by class_id;\n\n\ndrop table if exists jd_goods;\n\ncreate table jd_goods (\n	goods_id int unsigned auto_increment,\n	goods_name varchar(20),\n	goods_num int default 100,\n	primary key(goods_id)\n);\n\ndrop table if exists jd_order;\ncreate table jd_order (\n	order_id int unsigned auto_increment,\n	goods_id int unsigned,\n	goumai_num int,\n	add_time timestamp,\n	primary key(order_id) \n);\n\ninsert into jd_goods values (null,\"咖啡\",100);\n\nupdate jd_goods set goods_num = goods_num - 5;\n\n-- 下单\ninsert into jd_order values (null,1,5,now());\n\n-- 有一个订单表 -- jd_order\n-- 有一个库存表 -- jd_goods\n-- 当我们给订单表插入数据之后,进行事件的触发, \n-- 触发库存表减少\n--  for each row 是行级操作\n-- 修改模式\ndelimiter !!\ncreate trigger tg_jianshao after insert on jd_order \n	for each row \nbegin\n	update jd_goods set goods_num = goods_num - 5;\nend\n!!\n-- 恢复到分号模式\ndelimiter ;\n\ninsert into jd_order values (null,1,5,now());\n\n\ninsert into jd_order values (null,1,10,now());\n\n\n-- 我们的触发器是有参数的\n-- old 和new\n-- insert  插入数据new\n-- delete 删除旧数据 old\n-- update  有新数据也有旧数据 new 和old\n\ndrop trigger  tg_jianshao;\n-- 表的事件的顺序after insert on jd_order只能有一个触发器\n-- 新的触发器\n-- new 表示 我们在订单插入的时候的那条数据记录\n-- new.字段名就可以 获取插入数据的值\ndelimiter @@@\ncreate trigger tg_auto after insert on jd_order for each row\n	begin\n		update jd_goods set goods_num = goods_num - new.goumai_num;\n	end\n@@@\ndelimiter ;\n\n\n-- 删除订单的时候把库存增加\ndelimiter %%\ncreate trigger tg_zengjia after delete on jd_order for each row\n	begin\n		update jd_goods set goods_num = goods_num + old.goumai_num;\n	end\n%%\ndelimiter ;\n\n\n-- 模拟事务\n\ncreate table t_money (\n	id int unsigned auto_increment,\n	name varchar(20),\n	money decimal(10,2),\n	primary key(id)\n)engine=INNODB;\n\ninsert into t_money values (null,\"鹏哥\",10000000);\n\n-- 开启事务\nstart transaction;\nupdate t_money set money = 0 where id = 1;\n\n-- 创建一个没有参数的函数\n-- returns 后边的类型也是需要和创建字段的类型类似的\n-- 返回多长的字符串要指定 \ndelimiter ^^\ncreate function f_1() returns varchar(20)\nbegin\n	return \"hello moto\";\nend\n^^\ndelimiter ;\n\n-- 查看函数\nshow function status;\n\n\n-- 创建一个分支结构的函数\n-- 必须有returns 而且必须有返回值类型\ndelimiter $$\ncreate function f_2(str varchar(20)) returns varchar(100)\nbegin\n	if str = &apos;itcast&apos; then\n		return \"hello itcaster\";\n	elseif str= &apos;itheima&apos; then\n		return &apos;hello hemaer&apos;;\n	else \n		return &apos;hello world&apos;;\n	end if;	\nend\n$$\ndelimiter ; \n\n\n-- 创建一个循环函数实现叠加\ndelimiter $$\ncreate function f_3() returns int\n	begin\n	declare sum int default 0;\n	declare i int default 0;\n	mywhile: while i<=10 do \n	  set sum = sum+i;\n	  set i = i+1;\n	end while;\n	return sum;\n	end\n$$\ndelimiter ;\n\n\n-- 计算n范围之内的累加和\ndelimiter $$\ncreate function f_4(n int) returns int\n	begin\n		declare sum int default 0;\n		declare i int default 0;\n		mywhile: while i<=n do \n			set sum = sum +i;\n			set i = i+1;\n		end while;\n		return sum;\n	end\n$$\ndelimiter ;\n\n\n-- 再传入一个参数, 累加的过程中,不加这个值\n-- n表示 累加到的值\n-- t 表示不累加的值\n-- t <= n\ndelimiter $$\ncreate function f_5(n int,t int) returns int \n	begin\n		declare sum int default 0;\n		declare i int default 0;\n		mywhile: while i<=n do\n			if i = t then \n				set i = i + 1;\n				iterate mywhile;\n			end if;\n			set sum = sum + i;\n			set i = i + 1;\n		end while;\n		return sum;\n	end\n$$\ndelimiter ;\n\n-- 循环标签不要使用系统的关键字\ndelimiter $$\ncreate function f_6(n int,t int) returns int \n	begin\n		declare sum int default 0;\n		declare i int default 0;\n		while: while i<=n do\n			if i = t then \n				set i = i + 1;\n				iterate mywhile;\n			end if;\n			set sum = sum + i;\n			set i = i + 1;\n		end while;\n		return sum;\n	end\n$$\ndelimiter ;\n\n-- break 在mysql中要使用leave\ndelimiter $$\ncreate function f_7(n int,t int) returns int \n	begin\n		declare sum int default 0;\n		declare i int default 0;\n		mywhile: while i<=n do\n			if i = t then \n				set i = i + 1;\n				leave mywhile;\n			end if;\n			set sum = sum + i;\n			set i = i + 1;\n		end while;\n		return sum;\n	end\n$$\ndelimiter ;\n\n\ncreate table t_procedure (\n	id int unsigned auto_increment,\n	name varchar(20),\n	primary key(id)\n);\n\ninsert into t_procedure values (null,\"abc\");\n\n\n-- 想创建没有返回值的函数\n-- 没有返回值的函数就不叫函数叫存储过程\ndelimiter $$\ncreate procedure pro_1()\n	begin\n	insert into t_procedure values (null,\"abc\");\n	end\n$$\ndelimiter ;\n\n\n-- 通过存储过程来产生大量的数据\n\ndelimiter $$\ncreate procedure pro_2(n int)\n	begin\n		declare i int default 0;\n		mywhile: while i<n do\n			set i = i+1;\n			insert into t_procedure values (null,&apos;abc&apos;);\n		end while;\n	end\n$$\ndelimiter ;\n\n\n-- 用存储过程去插入一条数据\n-- insert into stu_student(name,score) values (&apos;aaa&apos;,22);\n\ndelimiter $$\ncreate procedure pro_insert_student(n varchar(20),s int)\n	begin\n		insert into stu_student(name,score) values \n			(n,s);\n	end\n$$\ndelimiter ;\n\n\n\n\ndelimiter $$\ncreate procedure pro_insert_student(int n varchar(20),out s int)\n	begin\n		insert into stu_student(name,score) values \n			(n,s);\n	end\n$$\ndelimiter ;\n\n\n\nset @a = 10;\nset @b = 20;\nset @c = 30;\n\ndelimiter $$\ncreate procedure pro_3 (in x int,out y int,inout z int)\nbegin\n	select x,y,z;\n	set z = 300;\nend\n$$\ndelimiter ;\n\nwindow下:\n--数据库的备份\nmysqldump -h127.0.0.1 -P3306 -uroot -p graduation_project -B > E:/xxbiji/mysql/graduation_projec\nt.sql \n\n-B参数，就是在备份文件里面，多加上了创建数据库的语句！\n\n--数据库还原\nmysql -hlocalhost -P3306 -uroot -p < E:/xxbiji/mysql/graduation_project.sql\n--注意这个是直接在cmd窗口下,不需要进入mysql中\n\n\n--基础操作\nmysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;);\nmysql_query(&apos;use blog&apos;);\nmysql_query(&apos;set names utf8&apos;);\n\n\n-- 修改密码\n\n-- 首先登录MySQL。 \n格式：mysql> ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;密码&apos;;\n例子：mysql> ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos;;\n\n-- 用 Navicat Premium 连接数据库时 报如下错误：\nAuthention plugin &apos;caching_sha2_password&apos; cannot be loaded\n\n-- 意思大概是，密码加密问题\n\n-- 修改密码加密方式：如下即可\nALTER USER &apos;yourusername&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;youpassword&apos;;\n\n\n\n-- 让某个字段加 1\n&apos;UPDATE article SET `read`=`read`+1 WHERE id = &apos;+ id\n\n# 分页\n-- 上一篇\nSELECT * FROM new_info WHERE nid<9 ORDER BY nid DESC LIMIT 1; \n-- 下一篇\nSELECT * FROM new_info WHERE nid>9 ORDER BY nid ASC LIMIT 1;\n\n\n\n-- 安装报错\n\n-- The service already exists!\n\n-- 3.输入安装命令mysqld install \n-- 出现问题The service already exists \n-- 这是由于之前已经安装过mysql并且没有删除干净\n\n-- 4.重新以管理员身份运行，输入sc query mysql，查看一下名为mysql的服务： \n \n-- 发现之前确实有安装过。\n\n-- 5.命令sc delete mysql，删除该mysql \n\n\n-- 6.之后继续安装，就能成功 mysqld install\n\n-- 卸载 mysql\n\ncmd 下： mysqld -remove MySQL\n\n-------------------------------------------------------------------------------------------------\n\n-- 查看mysql 版本\nselect version() from dual;\n\n\n-- 三、重启\n--1、使用 service 启动：\nservice mysqld restart\n--2、使用 mysqld 脚本启动：\n/etc/inint.d/mysql restart\n\n--------------------------------------------SQL-----------------------------------------------------\n\n--求一个表中两个字段的和\n\nselect sum(praise) + sum(`read`) FROM article\n\n-- 存在和不存在，包含和不包含\n\nin\n\nnot in\n\nSELECT identification FROM jurisdiction WHERE id not in (1, 2, 3)\nSELECT identification FROM jurisdiction WHERE id in (1, 2, 3)\n\n\n\n```',0,0,0),(116,NULL,36,'Promise 的简单应用','把大佬教的东西记录下来',1582726285553,1586957942711,11,2,0,'### async 同时发送多个请求\n\n```js\n\nasync getShopList(date) {\n    const [data, data2] = await Promise.all([get_shop_list(postData), get_shop_list(postData)]);\n\n    if(typeof data !== &apos;undefined&apos; && typeof data.list !== &apos;undefined&apos;) {\n        this.tableData = [].concat(data.list)\n        this.all_page = data.all_page\n    }\n},\n\n// get_shop_list 返回 Promise 对象\n// Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成\n\n```\n\n---\n\n### 请求延迟\n\n```js\n\nabc() {\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve({\n                \"all_page\": 3,\n                \"list\":[]\n            })\n        }, 3000)\n    });\n}\n\n\nasync gg() {\n    await abc()\n}\n\n```',0,0,0),(117,NULL,40,'form','记录表单常见问题',1582726461990,NULL,0,2,0,'## element 表单验证 数据嵌套太深\n\n```html\n\n<el-form :model=\"form\" :rules=\"rules\" ref=\"form\">\n    <!-- prop: freControl.min -->\n    <el-form-item label=\"\" class=\"fl\" prop=\"freControl.min\">\n        <el-input @change=\"freControlMin\" v-model.number=\"form.freControl.min\" placeholder=\"请输入数量下限\"></el-input>\n    </el-form-item>\n</el-form>\n\n```\n\n```js\n\ndata() {\n    return {\n        form: {\n            budget: 1,\n            freControl: { // 追频控制\n                min: &apos;,\n                max: &apos;,\n                switch: false,\n            },\n        },\n        rules: {\n            budget: [\n                { required: true, message: &apos;请输入总预算&apos;, trigger: &apos;blur&apos; },\n                { validator: orderDudget, trigger: &apos;blur&apos; }\n            ],\n            freControl: {\n                min: [\n                    {required: true, message: &apos;请输入数量下限&apos;, trigger: &apos;change&apos;},\n                    {validator: check_num, trigger: &apos;change&apos;},\n                    {validator: check_num_int, trigger: &apos;change&apos;}\n                ]\n            }\n        },\n    }\n}\n\n```\n\n---\n\n## 表单验证-验证失效\n\n> 自定义表单验证内写 `return false`\n\n```js\n\ndata() {\n    let uploadRules = (rule, value, callback) => {\n        if(this.type === 3) {\n            let img = this.selectedSwiper.number.img\n            if(img !== this.uploadImgList.length) {\n                this.$message.error(&apos;请上传素材&apos;)\n                // return false 这种写法是错误的\n                // 它并不会让验证不通过的元素改变样式\n                // 也不会执行 this.$refs.form.validate 这个方法\n\n                callback(new Error(&apos; &apos;)) // 必须要有 callback 并且里面如果不需要文字，则必须是空字符串，否则验证错误时会显示一个空对象出来 {}\n            }\n        }\n        callback()\n    }\n\n    return {\n        rules: [\n            budget: [\n                { validator: uploadRules, trigger: &apos;blur&apos; }\n            ]\n        ]\n    }\n}\n\n```\n\n---\n\n\n> vue 虚拟`DOM` 必须加 `key`\n\n因为他们的 `type` 一致，所以加 key\n\n> 正确写法\n\n```html\n\n<el-form-item label=\"密码\" prop=\"password\">\n    <el-input type=\"password\" v-model=\"form.password\"></el-input>\n</el-form-item>\n<el-form-item label=\"确认密码\" prop=\"confirmPassword\" key=\"passwords\">\n    <el-input type=\"password\" v-model=\"form.confirmPassword\" @keyup.enter.native=\"register\"></el-input>\n</el-form-item>\n\n```\n\n> 错误写法\n\n```html\n\n<el-form-item label=\"密码\" prop=\"password\">\n    <el-input type=\"password\" v-model=\"form.password\"></el-input>\n</el-form-item>\n<el-form-item label=\"确认密码\" prop=\"passwords\">\n    <el-input type=\"password\" v-model=\"form.passwords\" @keyup.enter.native=\"register\"></el-input>\n</el-form-item>\n\n```\n\n---\n\n## 验证纯数组\n\n```html\n\n<template v-for=\"(item, index) in selectedSwiper.number.txt\">\n    <el-form-item v-if=\"index === 0\" label=\"标题\" :key=\"index\" :prop=\"&apos;describeList.&apos; + index\" :rules=\"{ required: true, message: &apos;请输入标题文案&apos;, trigger: &apos;change&apos; }\">\n        <el-input class=\"w504\" v-model=\"form.describeList[index]\" placeholder=\"请输入标题文案\" maxlength=\"10\">\n            <span slot=\"suffix\">{{ form.describeList[index] | describeLength }}/10</span>\n        </el-input>\n    </el-form-item>\n    <el-form-item v-else label=\"描述\" :key=\"index\" :prop=\"&apos;describeList.&apos; + index\" :rules=\"{ required: true, message: &apos;请输入描述文案&apos;, trigger: &apos;change&apos; }\">\n        <el-input class=\"w504\" v-model=\"form.describeList[index]\" placeholder=\"请输入描述文案\" maxlength=\"20\">\n            <span slot=\"suffix\">{{ form.describeList[index] | describeLength }}/20</span>\n        </el-input>\n    </el-form-item>\n</template>\n\n\n```\n\n\n```js\n\ndata() {\n    return {\n        form: {\n            describeList: [], // 必须在 form 对象中\n            // 如果此数组中的值是对象形式此方法也适用\n            // 修改 :prop=\"&apos;describeList.&apos; + index + &apos;.name&apos;\" \n            // 修改 v-model=\"form.describeList[index].name\"\n        },\n        selectedSwiper: {\n            number: {\n                txt: 5\n            }\n        }\n    }\n}\n\n```\n\n\n---\n\n\n## 阻止表单回车默认提交\n\n@submit.native.prevent\n\n```html\n\n<el-form :model=\"form\" :rules=\"rules\" ref=\"form\" @submit.native.prevent>\n</el-form>\n\n```\n\n## 表单验证异步处理\n\n```js\n\nthis.$refs.form.validate(async (valid) => {\n    if (valid) {\n        try {\n            const { data } = await this.$http.post(&apos;user/addUser&apos;, {\n                username: &apos;123&apos;,\n                password: &apos;123456&apos;\n            })\n            alert(data.msg)\n        } catch(e) {\n            console.log(e)\n        }\n    }\n})\n\n```\n\n\n### 阻止浏览保存密码后的自动提示\n\n> 如果登录和注册在同一个页面的话，`key`是很必要的，可以防止一些虚拟`DOM`上的错误\n\n```html\n\n<el-form-item label=\"密码\" prop=\"password\" key=\"password\">\n    <el-input :type=\"type.password\" @focus=\"passwordFocus\" ref=\"password\" autocomplete=\"off\" v-model=\"form.password\"></el-input>\n    <!-- 这个是为了去掉浏览器默认的自动填充，这些都是在登录成功后点击浏览器默认的保存密码是才会出现的，不保存密码，则不会出现这种情况 -->\n    <input type=\"password\" autocomplete=\"new-password\" style=\"display: none\"/>\n</el-form-item>\n<el-form-item label=\"确认密码\" autocomplete=\"off\" prop=\"confirmPassword\" key=\"passwords\">\n    <el-input :type=\"type.confirmPassword\" @focus=\"confirmPasswordFocus\" ref=\"confirmPassword\" v-model=\"form.confirmPassword\" @keyup.enter.native=\"register\"></el-input>\n</el-form-item>\n\n```\n\n```js\n\n{\n    data() {\n		var confirmPassword = (rule, value, callback) => {\n			if (value) {\n				// 验证用户名是否重复\n				if (value === this.form.password) {\n					callback()\n				} else {\n					callback(new Error(&apos;两次密码不一致&apos;))\n				}\n			} else {\n				return callback(new Error(&apos;请输入密码&apos;))\n			}\n		}\n        return {\n            rules: {\n				password: [\n					{ trigger: &apos;change&apos;, message: &apos;请输入密码&apos;, required: true },\n				],\n				confirmPassword: [\n					{ validator: confirmPassword, trigger: &apos;change&apos;, required: true }\n				]\n            },\n            type: {\n				password: &apos;text&apos;,\n				confirmPassword: &apos;text&apos;,\n            },\n            form: {\n				password: &apos;,\n				confirmPassword: &apos;,\n			},\n			lock: true\n        }\n    },\n    methods: {\n		// 这个是为了去掉浏览器默认的提示\n		passwordFocus() {\n			if (String(this.form.password).length === 0) {\n				if (this.lock) {\n					this.$refs.password.blur()\n					this.lock = false\n					setTimeout(() => {\n						this.type.password = &apos;text&apos;\n						this.$refs.password.focus()\n						this.lock = true\n					})\n				}\n			}\n		},\n		confirmPasswordFocus() {\n			if (String(this.form.confirmPassword).length === 0) {\n				if (this.lock) {\n					this.$refs.confirmPassword.blur()\n					this.lock = false\n					setTimeout(() => {\n						this.type.confirmPassword = &apos;text&apos;\n						this.$refs.confirmPassword.focus()\n						this.lock = true\n					})\n				}\n			}\n		}\n    },\n	watch: {\n		// 这个是为了去掉浏览器默认的提示\n		&apos;form.password&apos;: function(value, v2) {\n			if (String(value).length > 0) {\n				setTimeout(() => {\n					this.type.password = &apos;password&apos;\n				})\n			} else if (this.$refs.password) {\n				this.$refs.password.blur()\n				this.lock = false\n				setTimeout(() => {\n					this.type.password = &apos;text&apos;\n					this.$refs.password.focus()\n					this.lock = true\n				})\n			}\n		},\n		&apos;form.confirmPassword&apos;: function(value) {\n			if (String(value).length > 0) {\n				setTimeout(() => {\n					this.type.confirmPassword = &apos;password&apos;\n				})\n			} else if (this.$refs.confirmPassword) {\n				this.$refs.confirmPassword.blur()\n				this.lock = false\n				setTimeout(() => {\n					this.type.confirmPassword = &apos;text&apos;\n					this.$refs.confirmPassword.focus()\n					this.lock = true\n				})\n			}\n		}\n	},\n}\n\n\n```\n\n---\n\n#### 还有一种方法，也可以：阻止浏览保存密码后的自动提示（更简单）\n\n```html\n\n\n<el-form-item label=\"密码\" prop=\"password\">\n    <el-input type=\"text\" onfocus=\"this.type = &apos;password&apos;\" v-model=\"commentForm.password\"></el-input>\n</el-form-item>\n<el-form-item label=\"确认密码\" prop=\"checkPass\">\n    <el-input type=\"text\" onfocus=\"this.type = &apos;password&apos;\" v-model=\"commentForm.checkPass\" autocomplete=\"off\"></el-input>\n</el-form-item>\n\n```\n\n注意，οnfοcus=\"this.type=&apos;password&apos;\"不能再IE上识别，需要做兼容性考虑，在网页初始化的时候处理下就好了，对于IE浏览器，在input标签上使用用type=\"password\" autocomplete=\"off\"后，浏览器是不会提示记住密码的。\n',0,0,0),(118,NULL,39,'input','常见意忘记的东西',1582726526168,NULL,0,2,0,'## 限制输入长度&&显示当前字数\n\n```html\n\n<el-input class=\"w504\" v-model=\"form.title\" maxlength=\"10\">\n    <span slot=\"suffix\">{{ form.title.length }}/10</span>\n</el-input>\n\n```',0,0,0),(119,NULL,41,'table','记录常用实例，方便查阅',1582726645861,NULL,3,2,0,'### 1. 表格实现单选框,且不需要显示单选框的值\n\n> 如果没有 `&nbsp;` 就会显示 `label` 中的值\n\n```html\n\n<el-table class=\"table\" :data=\"tableData\" stripe style=\"width: 100%\">\n    <el-table-column prop=\"date\" label=\"\">\n        <template slot-scope=\"scope\">\n            <el-radio v-model=\"radio\" :label=\"scope.row.id\">&nbsp;</el-radio>\n        </template>\n    </el-table-column>\n    <el-table-column prop=\"crowd_name\" label=\"人群名称\"></el-table-column>\n    <el-table-column prop=\"type\" label=\"人群类型\"></el-table-column>\n    <el-table-column prop=\"coverage_total\" label=\"覆盖总人数\">\n</el-table>\n\n```\n\n---\n\n### table 展开行\n\n```pug\n\ntemplate(slot-scope=&apos;scope&apos;, v-if=\"scope.height > 0\")\n    el-table.table(:data=\"tableData\", @row-click=\"rowExpand\", row-key=\"id\",  @expand-change=\"rowExpand\" :expand-row-keys=\"entexpands\", v-loading=\"loading\", align=\"center\", stripe)\n        .no-data(slot=\"empty\")\n        el-table-column(type=\"expand\")\n            template(slot-scope=\"scope\")\n                el-table(:data=\"tableData\", v-loading=\"loading\", align=\"center\")\n                    el-table-column(prop=\"name\", label=\"日期\")\n                    el-table-column(prop=\"device\", label=\"总花费（元）\")\n                    el-table-column(prop=\"name\", label=\"优量通花费（元）\")\n                    el-table-column(prop=\"name\", label=\"短信通花费（元）\")\n                    el-table-column(prop=\"name\", label=\"邮件通花费（元）\")\n        el-table-column(prop=\"name\", label=\"店铺名称\")\n        el-table-column(prop=\"adress\", label=\"店铺位置\")\n        el-table-column(prop=\"device\", label=\"已绑定探针数\")\n        el-table-column(prop=\"created_at\", label=\"创建时间\")\n            template(slot-scope=\"scope\")\n                span {{ scope.row.created_at | time }}\n        el-table-column(prop=\"id\", label=\"操作\", width=\"180px\")\n            template(slot-scope=\"scope\")\n                span.export 导出\n```\n\n```js\n\nrowExpand(row, event, column) {\n    Array.prototype.remove = function (val) {\n        let index = this.indexOf(val)\n        if (index > -1) {\n            this.splice(index, 1)\n        }\n     }\n\n     if (this.entexpands.indexOf(row.id) < 0) {\n        this.entexpands = []\n        this.entexpands.push(row.id)\n     } else {\n        this.entexpands.remove(row.id)\n     }\n},\n\n```\n\n---\n\n### 表格复选框默认选中\n\n| 方法名 | 说明 | 参数 \n---|---|---|---\n| toggleRowSelection | 用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中） | row, selected\n\n> 由于`element`在这里的选中与否是根据`全等于`进行判断，所以传入的`row`必须是表格数据中的值，如果传入的值是复制的表格数据，则不会选中\n\n\n\n### TypeError: u.$scopedSlots.default is not a function  表格报错\n\n> 问题描述：使用表格时做了v-if判断；首次渲染没有问题；反复操作便会报错；\n\n+ 给每个`el-table-column`加上`key`\n\n```pug\n\nel-table.table-border(:data=\"areaTableData\", stripe, style=\"width: 100%\", height=\"400\")\n    el-table-column(prop=\"name\", label=\"地域\", key=\"name\")\n    el-table-column(prop=\"cost\" label=\"花费(元)\", v-if=\"selectVal == &apos;cost&apos;\", key=\"cost\")\n        template(slot-scope=\"{row}\")\n            span {{ row.cost | $money | $formatNumber }}\n    el-table-column(prop=\"impression\" label=\"曝光数\", v-if=\"selectVal === &apos;impression&apos;\", key=\"impression\")\n    el-table-column(prop=\"cpm\" label=\"CPM(元)\", v-if=\"selectVal == &apos;cpm&apos;\", key=\"cpm\")\n        template(slot-scope=\"{row}\")\n            span {{ row.cpm | $money | $formatNumber }}\n    el-table-column(prop=\"click\" label=\"点击数\", v-if=\"selectVal == &apos;click&apos;\", key=\"click\")\n\n\n```\n\n\n### v-if v-show 失效\n\n>  `slot-scope=\"{row}\"`\n\n```html\n\n<!-- 错误写法 -->\n<el-table-column type=\"expand\">\n    <template>\n        <el-select\n            v-if=\"selectVisible\"\n            v-model=\"selectedList\"\n            multiple\n            collapse-tags\n            style=\"margin-left: 20px;\"\n            placeholder=\"请选择\"\n        >\n            <el-option v-for=\"item in jurisdictionList\" :key=\"item.id\" :label=\"item.j_name\" :value=\"item.id\">\n            </el-option>\n        </el-select>\n        <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"selectVisible = !selectVisible\">+ New Tag</el-button>\n    </template>\n</el-table-column>\n\n<!-- 正确写法 -->\n<el-table-column type=\"expand\">\n    <template slot-scope=\"{row}\">\n        <el-select\n            v-if=\"selectVisible\"\n            v-model=\"selectedList\"\n            multiple\n            collapse-tags\n            style=\"margin-left: 20px;\"\n            placeholder=\"请选择\"\n        >\n            <el-option v-for=\"item in jurisdictionList\" :key=\"item.id\" :label=\"item.j_name\" :value=\"item.id\">\n            </el-option>\n        </el-select>\n        <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"selectVisible = !selectVisible\">+ New Tag</el-button>\n    </template>\n</el-table-column>\n\n```',0,0,0),(120,NULL,42,'tabs','记录实例，方便查阅',1582726717318,NULL,2,2,0,'## elementui 的tabs组件出现蓝色边框问题\n\n```css\n\n.el-tabs__item:focus.is-active.is-focus:not(:active) {\n    -webkit-box-shadow: none;\n    box-shadow: none;\n}\n\n```\n\n\n### 添加图标在左边\n\n```pug\n\nel-tabs(v-model=\"tabValue\" \n    @tab-click=\"clickTab\"\n    @tab-remove=\"removeTab\"\n    :before-leave=\"beforeLeave\"\n    :closable=\"closable\"\n)\n    template(v-for=\"(item, index) in creativeList\")\n        el-tab-pane(:label=\"item.label\", :name=\"item.name\", :key=\"index\")\n            creative-swiper.mb40(ref=\"creativeSwiper\" v-if=\"type === 3\")\n            creative-form\n    //- 就是它（自定义 tab\n    el-tab-pane(label=\"rr\", name=\"add\")\n        span.tab-add(slot=\"label\")\n            i.el-icon-circle-plus-outline(@click=\"addCreative\", status=\"link\")\n\n```\n\n\n### 删除 tab 时，页面会自动置顶\n\n> 删除`tab`时，会删除`tab`中的数据，`vue`会重新渲染，导致页面置顶\n\n解决的办法：\n    删除`tab`数据前，先获取文档的卷曲高度，删除后赋值即可\n\n```js\n\n// 删除 tab 时执行\nremoveTab(name) {\n    var scrollTop = document.documentElement.scrollTop\n    this.creativeList = this.creativeList.filter((item, index) => {\n        if(item.name === name) {\n            // 更新当前选中的标签\n            this.tabValue = this.creativeList[index - 1].name\n        } else {\n            return item\n        }\n    })\n    this.$nextTick(() => {\n        document.documentElement.scrollTop = scrollTop\n    })\n},\n\n```',0,0,0),(121,NULL,29,'插槽','记录实例，方便查阅',1582726813281,NULL,1,2,0,'> 定义\n\n```html\n\n<div>\n    <slot name=\"title\">\n        <div @click=\"clickFn\"></div>\n    </slot>\n</div>\n\n```\n\n> 调用\n\n```html\n\n<div slot=\"title\" @click=\"selfClick\">\n    <!-- 不推荐这样使用 -->\n    <!-- 会触发组件默认的slot方法 -->\n    <!-- 内容 -->\n    <div>\n    </div>\n</div>\n\n```\n\n```html\n\n<div slot=\"title\">\n    <!-- 对于特殊的slot，必须抽出一个div来写，否则会触发组件默认的slot方法 -->\n    <!-- 内容 -->\n    <div @click=\"selfClick\">\n    </div>\n</div>\n\n```\n\n> 下面的 `a` 标签会替换掉上面的 `slot`\n',0,0,0),(122,NULL,29,'动态样式绑定','记录常见意忘的问题，方便查阅',1582726885331,NULL,0,2,0,'#### vue 的排他功能\n\n```html\n\n<div v-for=\"(item,index) in items\" :class=\"[isactive === index ? &apos;addclass&apos; : &apos;]\" @click=&apos;onclick(index)&apos;>\n    <span>{{item.name}}</span>\n</div>\n\n```\n\n```js\n\nonclick(index){\n    //将点击的元素的索引赋值给bian变量\n    this.isactive = index\n}\n\n```\n\n### 多选-样式绑定\n\n```html\n\n<template v-for=\"(item, index) in list\">\n    <swiper-slide :key=\"index\">\n        <div class=\"cs-content\">\n            <div :class=\"[&apos;content-box&apos;, item.src, {selection: item.status}]\">\n                <i class=\"icon-choice\"></i>\n            </div>\n            <div class=\"content-txt\">{{ item.txt }}</div>\n        </div>\n    </swiper-slide>\n</template>\n\n```\n\n',0,0,0),(123,NULL,29,'计算属性和过滤器的区别','很有用的小区别',1582727101846,NULL,5,2,0,'## 计算属性和过滤器的区别\n\n| 计算属性 | 过滤器 |\n| --- | ---\n| 依赖于一个固定的vue实例 ，在某一个实例中使用 | 不依赖于实例。可以 定义一个全局过滤器，在多个实例中使用 |\n| 不接受额外参数，依赖于data属性中的变量 | 不要求是data中的变量，可以是临时变量。可接受额外参数。|\n| 有缓存管理机制，可减少页面调用次数 | 无缓存机制，调用次数，取决于页面中有所多少过滤器 |\n| 计算属性虽默认为只读，但可以定义为对象，开启可读可写模式 | 只能读取操作 |\n| 计算属性被作为一个类属性调用 | 过滤器被作为一个特殊方法处理 |\n\n> 相同点： 都必须有返回值\n\n+ 使用计算属性的时候需要小心，因为他很有可能存在异步问题，需要做下判断，或是换一种方式，例如过滤器',0,0,0),(124,NULL,34,'vue-devtools','安装vue-devtools工具方便调试，每次都百度，有的还不能用，干脆记录记录下了',1582727220395,NULL,20,2,0,'## 安装 vue-devtools\n\n\n### 下载 https://github.com/vuejs/vue-devtools\n\n### \n\n+ Clone this repo   克隆 vue-devtools\n+ yarn install      需要耐心，第一次可能会报错，多安装几次，npm yarn cnpm \n+ yarn run build    打包\n+ Open Chrome extension page  打开谷歌浏览器扩展页\n+ Check \"developer mode\"  勾选“开发者模式”\n+ Click \"load unpacked extension\", and choose shells/chrome.  单击“加载未打包的扩展”，然后选择packages/shells/shell-chrome\n+ 重启浏览器即可\n\n',0,0,0),(125,NULL,43,'闭包','记录面试问题，以备复习&&加深印象',1582997459619,1582999164174,7,2,1,'### 特点\n1. 让外部访问函数内部变量成为可能；\n2. 局部变量会常驻在内存中；\n3. 可以避免使用全局变量，防止全局变量污染；\n4. 会造成内存泄漏（有一块内存空间被长期占用，而不被释放）\n\n---\n\n例1：(笔试)\n\n```js\n// 让外部访问函数内部变量成为可能\nfunction closure(){\n    var i= 10;\n    return function(){\n        ++i// i++ 结果一致\n        console.log(i);\n    }\n}\nvar fn = closure();\nconsole.log(fn()); // 11\nconsole.log(fn()); // 12\nconsole.log(fn()); // 13\n\n```\n例2：\n\n```js\nvar i = 0;\nfunction closure(){\n  return function() {\n       i++;\n       console.log(i);\n  }\n}\nvar fn1 = closure();\nvar fn2 = closure();\nfn1(); // 1\nfn2(); // 2\nfn1(); // 3\nfn2(); // 4\n```\n\n\n> 我以前错误的观点：\n\n闭包内访问不到闭包外的变量（从例子中不难看出，闭包内是可以访问的）\n\n---\n\n> 个人理解：\n\n可以把整个闭包函数`closure`当作一个对象，把返回的函数当做一个值，\n当多次修改同一个对象的值时，那么这个值就会，叠加或叠减(相应改变); ---- `局部变量会常驻在内存中`\n当修改不同对象的值时，他便只能改对应对象的值; ----`可以避免使用全局变量，防止全局变量污染；`\n\n---\n\n例3：\n\n> 这个结果很简单，但这种方式值得记录\n\n```js\n(function() { \n  var m = 0; \n  function getM() { return m; } \n  function seta(val) { m = val; } \n  window.g = getM; \n  window.f = seta; \n})(); \nf(100);\nconsole.info(g()); // 100\n\n```\n\n例3：\n\n```js\n\nvar add = function(x) { \n  var sum = 1; \n  var tmp = function(x) { \n      sum = sum + x; \n      return tmp;    \n  } \n  tmp.toString = function() {\n       // 这个其实就是为了能返回 sum ，只执行一次\n      return sum; \n  }\n  return tmp; \n} \nconsole.log(add(7)(2)(3));  // 7 传不传，和传什么对结果都没影响,因为它根本没有调用temp,add(7)就是temp不是temp()。\n\n```\n\n例4：(笔试)\n\n```js\n// 这是个非常棒的实例，它会打印`li`对应的序号\nvar lis = document.getElementsByTagName(\"li\");\nfor(var i=0;i<lis.length;i++){\n  (function(i){\n      lis[i].onclick = function(){\n           console.log(i);\n      };\n  })(i);       //事件处理函数中闭包的写法\n}\n```\n\n原博文的例子14-16还没看~\n\n---\n\n版权声明：本文为CSDN博主「羊二哥」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：[https://blog.csdn.net/weixin_43586120/article/details/89456183](https://blog.csdn.net/weixin_43586120/article/details/89456183)\n',0,0,0),(128,NULL,38,'nodejs中的async模块学习','async模块是为了解决嵌套金字塔,和异步流程控制而生',1583385581626,NULL,13,2,1,'\n```\n安装 `npm i async`\n引入 `let async = require(&apos;async&apos;)`\n```\n\n### 多个函数并行执行,不会等待其他函数\n\n`parallel(tasks,[callback])`\n\n```js\n\nvar task1 = function (callback) {\n    callback(null, \"task1\")\n}\n\nvar task2 = function (callback) {\n     callback(null, \"task2\")\n}\n\nvar task3 = function (callback) {\n    callback(null, \"task3\")\n}\n\nasync.parallel([task1, task2, task3], function (errer, result) {\n    if (errer) throw error\n    console.log(result)\n})\n\n```\n\n---\n\n### 依次执行,前一个函数的输出为后一个函数的输入\n\n`waterfall(tasks,[callback])`\n\n```js\nvar task1 = function (callback) {\n    callback(null, \"11\")\n}\n\nvar task2 = function (q, callback) {\n    console.log(\"task1函数传入的值: \" + q);\n    callback(null, \"22\")\n}\n\nvar task3 = function (q, callback) {\n    console.log(\"task2函数传入的值: \" + q);\n    callback(null, \"33\")\n}\n\nasync.waterfall([task1, task2, task3], (error, results) => {\n    if (error) throw error\n    console.log(\"result : \" + result)\n})\n\n```\n站长声明： 这些方法容易忘记，为了更好的开发，于是摘取大佬博文相对于自己更实用的方法，加以记录，便于查询。\n版权声明：本文为CSDN博主「意外金喜」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/zzwwjjdj1/article/details/51857959',0,0,0),(129,NULL,35,'mysql实用小方法','记录用到的mysql实用方法',1583849727846,1587049354874,21,2,0,'### COUNT 里加判断\n\n> 查找评论表中评论id等于0的条数（个数）\n\n```sql\n-- 正确的写法\nSELECT  COUNT(IF(`comment_id`=0,TRUE,NULL)) FROM comment\n-- 错误的写法，这样会导致他们两个的值是一样的，都是COUNT(id)的值\nSELECT COUNT(id),COUNT(IF(`article_id`=83,TRUE,NULL)) FROM comment\n```\n\n### SUM 里加判断\n\n> 计算comment_id=1 的 paycost 的和。\n\n```sql\nSELECT SUM(IF(`comment_id`=1,`paycost`,0))  FROM comment\n```\n\n### 不等于\n> <> 与!=都是不等于的意思，但是一般都是用<>来代码不等于因为<>在任何SQL中都起作用但是!=在sql2000中用到，则是语法错误，不兼容的\nsql中的等于和不等于， &apos;=&apos; ,&apos;!=&apos;,&apos;<>&apos;,&apos;is null&apos;....\n不等于：<> ,!=,~= ,^= 这四个符号据说都可以在oracle中表示不等于，但是试了之后发现<> ,!= ,^=是可以的，~=不行,需要注意的是，只有<>是标准的sql语法，可以移植，其他的都是oracle平台的特性，移植性较差，所以开发中，尽量使用<>表示不等于\n\n```sql\nSELECT * FROM bookmark WHERE link <> &apos;NULL&apos;\nSELECT * FROM bookmark WHERE link IS NULL\nSELECT * FROM bookmark WHERE link IS NOT NULL\n```',0,0,0),(130,NULL,3,'js实用小方法','将工作中常用、实用的js方法封装起来，以便日后快速开发',1584340577992,1587053787452,27,2,0,'```js\n\n/**\n * 创建构造函数\n * @author yanghanliang\n */\nvar My = function () {\n\n}\n\n/**\n * 获取属性值\n * @param {object} ele  - DOM 对象\n * @param {string} attr - 属性\n * @returns {number} value 属性值\n *\n */\nMy.prototype.getStyle = function (ele, attr) {\n    if (window.getComputedStyle) {\n        let value = window.getComputedStyle(ele, null)[attr]\n        let index = value.indexOf(&apos;px&apos;)\n        return Number(value.slice(0, index))\n    } else {\n        // console.log(&apos;老铁！解决下兼容&apos;)\n        return ele.currentStyle;\n    }\n}\n\n/**\n * 获取某个范围的随机数\n * @param {object}      params\n * @param {object}      params.symbol \n * @param {string}      params.symbol.min 默认: &apos;contain&apos; - &apos;contain&apos; 标识包含 &apos;not&apos; 标识不包含\n * @param {string}      params.symbol.max 默认: &apos;contain&apos; - &apos;contain&apos; 标识包含 &apos;not&apos; 标识不包含\n * @param {number}      params.min 最小值\n * @param {number}      params.max 最大值\n * @returns {number} value 默认情况下: min 到 max 之间的值 - 包含最大值和最小值\n */\nMy.prototype.random = function (params) {\n    // 需要传递的参数\n    let postData = {\n        params: params,\n        defaultValue: {\n            symbol: {\n                min: &apos;contain&apos;,\n                max: &apos;contain&apos;\n            }\n        }\n    }\n    params = this.paramsInherit(postData)\n    let symbol = params.symbol\n    let random = Math.random()\n    let max = params.max\n    let min = params.min\n\n    if(symbol.min === &apos;contain&apos; && symbol.max === &apos;contain&apos;) {\n        // console.log(&apos;[0-5]&apos;)\n        return Math.floor(random * (max - min + 1)) + min\n    } else if(symbol.min === &apos;not&apos; && symbol.max === &apos;contain&apos;) {\n        // console.log(&apos;(0-5]&apos;)\n        return Math.ceil(random * (max - min) + 1) + min - 1\n    } else if(symbol.min === &apos;contain&apos; && symbol.max === &apos;not&apos;) {\n        // console.log(&apos;[0-5)&apos;)\n        return Math.floor(random * (max - min)) + min\n    } else if(symbol.min === &apos;not&apos; && symbol.max === &apos;not&apos;) {\n        // console.log(&apos;(0-5)&apos;)\n        let temp = Math.floor(random * (max - min) + 1) + min\n        return temp >= max ? temp - 1 : temp\n    }\n}\n\n/**\n * 参数继承-如果传入的参数存在则替换掉默认值\n * 现在只支持对象的参数\n * @param {object}          params\n * @param {object}          params.params - 传入的参数\n * @param {object}          params.defaultValue - 默认值 不存在默认值时，默认为 0\n * @return {object}         param 继承默认值后的参数\n */\nMy.prototype.paramsInherit = function(params) {\n    let recursion = function (param, defaultValue) {\n        // 循环默认值\n        for(let key in defaultValue) {\n            // 判断参数中是否存在默认值\n            let type = typeof param[key]\n            if(type === &apos;object&apos;) {\n                recursion(param[key], defaultValue[key])\n            } else { \n                if(!param[key]) {\n                    if(type === &apos;object&apos;) {\n                        recursion(param[key], defaultValue[key])\n                    } else {\n                        // 不存在，则给参数补充上\n                        param[key] = defaultValue[key]\n                    }\n                }\n            }\n        }\n    }\n\n    recursion(params.params, params.defaultValue)\n    return params.params\n}\n\n/**\n * 深拷贝\n * @author                  yanghanliang\n * @created                 2019-09-27\n * @lastEditDate            2019-09-27\n * @param {object,array}    data\n * @return {object,array}   dataCopy\n */\nMy.prototype.forEach = function (data) {\n    let type = this.isType(data)\n    if (type === &apos;array&apos;) {\n        let arr = []\n        for (let i = 0, length = data.length; i < length; i++) {\n            let item = data[i]\n            let itemType = this.isType(item)\n            if (itemType === &apos;object&apos; || itemType === &apos;array&apos;) {\n                let value = this.forEach(item)\n                arr.push(value)\n            } else {\n                arr.push(item)\n            }\n        }\n        return arr\n    } else if (type === &apos;object&apos;) {\n        let obj = {}\n        for (let key in data) {\n            let item = data[key]\n            let itemType = this.isType(item)\n            if (itemType === &apos;object&apos; || itemType === &apos;array&apos;) {\n                let value = this.forEach(item)\n                obj[key] = value\n            } else {\n                obj[key] = item\n            }\n        }\n        return obj\n    }\n}\n\n/**\n * 判断数据类型\n * @author                  yanghanliang\n * @created                 2019-09-27\n * @lastEditDate            2019-09-27\n * @param {*}               value\n * @return {string} type    DataType\n */\nMy.prototype.isType = function (value) {\n    // number boolean string array undefined null\n    var type = typeof value\n    if (type === &apos;object&apos;) {\n        if (value.length) {\n            return &apos;array&apos;\n        } else {\n            return &apos;object&apos;\n        }\n    } else {\n        // 不考虑 null, undefined\n        return &apos;string&apos;\n    }\n}\n\n/**\n * 获取最大值\n * @param {object} params\n * @param {array} params.data\n * @param {string} params.field\n * @return {number} 最大值\n */\nMy.prototype.getMaxValue = function (params) {\n    // [1, 2]\n    // [{val: 1}, {val: 2}]\n    let data = params.data\n    let one = data[0]\n    let type = typeof one\n    let template = null\n    let length = data.length\n\n    if (type === &apos;object&apos;) {\n        for (let i = 1; i < length; i++) {\n            let item = data[i]\n            if (item[field] > template[field]) {\n                template = item\n            }\n        }\n        return template[field]\n    } else {\n        for (let i = 1; i < length; i++) {\n            let item = data[i]\n            if (item > template) {\n                template = item\n            }\n        }\n        return template\n    }\n}\n\n/**\n * 获取某段范围内的随机不重复数据（坐标）\n * 适用范围是 number 比较大，且 range 比较大 例如 - number 10 range 300\n * @param {object}                          params\n * @param {object}  params.range            范围\n * @param {array}   params.range.min        最小值 - 默认为 0\n * @param {array}   params.range.max        最大值\n * @param {number}  params.number           个数 - 有默认值： 可用范围内的 2%\n * @return {array}  较为均匀的随机值\n */\nMy.prototype.randomCoordinate = function(params) {\n    params.range.min = params.range.min ? params.range.min : 0\n\n    let random = Math.ceil((params.range.max - params.range.min) * 0.02)\n    random = random < 0 ? 1 : random\n\n    let defaultValue = {\n        number: random,\n    }\n    params = this.paramsInherit({\n        params: params,\n        defaultValue: defaultValue\n    })\n\n    let range = params.range.max - params.range.min\n    let average = Math.floor(range / params.number)\n    let temp = params.range.min\n    let data = [] // 从小到大的值\n    \n    for(let i = 0; i < params.number; i++) {\n        let value = temp + average\n        let random = this.random({\n            min: temp,\n            max: value,\n        })\n        data.push(random)\n        temp = value\n    }\n    return data\n}\n\n/**\n * 获取某段范围内的随机不重复数据（坐标）\n * 适用范围是 number 比较大，且 range 比较小 例如 - number: 10 range: 10\n * @param {object}  params\n * @param {object}  params.range            范围\n * @param {array}  params.range.min         最小值\n * @param {array}  params.range.max         最大值\n * @param {number}  params.number           个数\n * @return {array}  完全随机的随机值\n */\nMy.prototype.randomCoordinates = function(params) {\n    let that = this\n    let data = []\n    let recursion = function() {\n        let item = that.random({\n            min: params.range.min,\n            max: params.range.max\n        })\n\n        if(!data.includes(item)) {\n            data.push(item)\n        }\n\n        if(data.length < params.number) {\n            recursion()\n        }\n    }\n\n    recursion()\n\n    return data\n}\n\n/**\n * 去掉数组中差距小于或大于某值的数\n * @param {object}      params\n * @param {array}       params.data 排序好的数字数组\n * @param {number}      params.difference 差额（小圆的 width\n * @param {string}      params.symbol 符号 > < = 运算符\n */\nMy.prototype.arrExclude = function(params) {\n    let data = params.data\n\n    for(let i = 0; i < data.length - 1; i++) {\n        let previous = data[i] // 1\n        let latter = data[i + 1] // 2\n        let value = Math.round(Math.abs(previous - latter)) // 1\n        let str = value + params.symbol + params.difference // 1 > 3\n\n        if(!eval(str)) { // true\n            data.splice(i + 1, 1) // [1, 3, 4, 5, 6]\n            --i\n        }\n    }\n\n    return data\n    // {\n    //     data: [1, 2, 3, 4, 5, 6],\n    //     difference: 2,\n    //     symbol: &apos;>&apos;\n    // }\n    // 去掉这个数组中 差距大于 2 的数据\n}\n\n/**\n * 打乱数组\n * @param {object}           params\n * @param {array}            params.data\n * @return {array}           打乱后的数组\n */\nMy.prototype.disruptedArr = function(params) {\n    return params.data.sort(function() {\n        return Math.random() > 0.5 ? -1 : 1\n    })\n}\n\n/**\n * 数组排序\n * @param {object}           params\n * @param {array}            params.data\n * @param {string}           params.symbol 符号 > < = 运算符\n * @return {array}           排序好之后的数组\n */\nMy.prototype.sort = function(params) {\n    return params.data.sort(function(a, b) {\n        return eval(a + params.symbol + b) ? 1 : -1\n    })\n}\n\n/**\n * 数组对象排序\n * @param {object}           params\n * @param {array}            params.data 数组对象 [{value: 50}]\n * @param {string}           params.key  已对象中的 key 为判断对象 value\n * @param {string,boolean}   param.sort  升序或降序 默认降序 可选值 true &apos;desc&apos;\n * @return {array}           排序好之后的数组\n */\nMy.prototype.sortAO = function(params) {\n    const data = params.data\n    const key = params.key ? params.key : &apos;value&apos; // 默认 value\n    const sort = params.sort ? &apos;>&apos; : &apos;<&apos; // 默认是降序\n\n    for (let i = 0, length = data.length; i < length - 1; i++) {\n        for (let j = 0; j < length - i - 1; j++) {\n            let rule = eval(data[j][key] + sort + data[j + 1][key])\n            if (rule) {\n                let temp = Object.assign({}, data[j])\n                data[j] = data[j + 1]\n                data[j + 1] = temp\n            }\n        }\n    }\n    return data\n}\n\n/**\n * 获取元素\n * 和 jQuery 获取元素一致\n * @param {object}           params\n * @param {string}           params.select\n */\nMy.prototype.$ = function(select) {\n    return document.querySelector(select)\n}\n\n/**\n * 去掉对象中的空数据\n * @param {object}           params\n * @return {object}          params 处理后的对象\n */\nMy.prototype.removeEmptyObjects = function() {\n    for(let key in params) {\n        if(!params[key]) {\n            delete params[key]\n        }\n    }\n    return params\n}\n\n/**\n * 字符串转为数组\n * @param {object}           params\n * @param {string}           params.str // 需要转为数组的字符串\n * @param {number}           params.step // 步数，按它的值进行截取\n * @return {array}           转成数组后的数据\n */\nMy.prototype.strsub =function(params) {\n    let arr = []\n    let length = params.str.length\n\n    if (length <= params.step) {\n        return [params.str]\n    } else {\n        let recursion = function(start, end, step) {\n            let value = params.str.slice(start, end)\n            arr.push(value)\n            if (length - end > step) {\n                recursion(end, end + step, step)\n            } else {\n                let last = params.str.slice(end)\n                arr.push(last)\n            }\n        }\n\n        recursion(0, params.step, params.step)\n    }\n    return arr\n}\n\n/**\n * 无限极分类\n * 菜单导航常用\n * @param {array}            data // [{id: 1, pid: 0, name: &apos;a&apos;}, {id: 2, pid: 1, name: &apos;b&apos;}, {id: 3, pid: 2, name: &apos;c&apos;}, {id: 4, pid: 0, name: &apos;d&apos;}...]\n * @return {array}           处理后的数据: [{id: 1, pid: 0, children[{id: 2, pid: 1, name: &apos;b&apos;, children: [{id: 3, pid: 2, name: &apos;c&apos;}]}]}, {id: 4, pid: 0, name: &apos;d&apos;}...]\n */\nMy.prototype.InfinitePoleClassification = function(data) {\n    let arr = []\n    let ipc = function(obj) {\n        for(let i = 0, length = data.length; i < length; i++) {\n            let item = data[i]\n            if (item.pid === obj.id) {\n                ipc(item)\n                if (obj.children) {\n                    obj.children.push(item)\n                } else {\n                    obj.children = [item]\n                }\n            }\n        }\n        return obj\n    }\n\n    for(let i = 0, length = data.length; i < length; i++) {\n        let item = data[i]\n        if (item.pid === 0) {\n            arr.push(ipc(item))\n        }\n    }\n\n    return arr\n}\n\n/**\n * 实例化\n */\n// var my = new My()\n\n\n```',0,0,0),(131,NULL,29,'MVVM和MVC','什么是MVVM？MVC和MVVM的区别？MVVM框架VUE实现原理？会在这里得到答案',1585120733879,1592036963666,9,2,1,'## 什么是MVVM？\n### 1. MVVM定义\nMVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。【模型】指的是后端传递的数据。【视图】指的是所看到的页面。【视图模型】mvvm模式的核心，它是连接view和model的桥梁。它有两个方向：一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个方向都实现的，我们称之为数据的双向绑定。总结：在MVVM的框架下视图和模型是不能直接通信的。它们通过ViewModel来通信，ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的双向绑定。并且MVVM中的View 和 ViewModel可以互相通信。\nMVVM流程图如下：\n![upload_34226e0cca5dcfb7f8de6f4759573312.jpg](http://47.98.182.149:3001/uploadFile/article/upload_5a1ccdbfeec00d7dfc48bf5f1df7161b.jpg)\n\n## MVC和MVVM的区别？\n### 1. MVC的定义\nMVC是Model-View- Controller的简写。即模型-视图-控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离。‘MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用。由于mvc出现的时间比较早，前端并不那么成熟，很多业务逻辑也是在后端实现，所以前端并没有真正意义上的MVC模式。而我们今天再次提起MVC，是因为大前端的来到，出现了MVVM模式的框架，我们需要了解一下MVVM这种设计模式是如何一步步演变过来的。\n\n### 2. 为什么会有MVVM框架？\n在过去的10年中，我们已经把很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器兼容性问题，出现了很多类库，其中最典型的就是jquery。但是这类库没有实现对业务逻辑的分成，所以维护性和扩展性极差。综上两方面原因，才有了MVVM模式一类框架的出现。比如vue,通过数据的双向绑定，极大了提高了开发效率。\n\n### 3. MVVM框架\nVUE的介绍Vue就是基于MVVM模式实现的一套框架，在vue中：Model:指的是js中的数据，如对象，数组等等。View:指的是页面视图viewModel:指的是vue实例化对象为什么说VUE是一个渐进式的javascript框架, 渐进式是什么意思？1.如果你已经有一个现成的服务端应用，你可以将vue 作为该应用的一部分嵌入其中，带来更加丰富的交互体验;2.如果你希望将更多业务逻辑放到前端来实现，那么VUE的核心库及其生态系统也可以满足你的各式需求（core+vuex+vue-route）。和其它前端框架一样，VUE允许你将一个网页分割成可复用的组件，每个组件都包含属于自己的HTML、CSS、JAVASCRIPT以用来渲染网页中相应的地方。3.如果我们构建一个大型的应用，在这一点上，我们可能需要将东西分割成为各自的组件和文件，vue有一个命令行工具，使快速初始化一个真实的工程变得非常简单（vue init webpack my-project）。我们可以使用VUE的单文件组件，它包含了各自的HTML、JAVASCRIPT以及带作用域的CSS或SCSS。以上这三个例子，是一步步递进的，也就是说对VUE的使用可大可小，它都会有相应的方式来整合到你的项目中。所以说它是一个渐进式的框架。VUE最独特的特性：响应式系统VUE是响应式的（reactive），也就是说当我们的数据变更时，VUE会帮你更新所有网页中用到它的地方。关于这个响应式原理，官方已经讲得很清楚，不懂的同学，可以https://cn.vuejs.org/v2/guide/reactivity.html 查看。\n\n## 主流框架实现双向绑定（响应式）的做法\n### 1. 脏值检查\nangularangular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下： DOM事件，譬如用户输入文本，点击按钮等。( ng-click ) XHR响应事件 ( $http ) 浏览器Location变更事件 ( $location ) Timer事件( $timeout , $interval ) 执行 $digest() 或 $apply()在 Angular 中组件是以树的形式组织起来的，相应地，检测器也是一棵树的形状。当一个异步事件发生时，脏检查会从根组件开始，自上而下对树上的所有子组件进行检查，这种检查方式的性能存在很大问题。\n\n### 2.观察者-订阅者（数据劫持）\nvueObserver 数据监听器，把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用Object.defineProperty()方法把这些属性全部转成setter、getter方法。当data中的某个属性被访问时，则会调用getter方法，当data中的属性被改变时，则会调用setter方法。Compile指令解析器，它的作用对每个元素节点的指令进行解析，替换模板数据，并绑定对应的更新函数，初始化相应的订阅。Watcher 订阅者，作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数。Dep 消息订阅器，内部维护了一个数组，用来收集订阅者（Watcher），数据变动触发notify 函数，再调用订阅者的 update 方法。\n执行流程如下：\n![upload_c65ce55ee5ae72afe96c6b7af29c465a.jpg](http://47.98.182.149:3001/uploadFile/article/upload_00d97e809941a9d50a4ab6d999decd08.jpg)\n\n从图中可以看出，当执行 new Vue() 时，Vue 就进入了初始化阶段，一方面Vue 会遍历 data 选项中的属性，并用 Object.defineProperty 将它们转为 getter/setter，实现数据变化监听功能；另一方面，Vue 的指令编译器Compile 对元素节点的指令进行解析，初始化视图，并订阅Watcher 来更新视图， 此时Wather 会将自己添加到消息订阅器中(Dep),初始化完毕。当数据发生变化时，Observer 中的 setter 方法被触发，setter 会立即调用Dep.notify()，Dep 开始遍历所有的订阅者，并调用订阅者的 update 方法，订阅者收到通知后对视图进行相应的更新。因为VUE使用Object.defineProperty方法来做数据绑定，而这个方法又无法通过兼容性处理，所以Vue 不支持 IE8 以及更低版本浏览器。另外，查看vue原代码，发现在vue初始化实例时， 有一个proxy代理方法，它的作用就是遍历data中的属性，把它代理到vm的实例上，这也就是我们可以这样调用属性：vm.aaa等于vm.data.aaa。好了，关于mvvm设计模式及vue的双向绑定原理就讲到这。\n\n博主声明： 转载这篇文章是因为他写得真的挺好，放到自己的博客里方便自己阅读,如有侵权请联系删除\n转自： https://baijiahao.baidu.com/s?id=1596277899370862119&wfr=spider&for=pc',0,0,0),(132,NULL,1,'HTML-6','学习HTML的第6天（笔记以前的整理）',1585124970335,NULL,2,2,0,'浮动(为了解决块级元素在同一行显示)\n\nfloat:left;|right\n\n特点:\n\n浮动的元素不占位置(脱标)\n\n浮动可以让块级元素在一行上显示\n\n可以进行模式转换(类似于display)行内元素\"行内块元素\"\n\n\n\n作用:\n\n图片文字环绕效果(包裹性)文字的标签被压住了，但是文字没被压住。\n\n\n\n\n\n清除浮动:\n\n1. 在浮动标签后添加一个空标签\n> 清除左右浮动\n\n\n```css\n.clear{\n    clear:both;\n}\n```\n\n浮动的标签\n\n<div class=\"clear\"></div>\n\n\n\n2.给父元素设置overflow:hidden;\n\noverflow:hidden;可以将超出父元素的部分进行隐藏。\n\nvisible 默认值\n\n\n3. 使用伪元素清除浮动(推荐)\n```css\n\n.clearfix::after{\n    content:\" \";\n    height:0;\n    line-height:0;\n    display:block;\n    clear:both;\n    visibility:hidden;\n}\n\n.clearfix::after{\n    zoom:1; /* 兼容IE */\n}\n```\n\n\n\n清除浮动的时机:\n\n父容器没有高度(height=0 也不行)\n\n父容器中所有的子元素都设置了浮动\n\n\n\noverflow: visible; 默认可将超出部分显示\n\noverflow: hidden; 将超出标签部分内容隐藏\n\noverflow: scroll; 设置滚动条(不超出时也有滚动条)\n\noverflow: auto; 自适应(超出时才有滚动条)\n\n## 隐藏滚动条还可以滚动\n\n```css\n\n.box::-webkit-scrollbar {\n    display: none;\n}\n\n```',0,0,0),(133,NULL,1,'HTML-7','学习HTML的第7天',1585125071516,NULL,5,2,0,'静态定位，不能移动位置\n\nposition: static; 默认\n\n\n\n绝对定位:\n\nposition: absolute; 1.当父元素没有设置除静态定位以外的定位时，子元素以页面(body)为参照物移动\n\n\n\n2.当父元素设置了除静态定位以外的定位时，子元素以父元素为参照物移动\n\n\n\n3.绝对定位的元素脱标不占位置\n\n\n\n4.绝对定位可以实现模式转换\n\n\n\n相对定位:\n\nposition:relative;\n\n特点:\n\n1.相对定位元素是以元素原来的位置为参照\n\n2.相对定位的元素占位置\n\n3.不能实现模式转换\n\n\n\n一般情况下要设置子元素绝对定位，父相对定位\n\n\n\n固定定位:\n\nposition:fixed;\n\n1.固定定位的元素始终是以body(浏览器)可视区域为参照物设置定位(始终都能看到)\n\n\n\n2.固定定位的元素脱标不占位置\n\n\n\n3.固定定位的元素可以实现模式转换\n\n\n\nZ-index(重点)\n\n定位元素的特点:\n\n只有(除静态定位)定位的元素才有层级关系\n\n\n\n通过z-index属性改变层级关系\n\n\n\n层级关系特点:\n\n当给一个元素设置了定位，那么该元素默认的层级z-index值是auto(个人认为是:\"0\")\n\n当z-index值相同的情况下，那么最后的定位元素层次要高于前面的定位元素(后来居上)\n\n当z-index值不同的情况下，那么z-index值越大该元素的层级越高。\n\n如果元素的父元素设置了z-index值那么父元素的z-index值越大，那么该元素的层级关系越高\n\n\n\n盒子居中:margin:0 auto; 标准流的盒子居中显示(只针对块级元素有效)\n\n\n\n绝对定位的盒子居中显示: 重点\n\nleft:50%；父元素宽度一半\n\nmargin-left: - ; 元素自己宽度一半\n\n\n\n段落中不能包含标题标签\n\n段落标签中不能包含div\n\n行内元素最好不要包含块级元素\n\n\n\n网页布局规避脱标流:\n\n网页布局优先考虑标准流\n\n然后考虑使用浮动\n\n最后使用定位\n\n元素模式转换必须使用display\n\n\n\n\n\nvertical-align属性介绍\n\ntext-align 水平对齐\n\nvertical-align 垂直对齐\n\n默认行内块元素(img,input),有默认的vertical-align属性值\n\nvertical-align:baseline; 默认值 基线对齐\n\ntop 顶部\n\nmiddle 中部对齐\n\nbottom 底部对齐\n\n也可以用display: block; 来设置对齐\n\n\n\ncss元素可见性\n\noverflow:hidden; 将溢出部分隐藏\n\ndisplay:none; 元素隐藏(不占位置)\n\ndisplay:block; 显示元素\n\nvisibility:hidden; 元素隐藏(占位置)\n\n\n\nlogo内容移除\n\nlogo 一般推荐给a标签设置背景图片\n\nlogo 中a标签最好设置文字(给a标签设置text-index=-999px;)\n\ncolor:transparent; 给字体设置透明颜色\n\n\n\n精灵图:特殊的背景图片(一张包含很多背景图片的图片background-repeat: no-repeat 不平铺)\n\n作用:可以减少请求的次数, 以及可以降低服务器处理压力\n\n\n\nbackground-image: url(qq.png);\n\nbackground-repeat: no-repeat;\n\nbackground-position:-350px -100px; 横纵坐标xy,使用fw切片工具，使用打开方式，选中图片\n\n\n\n用伪元素设置一个细线，在浏览器用看不到\"代码\"\n\n.one:before {\n\ncontent:\" \"\n\nheight:200px;\n\nwidth:1px;\n\ndisplay:block;\n\nbackground-color:pink;\n\n添加绝对定位或者相对定位;\n\n}',0,0,0),(134,NULL,3,'算法','将实用的一些算法，记录起来，方便以后开发',1585125479151,NULL,7,2,0,'### 冒泡\n\n```js\nvar arr = [1, 100, 20, 50, 30, 90, 70]; //反转\n\n// 下面是自己做的冒泡排序\nfor (var i = 0; i < arr.length - 1; i++) {\n    for (var j = 0; j < arr.length - 1 - i; j++) {\n        if (arr[j] < arr[j + 1]) {\n            var temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n        }\n    }\n}\nconsole.log(arr);\n```',0,0,0),(135,NULL,33,'css 样式问题','css 继承性的问题',1585193255717,1588344098803,9,2,0,'\n当发现文字没在想要的区域内时，往往是因为父元素的行高\n解决：子元素继承父元素（祖先元素）的行高，修改当前元素（子元素）的行高即可\n\nhtml继承问题\n元素使用 transform: translate(-50%, -50%); 定位时，不会继承父元素的宽高\n\n---\n\ni 标签不能直接设置旋转，因为旋转的属性只针对块级元素或者行内块元素\n\n```css\n\ni {\n    display: inline-block;\n    transform: rotate(90deg);\n}\n\n```\n---',0,0,0),(136,NULL,38,'使用连接池实现数据实时备份','每个sql语句的执行，都会进行数据备份，这样虽然可以做到数据实时备份，但是也会影响响应速度。再也不会担心sql注入引起的数据丢失了~',1585728845657,NULL,12,2,0,'```js\n// 导入 mysql 包\nconst mysql = require(&apos;mysql&apos;)\nconst fs = require(&apos;fs&apos;)\nconst exec = require(&apos;child_process&apos;).exec\n\n// 连接池连接\nlet pool  = mysql.createPool({\n    host: &apos;localhost&apos;,\n    user: &apos;root&apos;,\n    password: &apos;root&apos;,\n    database: &apos;blog&apos;\n})\n\n// 实现数据备份\nlet today = new Date().getTime()\npool.on(&apos;acquire&apos;, function (connection) {\n    let time = new Date().getTime()\n    // 每隔1个小时删除一次备份数据\n    if (time - today > 1 * 60 * 60 * 1000) {\n        today = time\n        let backupsSqlData = fs.readdirSync(&apos;./backupsSqlData&apos;)\n        // 遍历所有的备份文件\n        backupsSqlData.map((file, key) => {\n            // 留最后一个备份数据\n            if (key < backupsSqlData.length - 1) {\n                // 删除备份文件\n                fs.unlink(`./backupsSqlData/${file}`,(error) => {\n                    if (error) throw error\n                })\n            }\n        })\n    }\n\n    // 数据备份\n    let path = `${__dirname}\\backupsSqlData\\${time}.sql`  \n    let sql = `mysqldump -h127.0.0.1 -P3306 -uroot -proot blog -B > ${path}`\n    exec(sql, (error, stdout, stderr) => {\n        if (error) throw error\n    })\n})\n\n// 将操作数据库的方法暴露出去\nmodule.exports = pool\n\n```',0,0,0),(137,NULL,3,'canvas实现背景鼠标连线动态效果代码','这个是大佬写的，我只是搬运工~',1585816598062,1585846478135,5,2,1,'```html\n\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"Generator\" content=\"EditPlus®\">\n    <meta name=\"Author\" content=\"\">\n    <meta name=\"Keywords\" content=\"\">\n    <meta name=\"Description\" content=\"\">\n    <title>canvas场景连线特效</title>\n    <style type=\"text/css\">\n        * {\n            margin: 0px;\n            padding: 0px;\n        }\n\n        body {\n            background-color: #f4f4f4;\n        }\n    </style>\n</head>\n\n<body>\n    <script type=\"text/javascript\" src=\"./index.js\"></script>\n</body>\n\n</html>\n\n```\n\n```js\n\n(function() {\n    let W, H\n    // canvas元素相关\n    // 创建canvas元素，并设置canvas元素的id\n    var canvas = document.createElement(&apos;canvas&apos;),\n        context = canvas.getContext(&apos;2d&apos;),\n        attr = getAttr()\n    // 设置创建的canvas的相关属性\n    canvas.id = &apos;c_n&apos; + attr.length\n    canvas.style.cssText = &apos;position:fixed;top:0;left:0;z-index:&apos; + attr.z + &apos;;opacity:&apos; + attr.opacity\n    // 将canvas元素添加到body元素中\n    document.getElementsByTagName(&apos;body&apos;)[0].appendChild(canvas)\n    // 该函数设置了canvas元素的width属性和height属性\n    getWindowWH()\n    // onresize 事件会在窗口或框架被调整大小时发生\n    // 此处即为当窗口大小改变时，重新获取窗口的宽高和设置canvas元素的宽高\n    window.onresize = getWindowWH\n    // 该函数会得到引用了本文件的script元素，\n    // 因为本文件中在赋值时执行了一次getScript函数，html文件引用本文件时，本文件之后的script标签还没有被浏览器解释，\n    // 所以得到的script数组中，引用了本文的script元素在该数组的末尾\n    // 该函数的用意为使开发者能直接修改在html中引入该文件的script元素的属性来修改画布的一些属性，画布的z-index，透明度和小方块数量，颜色\n    // 与前面往body元素添加canvas元素的代码配合，当开发者想要使用该特效作为背景时，只需在html文件中添加script元素并引用本文件即可\n    function getAttr() {\n        let scripts = document.getElementsByTagName(&apos;script&apos;),\n            len = scripts.length,\n            script = scripts[len - 1] // v为最后一个script元素，即引用了本文件的script元素\n        return {\n            length: len,\n            z: script.getAttribute(&apos;zIndex&apos;) || -1,\n            opacity: script.getAttribute(&apos;opacity&apos;) || 0.5,\n            color: script.getAttribute(&apos;color&apos;) || &apos;0,0,0&apos;,\n            count: script.getAttribute(&apos;count&apos;) || 99\n        }\n    }\n    // 获得窗口宽高，并设置canvas元素宽高\n    function getWindowWH() {\n        W = canvas.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n        H = canvas.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    }\n    // 生成随机位置的小方块\n    var random = Math.random,\n        squares = [] // 存放小方块\n    // 往squares[]数组放小方块\n    for (let p = 0; p < attr.count; p++) {\n        var squareX = random() * W,\n            // 横坐标\n            squareY = random() * H,\n            // 纵坐标\n            squareXa = 2 * random() - 1,\n            // x轴位移 -1,1\n            squareYa = 2 * random() - 1 // y轴位移\n        squares.push({\n            x: squareX,\n            y: squareY,\n            xa: squareXa,\n            ya: squareYa,\n            max: 6000\n        })\n    }\n    // 生成鼠标小方块\n    var mouse = {\n        x: null,\n        y: null,\n        max: 20000\n    }\n    // 获取鼠标所在坐标\n    window.onmousemove = function(i) {\n        // i为W3C DOM，window.event 为 IE DOM，以实现兼容IE\n        // 不过目前似乎IE已经支持W3C DOM，我用的是IE11，我注释掉下一句代码也能实现鼠标交互效果，\n        // 网上说7/8/9是不支持的，本人没有试验，\n        // 当然加上是没有错的\n        i = i || window.event\n        mouse.x = i.clientX\n        mouse.y = i.clientY\n    }\n    // 鼠标移出窗口后，消除鼠标小方块\n    window.onmouseout = function() {\n        mouse.x = null\n        mouse.y = null\n    }\n    // 绘制小方块，小方块移动(碰到边界反向移动)，小方块受鼠标束缚\n    var animation = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n    function(i) {\n        window.setTimeout(i, 1000 / 45)\n    } // 各个浏览器支持的requestAnimationFrame有所不同，兼容各个浏览器\n    function draw() {\n        // 清除画布\n        context.clearRect(0, 0, W, H)\n        var w = [mouse].concat(squares) // 连接(合并)鼠标小方块数组和其他小方块数组\n        var x, A\n        // square属性表：x，y，xa，ya，max\n        squares.forEach(function(i) {\n            // 实现小方块定向移动\n            i.x += i.xa\n            i.y += i.ya\n            // 控制小方块移动方向\n            // 当小方块达到窗口边界时，反向移动\n            i.xa = i.xa * (i.x > W || i.x < 0 ? -1 : 1)\n            i.ya = i.ya * (i.y > H || i.y < 0 ? -1 : 1)\n            // fillRect前两个参数为矩形左上角的x，y坐标，后两个分别为宽度和高度\n            // 绘制小方块\n            context.fillRect(i.x - 0.5, i.y - 0.5, 1, 1)\n            // 遍历w中所有元素\n            for (let n = 0; n < w.length; n++) {\n                x = w[n]\n                // 如果x与i不是同一个对象实例且x的xy坐标存在\n                if (i !== x && x.x !== null && x.y !== null) {\n                    let xDiff = i.x - x.x // i和x的x坐标差\n                    let yDiff = i.y - x.y // i和x的y坐标差\n                    let distance = xDiff * xDiff + yDiff * yDiff // 斜边平方\n                    if (distance < x.max) {\n                        // 使i小方块受鼠标小方块束缚，即如果i小方块与鼠标小方块距离过大，i小方块会被鼠标小方块束缚,\n                        // 造成 多个小方块以鼠标为圆心，mouse.max/2为半径绕成一圈\n                        if (x === mouse && distance > x.max / 2) {\n                            i.x = i.x - 0.03 * xDiff\n                            i.y = i.y - 0.03 * yDiff\n                        }\n                        A = (x.max - distance) / x.max\n                        context.beginPath()\n                        // 设置画笔的画线的粗细与两个小方块的距离相关，范围0-0.5，两个小方块距离越远画线越细，达到max时画线消失\n                        context.lineWidth = A / 2\n                        // 设置画笔的画线颜色为s.c即画布颜色，透明度为(A+0.2)即两个小方块距离越远画线越淡\n                        context.strokeStyle = &apos;rgba(&apos; + attr.color + &apos;,&apos; + (A + 0.2) + &apos;)&apos;\n                        // 设置画笔的笔触为i小方块\n                        context.moveTo(i.x, i.y)\n                        // 使画笔的笔触移动到x小方块\n                        context.lineTo(x.x, x.y)\n                        // 完成画线的绘制，即绘制连接小方块的线\n                        context.stroke()\n                    }\n                }\n            }\n            // 把i小方块从w数组中去掉\n            // 防止两个小方块重复连线\n            w.splice(w.indexOf(i), 1)\n        })\n        // window.requestAnimationFrame与setTimeout相似，形成递归调用，\n        // 不过window.requestAnimationFrame采用系统时间间隔，保持最佳绘制效率,提供了更好地优化，使动画更流畅\n        // 经过浏览器优化，动画更流畅；\n        // 窗口没激活时，动画将停止，省计算资源;\n        animation(draw)\n    }\n    // 此处是等待0.1秒后，执行一次draw()，真正的动画效果是用window.requestAnimationFrame实现的\n    setTimeout(function() {\n        draw()\n    },\n    100)\n}())\n\n```\n\n站长自述： 好东西值得收藏   ^_^\n转自： https://www.jb51.net/html5/678338.html',0,0,0),(138,NULL,3,'nodejs问题','记录nodejs中容易出现的奇怪问题',1585851360760,NULL,7,2,0,'```js\n\n当请求地址是： `/jurisdiction/list/undefined` 时\n\nrouter.get(&apos;/jurisdiction/list/:distribution&apos;, (req, res) => {\n    // req.params.distribution 获取到的值时这样的 { distribution：&apos;undefined&apos; }\n    // get 请求始终是字符串类型，如果需要做判断则需要注意\n    // 转义一下即可 Number(req.params.distribution)\n})',0,0,0),(139,NULL,3,'this指向','收藏一下，心态好的时候再看，刚刚看了一部分，发现太恐怖了。。。',1586513508717,NULL,3,0,1,'https://www.jianshu.com/p/fb5f900c663d',0,0,0),(142,NULL,43,'GET和POST两种基本请求方法的区别','面试时非常容易问到这个问题，加以记录，便于理解~',1587002199382,NULL,8,0,0,'1. 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。\n2. get传送的数据量较小，不能大于2KB。post传送的数据量较大，在前端方面一般被默认为不受限制，后端有服务器限制（例如nginx配置的限制或者php配置的限制等等）。\n3. get安全性非常低，post安全性较高（因为get请求参数直接暴露在URL上，所以不能用来传递敏感信息）。\n4. GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n5. GET请求只能进行url编码，而POST支持多种编码方式。\n6. GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n7. 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n8. GET参数通过URL传递，POST放在Request body中。\n\n> 最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数\n\n---\n\n### 更加深入的话就要引出另一个大佬了：`HTTP`协议\n\n> HTTP是什么？\n\nHTTP是基于TCP/IP关于数据如何在万维网中通信的协议(也叫超文本传输协议)。\n\n> 如何理解`HTTP`协议\n\n在万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，如果送急件的汽车被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在`车顶上`（url中）以便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在`车厢里`。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。\n\n> 参数大小的限制又是从哪来的呢？\n\n在大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆放货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到。\n\n> GET和POST还有一个重大区别\n\n简单的说：\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n详细的：\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n\n可以理解为：\nGET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。\n\n---\n\n因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？\n\n1. GET与POST都有自己的语义，不能随便混用。\n2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。\n3. 并不是所有的浏览器都会在POST中发送两次包，Firefox就只发送一次。\n\n---\n\n站长自述： 这是一篇非常棒的博文（当然我有一点小改动），小弟不敢冒认，特附下面大佬原文\n原文： https://www.cnblogs.com/logsharing/p/8448446.html\n',0,0,0),(143,NULL,47,'工作中常用模板','为了更加便捷的快速开发，将常用的组件私有化',1588918354598,1590840893866,31,0,0,'### \n\n\n|类型|别名|账号|密码|\n|-|-|-|-|\n|SUP|供应商|13078582333|a123456|\n|CORE|核心企业|15902508050,13925586661|a123456|\n|CHA|供应链|13885169333|a123456|\n\n---\n\n> .env.proxy-fsc\n\n```\n\nNODE_ENV=proxy-fsc\nVUE_APP_PREVIEW=true\nVUE_APP_API_BASE_URL=http://192.168.1.9:8800/fsc-sso\nVUE_APP_API_UPLOAD_URL=http://192.168.1.9:8800/fsc-sso/file/upload_file\nVUE_APP_API_File_URL=http://192.168.1.9:8800/fsc-sso/upload\nVUE_APP_API_BASE_ORIGIN=http://192.168.1.9:8800\nVUE_APP_API_COMMON_BASE_URL=http://192.168.1.41:8091/fsc-sso\nVUE_APP_API_CHA_BASE_URL=http://192.168.1.41:8098/fsc-cha\nVUE_APP_API_CORE_BASE_URL=http://192.168.1.41:8092/fsc-core\nVUE_APP_API_SSO_BASE_URL=http://192.168.1.41:8091/fsc-sso\nVUE_APP_API_SUP_BASE_URL=http://192.168.1.41:8093/fsc-sup\nVUE_APP_API_SYS_BASE_URL=http://192.168.1.41:8099/fsc-sys\n\n```\n\n`https://fsc.zjhgrl.com` 正式域名\n\n\n---\n\n### 获取登录后的用户\n\n```js\ncomputed: {\n  userInfo() {\n    return this.$store.getters.userInfo\n  }\n}\n\n```\n\n---\n\n### 表格\n\n> 固定列 `:scroll=\"{ x: 1500 }\"` 很重要\n\n```html\n<a-table :columns=\"tableData.columns\" :data-source=\"tableData.data\" :pagination=\"false\">\n  <span slot=\"handle\" slot-scope=\"handle, record\">\n    <router-link :to=\"{ name: &apos;companyAccountSettingsBase&apos;, query: { id: record.key  } }\">查看详情</router-link>\n  </span>\n</a-table>\n```\n\n```js\n\ntableData: {\n  columns: [\n    {\n      title: &apos;序号&apos;,\n      dataIndex: &apos;number&apos;,\n      key: &apos;number&apos;,\n      scopedSlots: { customRender: &apos;number&apos; },\n      customRender: (value, row, index) => `${(this.pageNum-1)*10+index+1}`\n    },\n    {\n      title: &apos;对账日&apos;,\n      dataIndex: &apos;reconciliationDate&apos;,\n      key: &apos;reconciliationDate&apos;,\n      customRender: (text, record) => {\n        // 自定义返回的内容\n        if (text === &apos;TRUE&apos;) {\n	  return <a-icon type=\"check-circle\" />\n	} else {\n	  return <a-icon type=\"exclamation-circle\" />\n	}\n      }\n    },\n    {\n      title: &apos;还款日&apos;,\n      dataIndex: &apos;repaymentDate&apos;,\n      key: &apos;repaymentDate&apos;\n    },\n    {\n      title: &apos;期数&apos;,\n      dataIndex: &apos;numberOfPeriods&apos;,\n      key: &apos;numberOfPeriods&apos;\n    },\n    {\n      title: &apos;付息金额&apos;,\n      dataIndex: &apos;payInterest&apos;,\n      key: &apos;payInterest&apos;\n    },\n    {\n      title: &apos;付款状态&apos;,\n      dataIndex: &apos;status&apos;,\n      key: &apos;status&apos;\n    },\n    {\n      title: &apos;操作&apos;,\n      dataIndex: &apos;handle&apos;,\n      key: &apos;handle&apos;,\n      scopedSlots: { customRender: &apos;handle&apos; }\n    }\n  ],\n  data: [\n    {\n      key: &apos;1&apos;,\n      reconciliationDate: &apos;2019年8月15日&apos;,\n      repaymentDate: &apos;2019年8月19日&apos;,\n      numberOfPeriods: &apos;1&apos;,\n      payInterest: 145861,\n      status: &apos;按期付款&apos;\n    }\n  ]\n}\n\n```\n\n\n### 分页\n\n```html\n<a-table\n  :columns=\"tableData.columns\"\n  :dataSource=\"tableData.data\"\n  :loading=\"tableData.loading\"\n  @change=\"handleTableChange\"\n  :pagination=\"tableData.pagination\"\n>\n</a-table>\n```\n\n```js\nexport default {\n  data () {\n    tableData: {\n      loading: false,\n      pagination: {\n        total: 0,\n        current: 1,\n        pageSize: 1\n      },\n      columns, // 自己定义\n      data // 自己定义\n    }\n  },\n  created () {\n    this.handleTableChange()\n  },\n  methods () {\n    // 分页改变时执行\n    handleTableChange (pagination) {\n      if (pagination && pagination.current) {\n        this.tableData.pagination.current = pagination.current\n      }\n      this.getListData()\n    },\n    // 获取列表数据\n    getListData () {\n      const postData = {\n        queryParams: {},\n        number: this.tableData.pagination.current,\n        size: this.tableData.pagination.pageSize\n      }\n      this.tableData.loading = true\n\n      PageService.orderpurchasepurchasePageUsingPost({\n        params: postData\n      }).then(res => {\n        if (res.code === &apos;S&apos;) {\n          this.tableData.pagination.total = res.data.totalElements\n          console.log(this.pagination, &apos;this.pagination&apos;)\n          const data = res.data.content\n          this.tableData.data = data.map((item, key) => {\n            item.key = key\n            return item\n          })\n          this.tableData.loading = false\n        }\n      })\n    }\n  }\n}\n```\n\n---\n\n### 空页面\n\n```vue\n<template>\n  <page-view :title=\"false\" :class=\"&apos;fix-ie&apos;\">\n    <div slot=\"headerContent\">\n      <div class=\"title\">利息结清</div>\n    </div>\n  </page-view>\n</template>\n\n<script>\n  import { PageView } from &apos;@/layouts&apos;\n\n  export default {\n    name: &apos;ProcessingOrder&apos;,\n    data () {\n      return {}\n    },\n    components: { PageView }\n  }\n</script>\n\n<style scoped>\n\n</style>\n```\n\n---\n\n### 返回上一级\n\n```\n<img src=\"~@/assets/back.png\" class=\"back\" @click=\"backHandler\" />\n\nmethods: {\n  backHandler () {\n    this.$router.go(-1)\n  }\n}\n```\n\n---\n\n### 公共盒子\n\n```\n<template>\n  <public-container title=\"累积结息\" :border=\"true\">\n    <div slot=\"header-right\"></div>\n  <public-container>\n</template>\n\n<script>\nimport PublicContainer from &apos;@/components/PublicContainer/index&apos;\n\nexport default {\n  components: {\n    PublicContainer\n  }\n}\n</script>\n\n```\n\n---\n\n### 数据请求\n\n```js\nimport { PageService } from &apos;@/services/common/index&apos;\n\nexport default {\n  methods: {\n    // 获取项目列表\n    getProjectList () {\n      PageService.projectinfoPageUsingPost({\n        params: {\n          queryParams: {}\n        }\n      }).then(res => {\n        if (res.code === &apos;S&apos;) {\n          const data = res.data.content\n          this.proList = data\n        }\n      })\n    }\n  }\n}\n```\n\n---\n\n### 字典\n\n```html\n<a-select v-model=\"form.operationType\" placeholder=\"请选择操作类型\">\n  <a-select-option\n    v-for=\"item in dictList(&apos;FlowHandleType&apos;)\"\n    :value=\"item.value\"\n    :key=\"item.value\"\n  >\n    {{ item.describe }}\n  </a-select-option>\n</a-select>\n```\n\n\n```js\nimport { mapGetters } from &apos;vuex&apos;\nexport default {\n  methods: {\n    ...mapGetters([&apos;dicts&apos;, &apos;config&apos;]),\n    dictList (dictType) {\n      return (this.dicts()[dictType] || {}).childList || []\n    },\n    statusText (value) {\n      const statusList = this.dictList(&apos;OrderState&apos;)\n      const data = statusList.filter((item) => {\n        if (item.value === value) {\n          return item\n        }\n      })\n      return data[0].describe\n    }\n  }\n}\n// this.dictList(&apos;FlowHandleType&apos;) // 可以直接当作计算属性来使用\n```\n\n---\n\n### 文件上传\n\n```html\n<a-form-item>\n  <a-input\n    type=\"hidden\"\n    v-decorator=\"[&apos;juridicalPersonIdCardFrontImage&apos;]\"\n    placeholder=\"请上传法人身份身份证人像面\"\n  />\n</a-form-item>\n<a-form-item>\n  <a-input\n    type=\"hidden\"\n    v-decorator=\"[&apos;juridicalPersonIdCardBackImage&apos;]\"\n    placeholder=\"请上传法人身份身份证国徽面\"\n  />\n</a-form-item>\n<a-form-item :labelCol=\"formItemLayout.labelCol\" :wrapperCol=\"formItemLayout.wrapperCol\" label=\"上传法人代表身份证\">\n  <a-col :md=\"24\" :lg=\"12\" style=\"display: flex;\">\n    <oss-upload\n      :keyPrex=\"&apos;auth-compnay/&apos;\"\n      :btnStyle=\"&apos;width:215px;height:120px;position: absolute;top:0;left:0;opacity: 0;&apos;\"\n      :btnType=\"&apos;solid&apos;\"\n      :uploadIcon=\"&apos;plus&apos;\"\n      :btnText=\"&apos;身份证正面&apos;\"\n      @imgFile=\"imgFileIDFrontCard\"\n      @uploadResult=\"uploadJuridicalPersonIdCardFrontImageResult\"\n      :uploadUrl=\"this.config()[&apos;upload_url&apos;]\"\n    ></oss-upload>\n    <div class=\"preview-con\" style=\"width: 220px;height: 125px;border: 1px solid gainsboro;\">\n      <div v-show=\"isShowIDCardFrontBtn\">\n        <a-icon\n          type=\"plus\"\n          style=\"font-size: 24px;display: block;margin: 30px auto 10px auto;\"\n        />\n        <p style=\"text-align: center;\">身份证正面</p>\n      </div>\n      <div class=\"preview\" v-if=\"form.getFieldValue(&apos;juridicalPersonIdCardFrontImage&apos;)\">\n        <div\n          class=\"img-c\"\n          v-if=\"!imgShow3\"\n          :key=\"form.getFieldValue(&apos;juridicalPersonIdCardFrontImage&apos;)\"\n          v-loadImg=\"[form.getFieldsValue(), &apos;juridicalPersonIdCardFrontImage&apos;, {w: juridicalPersonIdCardFrontImageWidth, h: juridicalPersonIdCardBackImageHeight}]\"\n        >\n          <a-icon type=\"loading\" />\n        </div>\n      </div>\n    </div>\n  </a-col>\n  <a-col :md=\"24\" :lg=\"12\" style=\"display: flex;\">\n    <oss-upload\n      :keyPrex=\"&apos;auth-compnay/&apos;\"\n      :btnStyle=\"&apos;width:215px;height:120px;position: absolute;top:0;left:0;opacity: 0;&apos;\"\n      :btnType=\"&apos;solid&apos;\"\n      :uploadIcon=\"&apos;plus&apos;\"\n      :btnText=\"&apos;身份证反面&apos;\"\n      @imgFile=\"imgFileIDBackCard\"\n      @uploadResult=\"uploadJuridicalPersonIdCardBackImageResult\"\n      :uploadUrl=\"this.config()[&apos;upload_url&apos;]\"\n    ></oss-upload>\n    <div\n      class=\"preview-con\"\n      style=\"width: 220px;height: 125px;border: 1px solid gainsboro;margin-left: 10px;\"\n    >\n      <div v-show=\"isShowIDCardBackBtn\">\n        <a-icon\n          type=\"plus\"\n          style=\"font-size: 24px;display: block;margin: 30px auto 10px auto;\"\n        />\n        <p style=\"text-align: center;\">身份证反面</p>\n      </div>\n      <div class=\"preview\" v-if=\"form.getFieldValue(&apos;juridicalPersonIdCardBackImage&apos;)\">\n        <div\n          class=\"img-c\"\n          v-if=\"!imgShow4\"\n          :key=\"form.getFieldValue(&apos;juridicalPersonIdCardBackImage&apos;)\"\n          v-loadImg=\"[form.getFieldsValue(), &apos;juridicalPersonIdCardBackImage&apos;, {w: juridicalPersonIdCardBackImageWidth, h: juridicalPersonIdCardBackImageHeight}]\"\n        >\n          <a-icon type=\"loading\" />\n        </div>\n      </div>\n    </div>\n  </a-col>\n</a-form-item>\n```\n\n```js\nexport default {\n  methods: {\n    // 身份证正面回显\n    async imgFileIDFrontCard (file) {\n      this.imgShow3 = false\n      this.getImgWidthHeight(file, &apos;身份证正面&apos;)\n      const res = await CertifiedService.imageRecognitionIdCardFrontUsingPost({\n        file\n      })\n\n      const data = res.data\n      if (data) {\n        // 如果根据企业名称获取到法定代表人\n        if ((this.form.getFieldsValue() || {}).juridicalPersonName) {\n          if (data.name !== (this.form.getFieldsValue() || {}).juridicalPersonName) {\n            this.$message.warning(&apos;图片格式不合格或上传身份证与营业执照或法定代表人不符，请重新上传！&apos;)\n            this.isShowIDCardFrontBtn = true\n            this.form.setFieldsValue({\n              juridicalPersonIdCardFrontImage: &apos;\n            })\n            return\n          }\n        }\n        this.form.setFieldsValue({\n          juridicalPersonName: data.name,\n          juridicalPersonIdCardNo: data.idNo\n        })\n        if (this.form.getFieldValue(&apos;juridicalPersonName&apos;)) {\n          this.isDisabledJuridicalPersonName = true\n        }\n        if (this.form.getFieldValue(&apos;juridicalPersonIdCardNo&apos;)) {\n          this.isDisabledJuridicalPersonIdCardNo = true\n        }\n      } else {\n        this.$message.warning(res.message)\n        this.isShowIDCardFrontBtn = true\n        this.form.setFieldsValue({\n          juridicalPersonIdCardFrontImage: &apos;\n        })\n      }\n    },\n    // 获取图片宽高\n    getImgWidthHeight (file, flag) {\n      const that = this\n      const fileReader = new FileReader()\n      fileReader.readAsDataURL(file) // 根据图片路径读取图片\n      fileReader.onload = function (e) {\n        const base64 = this.result\n        const img = new Image()\n        img.src = base64\n        img.onload = function () {\n          if (img.naturalWidth > 215) {\n            const ratio = img.naturalWidth / 215\n            const ratioHeight = `${img.naturalHeight / ratio}px`\n            switch (flag) {\n              case &apos;营业执照&apos;:\n                that.businessLicenseImageHeight = ratioHeight\n                break\n              case &apos;开户许可证&apos;:\n                that.accountOpeningPermitImageHeight = ratioHeight\n                break\n            }\n          } else if (img.naturalWidth < 215 && img.naturalHeight > 120) {\n            const ratio = img.naturalHeight / 120\n            const ratioWidth = `${img.ratioWidth / ratio}px`\n            switch (flag) {\n              case &apos;营业执照&apos;:\n                that.businessLicenseImageWidth = ratioWidth\n                break\n              case &apos;开户许可证&apos;:\n                that.accountOpeningPermitImageWidth = ratioWidth\n                break\n            }\n          } else {\n            const actualWidth = `${img.naturalWidth}px`\n            const actualHeight = `${img.naturalHeight}px`\n            switch (flag) {\n              case &apos;营业执照&apos;:\n                that.businessLicenseImageWidth = actualWidth\n                that.businessLicenseImageHeight = actualHeight\n                break\n              case &apos;开户许可证&apos;:\n                that.accountOpeningPermitImageWidth = actualWidth\n                that.accountOpeningPermitImageHeight = actualHeight\n                break\n            }\n          }\n        }\n      }\n      sessionStorage.setItem(&apos;busLicImgWidth&apos;, that.businessLicenseImageWidth)\n      sessionStorage.setItem(&apos;busLicImgHeight&apos;, that.businessLicenseImageHeight)\n      sessionStorage.setItem(&apos;accOpePerImgWidth&apos;, that.accountOpeningPermitImageWidth)\n      sessionStorage.setItem(&apos;accOpePerImgHeight&apos;, that.accountOpeningPermitImageHeight)\n    },\n    uploadJuridicalPersonIdCardFrontImageResult (data) {\n      var that = this\n      that.form.setFieldsValue({\n        juridicalPersonIdCardFrontImage: data.fileNo\n      })\n      this.isShowIDCardFrontBtn = false\n    },\n  }\n}\n```',0,0,0),(144,NULL,43,'vue 传参细节','params和qurery的区别',1588919118140,NULL,6,0,0,'> 注意：如果提供了 path，params 会被忽略。下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path\n\n```js\nconst userId = &apos;123&apos;\nrouter.push({ name: &apos;user&apos;, params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// 这里的 params 不生效\nrouter.push({ path: &apos;/user&apos;, params: { userId }}) // -> /user\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: &apos;register&apos;, query: { plan: &apos;private&apos; }})\n```\n\n[官网](https://router.vuejs.org/zh/guide/essentials/navigation.html)',0,0,0),(145,NULL,3,'元素拖动','很多情景都需要用到元素拖动，为了提高开发效率，写了一个模板，便于查看',1589253313300,1589384308586,6,0,0,'```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .chapter {\n            width: 150px;\n            height: 150px;\n            border-radius: 50%;\n            line-height: 150px;\n            text-align: center;\n            background-color: pink;\n        }\n\n        .s-left {\n            width: 200px;\n            height: 1000px;\n            padding: 20px;\n            border: 1px solid #ddd;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"s-left fl\" id=\"chapter-box\">\n        <div class=\"chapter\">章</div>\n        <div class=\"chapter\">章2</div>\n        <div class=\"chapter\">章3</div>\n        <div class=\"chapter\">章4</div>\n    </div>\n    <script>\n        let My = function() {\n            this.isDown = false\n            this.eleInfo = null\n            this.ele = null\n            this.scrollTop = 0\n            this.x = 0\n            this.y = 0\n\n            this.init()\n        }\n        \n        My.prototype.init = function() {\n            this.mousedown()\n            this.mousemove()\n            this.mouseup()\n            this.scroll()\n        }\n\n        // 元素按下\n        My.prototype.mousedown = function() {\n            let parent = document.querySelector(&apos;#chapter-box&apos;)\n            parent.addEventListener(&apos;mousedown&apos;, e => {\n                if (e.target.className.includes(&apos;chapter&apos;)) {\n                    document.body.style.cursor = &apos;pointer&apos;\n                    this.ele = e.target\n                    this.ele.style.position = &apos;absolute&apos;\n                    let cloneEle = this.ele.cloneNode(true)\n                    parent.appendChild(cloneEle)\n                    this.eleInfo = cloneEle.getBoundingClientRect()\n                    this.isDown = true\n                }\n            })\n        }\n\n        // 鼠标移动\n        My.prototype.mousemove = function() {\n            document.addEventListener(&apos;mousemove&apos;, e => {\n                if (this.isDown) {\n                    this.x = e.x\n                    this.y = e.y\n                    this.move()\n                }\n            })\n        }\n\n        // 元素抬起\n        My.prototype.mouseup = function() {\n            document.addEventListener(&apos;mouseup&apos;, e => {\n                this.isDown = false\n                document.body.style.cursor = &apos;default&apos;\n            })\n        }\n\n        // 元素滚动\n        My.prototype.scroll = function() {\n            document.addEventListener(&apos;scroll&apos;, e => {\n                this.scrollTop = document.documentElement.scrollTop\n                this.move()\n            })\n        }\n\n        // 元素移动\n        My.prototype.move = function() {\n            if (this.ele && this.isDown) {\n                this.ele.style.top = this.y - this.eleInfo.height / 2 + this.scrollTop + &apos;px&apos;\n                this.ele.style.left = this.x - this.eleInfo.width / 2 + &apos;px&apos;\n            }\n        }\n        \n        new My()\n    </script>\n</body>\n</html>',0,0,0),(146,NULL,29,'组件传值','记忆不好，只能用这个来记了~',1589335900906,1589379795519,5,0,0,'# 父组件给子组件传值\n\n- 在子组件中加入 props 属性 [&apos;count&apos;]\n- count 就相当于子组件内部的一个属性\n- 父组件 需要给子组件传值 <num :count=\"c\"></num>\n\n\n## 子组件\n\n```vue\n\n<template>\n  <div>\n    <button>+</button>\n    <input v-model=\"count\">\n    <button>-/button>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  props: [&apos;count&apos;]\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n\n## 父组件\n\n```vue\n\n<template>\n  <div id=\"app\">\n    <!-- 数据放在子组件中 -->\n    <num :count=\"c\"></num>\n  </div>\n</template>\n\n<script>\nimport num from &apos;@/components/num&apos;;\n\nexport default {\n  name: &apos;App&apos;,\n  data() {\n    return {\n      c: 1\n    }\n  },\n  components: {\n    num\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n\n\n# 子组件给父组件传值\n\n## 父组件\n\n```vue\n\n<template>\n  <div id=\"app\">\n    购物车\n    <br />\n    <index @numchange=\"nc\" :gg=\"c\"></index>\n    {{ c }}\n  </div>\n</template>\n\n<script>\nimport index from &apos;@/components/index/index&apos;\n\nexport default {\n  name: &apos;App&apos;,\n  data() {\n    return {\n      c: 20\n    }\n  },\n  components: {\n    index\n  },\n  methods: {\n    nc(num) { // 带上参数实现父子组件双向数据绑定\n      this.c = num\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n\n```\n\n\n## 子组件\n\n```text\n\n注意: 触发的事件\n\n```\n\n```vue\n\n<template>\n    <div>\n        <input @click=\"numadd\" type=\"button\" value=\"+\">\n        <input type=\"text\" v-model=\"num\">\n        <input @click=\"numsub\" type=\"button\" value=\"-\">\n    </div>\n</template>\n\n<script>\nexport default {\n  props: [&apos;gg&apos;], // vue 不建议直接修改它的值\n  data() {\n    return {\n      num: &apos;\n    }\n  },\n  created() {\n    this.num = this.gg\n  },\n  methods: {\n    numadd() {\n      this.num++ // 别忘了加 this\n      // vue给我们实现的一套自定义事件的机制 让我们能 触发一个自定义事件 \n      // 给当前组件添加一个事件\n      this.$emit(&apos;numchange&apos;, this.num) // 第二个参数实现父子组件双向数据绑定\n    },\n    numsub() {\n      this.num--\n      // 给当前组件增加一个事件\n      this.$emit(&apos;numchange&apos;, this.num)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n\n\n\n# 不相关组件传值\n\n$on     监听-先监听再触发\n$emit   触发\n\n```text\n\n事件是属于某个对象的\n监听的对象和触发的对象必须一致  // 所以需要导入一个js文件->文件中创建一个 vue 实例\n\n```\n\n\n## 从另一文件中导 入 vue 实例\n\n```js\n\nimport Vue from &apos;vue&apos;\n\nconst vueObj = new Vue()\n\nexport default vueObj\n\n```\n\n\n## 在 b 中注册事件\n\n```vue\n\n<template>\n    <div>\n        b\n        <input @keyup=\"handleKeyup\" v-model=\"gg\" type=\"text\">\n    </div>\n</template>\n\n<script>\nimport vueObj from &apos;@/components/utils/communications&apos;\n\nexport default {\n  data() {\n    return {\n      gg: &apos;\n    }\n  },\n  methods: {\n    handleKeyup() {\n      vueObj.$emit(&apos;change&apos;, this.gg)\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n\n```\n\n## 在 a 中监听事件\n\n```\n\n<template>\n    <div>\n        a\n        <br />\n        {{ heihei }}\n    </div>\n</template>\n\n<script>\nimport vueObj from &apos;@/components/utils/communications&apos;\n\nexport default {\n  data() {\n    return {\n      heihei: &apos;\n    }\n  },\n  created() {\n    vueObj.$on(&apos;change&apos;, (num) => {\n      this.heihei = num\n    })\n  }\n}\n</script>\n\n<style>\n</style>\n\n```',0,0,0),(147,NULL,3,'js 加载问题','图片等资源类型的标签需要特别注意，在还没有加载完毕时是获取不到它的资源信息的，如宽高，但是可以获取它的DOM',1589426725339,1597035976158,6,0,0,'```js\n\nconst imageEle = this.$refs.bgImage\n// const imageInfo = imageEle.getBoundingClientRect() 在这里获取不到元素的宽高，但是可以获取到x,y...\nimageEle.addEventListener(&apos;load&apos;, e => {\n	const imageInfo = imageEle.getBoundingClientRect()\n	const canvas = this.$refs.canvas\n	const canvasInfo = canvas.getBoundingClientRect()\n	const ctx = canvas.getContext(&apos;2d&apos;)\n	ctx.drawImage(imageEle, 0, 0, imageInfo.width, imageInfo.height, 0, 0, imageInfo.width, imageInfo.height)\n})\n\n```\n\n```\n\n页面进行渲染的时候，时无法操作页面的\n\n例如： vue 将请求返回的数据赋值到data中进行页面渲染时，无法操作页面跳转、滚动等（当页面渲染的数据比较大的时候，会导致页面出现卡顿的效果），可以使用数据懒加载解决\n\n```',0,0,0),(148,NULL,32,'按需引入','提示网页新能',1589528531506,1589528618212,2,0,0,'### echarts\n\n// 引入 ECharts 主模块\nimport echarts from &apos;echarts/lib/echarts&apos;\n// 引入柱状图\nimport &apos;echarts/lib/chart/line&apos;\n// 引入提示框和标题组件\nimport &apos;echarts/lib/component/tooltip&apos;\nimport &apos;echarts/lib/component/title&apos;\n\n> 可以通过`series`里的`type`查看需要引入的模块\n\n[官网](https://echarts.apache.org/zh/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts)\n[按需引入模块详情](https://github.com/apache/incubator-echarts/blob/master/index.js)\n\n---',0,0,0),(149,NULL,47,'工作里的路由','斗帝强者恐怖如斯',1589697129496,1590205648188,11,0,0,'#### 第一步\n\n> 开启所以权限\n\ncompanyfsc-pcsrcstoremodulesuser.js\n\n// TODO 开发时可在此处指定userType来加载不同的路由\n// res.data.userType = &apos;CORE&apos;\n// 建议在env文件中指定环境变量的方式\nif ([&apos;proxy-dev&apos;, &apos;proxy-fsc&apos;, &apos;development&apos;].indexOf(process.env.NODE_ENV) !== -1 && process.env.VUE_APP_USER_TYPE) {\n  // res.data.userType = process.env.VUE_APP_USER_TYPE\n}\n\n---\n\n#### 第二步\ncompanyfsc-pcsrcstoremodulescommonpermission.js\n\n> 使用全部路由\n\n```js\n\n// TODO 暂时使用admin放行\n  if ([&apos;proxy-dev&apos;, &apos;proxy-fsc&apos;, &apos;development&apos;].indexOf(process.env.NODE_ENV) !== -1 || roleCodes.indexOf(&apos;admin&apos;) !== -1) {\n    // accessedRouters = filterAsyncRouter(cloneDeep(asyncRouterMap), getters.userInfo.userType)\n    accessedRouters = filterAsyncRouter(cloneDeep(asyncRouterMap), getters.userInfo.userType)\n    accessedRouters = cloneDeep(asyncRouterMap) // 使用全部路由\n    console.log(asyncRouterMap, &apos;asyncRouterMap&apos;)\n  } else {\n    accessedRouters = [\n      {\n        path: &apos;/&apos;,\n        name: &apos;index&apos;,\n        component: BasicLayout,\n        meta: { title: &apos;首页&apos; },\n        redirect: &apos;/welcome&apos;,\n        children: filterArray(allmenus, &apos;index&apos;)\n      }\n    ]\n  }',0,0,0),(150,NULL,34,'vue-代码块','用户片段-常用vue模板或者叫代码块，总之一切为了效率而生...',1590201799865,1593312331960,10,0,0,'```\n{\n	// Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and \n	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \n	// same ids are connected.\n	// Example:\n	\"Print to console\": {\n		\"prefix\": \"bvue\",\n		\"body\": [\n			\"<template>\",\n				\"	<div>\",\n					\"		$1test\", // 	 代表tab制表符，尤其是在2个空格和4个空格切换时，尤为高效\n				\"	</div>\",\n			\"</template>\",\n			\"\",\n			\"<script>\",\n			\"export default {\",\n				\"	name: &apos;test&apos;\",\n			\"}\",\n			\"</script>\",\n			\"\",\n			\"<style lang=\"scss\" scoped>\",\n			\"</style>\",\n			\"\"\n		],\n		\"description\": \"vue template\"\n	}\n}\n\n```',0,0,0),(151,NULL,46,'符号积累','可能相当有用的东西，积累记录，以备不时之需~',1590201996286,NULL,8,0,0,'	 tab制表符\n\n 换行符\n\r 回车符\n 退格符',0,0,0),(152,NULL,47,'工作笔记','记住逻辑',1590205617308,1590283736633,14,0,0,'1. ab合同，核心企业不能发起，但是可以预览，可以根据类型判断\n2. \n```\nSTRING(1, \"字符串\"), // 把item.fieldType==1 改为 item.fieldType==STRING\nDICT(2, \"字典\"),\nDATE(5, \"日期\"),\nDATE_TIME(6, \"日期时间\"),\nIMAGE(30, \"图片\"),\nWORD(40, \"个人账户\"),\nPDF(45, \"个人账户\"),\n```\n\n---\n\n### 2020-5-24  nl 项目\n\nhttp://192.168.20.57:8800/company/base/newinvitations  手机号码验证 17588709050 未通过  猜测应该是正则写得有问题',0,0,0),(161,NULL,38,'echarts','优秀的echarts示例',1591272744534,1591275580824,7,0,0,'### 圆角环形图\n\n```js\noption = {\n    title: {\n    text: &apos;$5.349&apos;,\n    textStyle: {\n      color: &apos;#01c4a3&apos;,\n      fontSize: 60\n    },\n    subtext: &apos;Balance&apos;,\n    subtextStyle: {\n      color: &apos;#909090&apos;,\n      fontSize: 30\n    },\n    itemGap: -10, // 主副标题距离\n    left: &apos;center&apos;,\n    top: &apos;center&apos;\n  },\n  angleAxis: {\n    max: 100, // 满分\n    clockwise: false, // 逆时针\n    // 隐藏刻度线\n    axisLine: {\n      show: false\n    },\n    axisTick: {\n      show: false\n    },\n    axisLabel: {\n      show: false\n    },\n    splitLine: {\n      show: false\n    }\n  },\n  radiusAxis: {\n    type: &apos;category&apos;,\n    // 隐藏刻度线\n    axisLine: {\n      show: false\n    },\n    axisTick: {\n      show: false\n    },\n    axisLabel: {\n      show: false\n    },\n    splitLine: {\n      show: false\n    }\n  },\n  polar: {\n    center: [&apos;50%&apos;, &apos;50%&apos;],\n    radius: &apos;100%&apos; //图形大小\n  },\n  series: [\n      {\n        type: &apos;bar&apos;,\n        data: [\n            {\n                name: &apos;作文得分&apos;,\n                value: 25,\n                itemStyle: {\n                    normal: {\n                      color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [{\n                        offset: 0,\n                        color: &apos;#ff0000bf&apos;\n                      }, {\n                        offset: 1,\n                        color: &apos;#ff0000bf&apos;\n                      }])\n                    }\n                },\n            }\n        ],\n        coordinateSystem: &apos;polar&apos;,\n        roundCap: true,\n        barWidth: 40,\n        barGap: &apos;-100%&apos;, // 两环重叠\n        z: 4,\n      },\n      {\n        type: &apos;bar&apos;,\n        data: [\n            {\n                name: &apos;作文得分&apos;,\n                value: 45,\n                itemStyle: {\n                    normal: {\n                      color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [{\n                        offset: 0,\n                        color: &apos;#000000&apos;\n                      }, {\n                        offset: 1,\n                        color: &apos;#0acfa1&apos;\n                      }])\n                    }\n                },\n            }\n        ],\n        coordinateSystem: &apos;polar&apos;,\n        roundCap: true,\n        barWidth: 40,\n        barGap: &apos;-100%&apos;, // 两环重叠\n        z: 3,\n      },\n        {\n        type: &apos;bar&apos;,\n        data: [\n            {\n                name: &apos;作文得分&apos;,\n                value: 75,\n                itemStyle: {\n                    normal: {\n                      color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [{\n                        offset: 0,\n                        color: &apos;#aaf14f&apos;\n                      }, {\n                        offset: 1,\n                        color: &apos;#0acfa1&apos;\n                      }])\n                    }\n                },\n            }\n        ],\n        coordinateSystem: &apos;polar&apos;,\n        roundCap: true,\n        barWidth: 40,\n        barGap: &apos;-100%&apos;, // 两环重叠\n        z: 2,\n      },\n      { // 灰色环\n        type: &apos;bar&apos;,\n        data: [{\n          value: 100,\n          itemStyle: {\n            color: &apos;#e2e2e2&apos;,\n            shadowColor: &apos;rgba(0, 0, 0, 0.2)&apos;,\n            shadowBlur: 5,\n            shadowOffsetY: 2\n          }\n        }],\n        coordinateSystem: &apos;polar&apos;,\n        roundCap: true,\n        barWidth: 40,\n        barGap: &apos;-100%&apos;, // 两环重叠\n        z: 1\n      }\n    ]\n};\n\n```\n\n转自：  https://blog.csdn.net/z291493823/article/details/103502767\n\n\n```js\noption = {\n    tooltip: {\n        trigger: &apos;item&apos;,\n        show: true,\n        formatter: &apos;+{c}%&apos;\n    },\n    axisPointer: { show: false },\n    xAxis: [{\n        type: &apos;category&apos;,\n        data: [&apos;$10&apos;,&apos;$20&apos;,&apos;$30&apos;,&apos;$40&apos;,&apos;$50&apos;],\n        axisLine: {\n            lineStyle: {\n                color: \"#999\"\n            }\n        }\n    }],\n    toolbox: {\n    },\n    yAxis: [\n        {\n            type: &apos;value&apos;,\n            maxInterval: 100,\n            minInterval: 25,\n            splitLine: {\n                lineStyle: {\n                    type: &apos;dashed&apos;,\n                    color: &apos;#DDD&apos;\n                }\n            },\n            axisLabel: {\n                show: true,  \n                interval: &apos;auto&apos;,  \n                formatter: &apos;{value} %&apos;\n            },\n            splitNumber: 4,\n            axisLine: {\n                show: false,\n                lineStyle: {\n                    color: \"#333\"\n                },\n            },\n            nameTextStyle: {\n                color: \"#999\"\n            },\n            splitArea: {\n                show: false\n            }\n        }\n    ],\n    series: [{\n        name: &apos;课时&apos;,\n        type: &apos;line&apos;,\n        data: [0,25,20,36,23,85],\n        lineStyle: {\n            normal: {\n                width: 8,\n                color: {\n                    type: &apos;linear&apos;,\n\n                    colorStops: [{\n                        offset: 0,\n                        color: &apos;#A9F387&apos; // 0% 处的颜色\n                    }, {\n                        offset: 1,\n                        color: &apos;#48D8BF&apos; // 100% 处的颜色\n                    }],\n                    globalCoord: false // 缺省为 false\n                },\n                shadowColor: &apos;rgba(72,216,191, 0.3)&apos;,\n                shadowBlur: 10,\n                shadowOffsetY: 20\n            }\n        },\n        itemStyle: {\n            normal: {\n                color: &apos;#fff&apos;,\n                borderWidth: 10,\n                /*shadowColor: &apos;rgba(72,216,191, 0.3)&apos;,\n                shadowBlur: 100,*/\n                borderColor: \"#A9F387\"\n            }\n        },\n        smooth: true\n    }]\n};\n```\n\n转自： https://gallery.echartsjs.com/editor.html?c=xHOkmzzOG9',0,0,0),(162,NULL,3,'js实现图片本地预览功能','为了开发方便，故转载以下文章',1591421388267,NULL,9,0,1,'```html\n<script>\n    var input =  document.querySelector(\"input\");\n \n    //当选择完成图片之后调用\n    input.onchange = function(){\n        //1. 拿到fileinput里面的文件, 这个file是一个file对象， file对象不能直接展示的\n        var file =input.files[0];\n        console.log(file);\n \n        //2. 读取文件，成功img标签可以直接使用的格式\n        //FileReader类就是专门用来读文件的\n        var reader = new FileReader();\n \n        //3. 开始读文件\n        //readAsDataURL: dataurl它的本质就是图片的二进制数据， 进行base64加密后形成的一个字符串， 这个字符串可以直接作用img标签的图片资源使用\n \n        reader.readAsDataURL(file);\n \n        //4. 因为文件读取是一个耗时操作， 所以它在回调函数中，才能够拿到读取的结果\n        reader.onload = function() {\n            console.log(reader.result);\n            //直接使用读取的结果\n            document.querySelector(\"img\").src = reader.result;\n        }\n        document.querySelector(\"img\").src = file;\n    }\n \n</script>\n```\n\n————————————————\n版权声明：本文为CSDN博主「苦逼的小白」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/txw0415/article/details/80458533',0,0,0),(163,NULL,3,'方法导入','方便查阅',1591872903085,NULL,4,0,0,'```js\n// 注意 a 文件的方式 1，不能和b文件同时存在一个文件里\n// a 文件\n// 方式1\nmodule.exports.money = (value, params) => {\n    consoe.log(123)\n}\n\n// 方式2\nexport function money (value, params) {\n\n// b 文件\n// 使用\nimport { money } from &apos;./index.js&apos;;\n```\n\n---\n\n```js\n// a 文件\nmodule.exports = {\n    name: &apos;abc&apos;,\n    age: 18,\n    fn: function (params) {\n        console.log(params)\n    }\n}\n\n// b 文件\nconst test = require(&apos;./b.js&apos;)\ntest.fn(&apos;什么鬼？&apos;)\n\n```',0,0,0),(164,NULL,43,'面试题整理','为了光明和正义，哈哈~',1592036000101,NULL,10,0,0,'1. 简单说一下mvc 和 mvvm\n2. vue 生命周期\n3. 请求写在哪一个声明周期中\n    很多人喜欢写在mounted里，但是我喜欢写在created里，当然如果请求回来的数据需要操作DOM那就得写在mounted里了，比如echarts\n4. 上一个项目做的是什么\n5. 上一家公司干了多久\n6. 单项数据绑定和双向数据绑定\n\n\n7. 有哪几种解决异步请求的方式\n8. 当后端没有给出接口时，怎么调试页面\n9. 有哪几种定位\n10. 有哪几种请求方式\n11. get和post的请求方式有什么区别\n12. 兼容哪些浏览器\n13. 怎么提高项目的加载速度\n14. async 打包成es5会是什么样子的\n15. 样式权重\n    继承的值<标签选择器<类选择器<ID选择器<行内选择器<!important\n16. 解决冒泡的方式有哪几种\n\n\n18. 继承有哪几种方式\n19. 对于闭包的理解\n20. this 指向问题\n    箭头函数，构造函数指向的是实例...\n21. 构造函数的继承有什么有点和缺点\n22. 谈一谈cookie和本地存储\n23. 页面优化\n    + css 放在顶部，js放在底部\n    + 尽可能的使用原生的api\n    + 页面懒加载\n    + js，css,图片打包\n    + 操作DOM时尽量选择id选择器\n    + cdn\n    + 减少请求次数\n    + 减少cookie的数据量，使用token代替\n24. 前端安全性\n\n\n25. css 实现省略号有哪些属性\n26. 关于http协议\n27. 处理异步有哪几种方式\n28. poimses 和 async 的优缺点\n    + 简洁\n    + 错误处理\n    + 条件语句\n    + 调试\n29. es6的遍历有哪几种方式\n    map filter\n30. bfc\n31. dislay 的值有哪些\n32. 模块化开发\n\n\n33. 简单的说一下const和let\n    let 声明的变量的作用域是块级的；局部作用域\n    let 不能重复声明已存在的变量；\n    let 有暂时死区，不会被提升。\n\n34. 简单的说一下http协议\n35. 说一下面向对象或者面向过程\n\n\n36. vue中的data为什么是函数\n\n37. 节流和防抖（今日头条）',0,0,0),(166,NULL,39,'element-table','element组件的表格模板',1592975247906,NULL,4,0,0,'```html\n\n<template>\n    <div class=\"buyer-list\">\n        <el-form ref=\"form\" :inline=\"true\" :model=\"form\" label-width=\"80px\">\n            <el-form-item label=\"登录账号:\" prop=\"account\">\n                <el-input v-model=\"form.account\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"用户姓名:\" account=\"realName\">\n                <el-input v-model=\"form.realName\"></el-input>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"submitForm\">搜索</el-button>\n            </el-form-item>\n            <el-form-item>\n                <el-button @click=\"resetForm\">清空</el-button>\n            </el-form-item>\n        </el-form>\n        <el-table\n            :data=\"tableData\"\n            style=\"width: 100%\"\n        >\n            <el-table-column prop=\"account\" label=\"登录账号\"></el-table-column>\n            <el-table-column prop=\"tenantId\" label=\"所属租户\"></el-table-column>\n            <el-table-column prop=\"name\" label=\"用户昵称\"></el-table-column>\n            <el-table-column prop=\"realName\" label=\"用户姓名\"></el-table-column>\n            <el-table-column prop=\"roleId\" label=\"所属角色\"></el-table-column>\n            <el-table-column prop=\"deptId\" label=\"所属部门\"></el-table-column>\n            <el-table-column prop=\"phone\" label=\"手机号码\"></el-table-column>\n            <el-table-column label=\"操作\">\n                <template slot-scope=\"scope\">\n                    <el-button @click=\"handleClick(scope.row)\" type=\"text\" size=\"small\">\n                        <i class=\"el-icon-view\"></i>\n                        <span>查看</span>\n                    </el-button>\n                    <el-button @click=\"handleClick(scope.row)\" type=\"text\" size=\"small\">\n                        <i class=\"el-icon-edit\"></i>\n                        <span>编辑</span>\n                    </el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n        <!-- 分页开始 -->\n        <el-pagination\n            @size-change=\"handleSizeChange\"\n            @current-change=\"handleCurrentChange\"\n            :current-page.sync=\"pagination.current\"\n            :page-sizes=\"[10,20,30,40]\"\n            :page-size.sync=\"pagination.size\"\n            layout=\"total, sizes, prev, pager, next, jumper\"\n            :total=\"pagination.total\"\n            style=\"text-align:right;margin-top:20px;\"\n        >\n        </el-pagination>\n        <!-- 分页结束 -->\n    </div>\n</template>\n\n<script>\nimport { getBuyerData } from \"@/api/userManagement/buyerList\";\n\nexport default {\n    data() {\n        return {\n			form: {\n				account: &apos;\n			},\n			tableData: [\n               {\n\n               }\n			],\n			pagination: {\n                size: 10,\n				current: 1,\n				total: 0\n			}\n        }\n	},\n	created() {\n		this.getTableData()\n	},\n    methods: {\n        submitForm() {\n			this.pagination.current = 1\n            this.getTableData()\n        },\n        resetForm() {\n            this.$refs.form.resetFields()\n        },\n        async getTableData() {\n            const params = {\n                account: this.form.account,\n				realName: this.form.realName,\n				userType: 2,\n				size: this.pagination.size,\n				current: this.pagination.current\n			}\n			try {\n				const { data } = await getBuyerData(params)\n				if (data.code === 200) {\n					this.tableData = data.data.records\n					this.pagination.total = data.data.total\n				}\n			} catch (err) {\n				console.log(err, &apos;err&apos;)\n			}\n		},\n		// 改变每页显示多少条\n        handleSizeChange(val){\n            this.pagination.size = val\n			this.pagination.current = 1\n            this.getTableData()\n		},\n		// 改变页数\n		handleCurrentChange(val){\n			this.pagination.current = val\n			this.getTableData()\n		},\n    }\n}\n</script>\n\n<style lange=\"less\" scoped>\n.buyer-list {\n    padding: 20px;\n    background-color: #fff;\n}\n</style>\n\n```',0,0,0),(167,NULL,39,'国际化','国际化之后，表单验证有问题，使用computed解决',1593323150492,1593323229363,3,0,0,'```js\n\ncomputed: {\n	rules() {\n		const confirmPassword = (rule, value, callback) => {\n			if (value) {\n				if (value === this.form.password) {\n					callback()\n				} else {\n					callback(new Error(this.$t(&apos;register.confirmPasswordRules&apos;)))\n				}\n			} else {\n				callback(new Error(this.$t(&apos;register.confirmPasswordPla&apos;)))\n			}\n		}\n		return {\n			name: [\n				{ required: true, message: this.$t(&apos;register.usernamePla&apos;), trigger: &apos;change&apos; }\n			],\n			password: [\n				{ required: true, message: this.$t(&apos;register.passwordPla&apos;), trigger: &apos;change&apos; }\n			],\n			confirmPassword: [\n				{ required: true, validator: confirmPassword, trigger: &apos;change&apos; }\n			],\n			phone: [\n				{ required: true, message: this.$t(&apos;register.phonePla&apos;), trigger: &apos;change&apos; }\n			],\n			email: [\n				{ required: true, message: this.$t(&apos;register.emailPla&apos;), trigger: &apos;change&apos; }\n			],\n			sms: [\n				{ required: true, message: this.$t(&apos;register.smsPla&apos;), trigger: &apos;change&apos; }\n			],\n			userType: [\n				{ required: true, message: this.$t(&apos;register.userTypePla&apos;), trigger: &apos;change&apos; }\n			],\n			agreement: [\n				{ required: true, message: this.$t(&apos;register.agreementRules&apos;), trigger: &apos;change&apos; }\n			]\n		}\n	}\n},',0,0,0),(168,NULL,46,'http状态码','把工作中遇到的状态码记录起来~',1593331296396,1598248357268,10,0,0,'200 请求成功\n\n---\n\n301 永久重定向\n302 临时重定向\n307 类似302，使用`GET`请求重定向\n\n---\n\n400  前端传入的参数和后端获取参数的形式不统一造成的\n\naxios有两种方式：\n1. data\n2. params\n\n---\n\n401  请求的接口需要登陆后才能请求\n\n---\n\n403 Forbidden\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是HTTP协议中的一个状态码(Status Code)。可以简单的理解为没有权限访问此站。该状态表示服务器理解了本次请求但是拒绝执行该任务，该请求不该重发给服务器。在HTTP请求的方法不是“HEAD”，并且服务器想让客户端知道为什么没有权限的情况下，服务器应该在返回的信息中描述拒绝的理由。在服务器不想提供任何反馈信息的情况下，服务器可以用404 Not Found代替403 Forbidden。\n\n作者：码上自动化\n链接：https://www.jianshu.com/p/d6252144bf1a\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n---\n404 找不到请求的资源\n\n---\n\n413  请求内容过大\n\n---\n\n\n`net::ERR_CONNECTION_REFUSED`\n\n原因：可能没有启动接口服务，或者接口服务挂了\n\n---',0,0,0),(169,NULL,51,'nginx 跨域配置','配置nginx解决跨域，以及访问打包后的项目',1593573908983,NULL,2,0,0,'```md\n\nserver {\n    listen          3000;\n    server_name     localhost;\n    root            D:projectamazon-evaluation-webdist; // lunx 的地址用 /\n    index           index.html;\n\n    location / {\n        try_files  $uri $uri/ @router;\n        index      index.html;\n        #proxy_pass http://127.0.0.1:8080;\n    }\n\n    location @router {\n        rewrite ^.*$ /index.html last;\n    }\n\n    # 有时候在 api 后面添加 / 是很必须的\n    location /api/ {\n        proxy_pass http://www.51mazon.com:10000/;\n    }\n    location /robot {\n        proxy_pass http://api.qingyunke.com/api.php;\n    }\n}\n\n```\n\n---\n\nvue 里的配置\n\n```md\n\ndevServer: {\n  // 端口配置\n  port: 1888,\n  // 反向代理配置\n  proxy: {\n    &apos;/api&apos;: {\n      target: &apos;http://www.51mazon.com:10000&apos;,\n      ws: true,\n      pathRewrite: {\n        &apos;^/api&apos;: &apos;/&apos;\n      }\n    }\n  }\n}\n```',0,0,0),(170,NULL,52,'uni-app 开发问题','记录uni-app开发时遇到的问题',1594260669546,NULL,3,0,0,'#### 1. 修改组件内部样式\n\n`/deep/`\n\n/deep/.uni-navbar-btn-icon-left span {\n	font-weight: bold;\n	font-size: 36rpx;\n}\n\n#### 2. 自定义导航，导致导航太往上\n\n```scss\n\npadding-top: var(--status-bar-height); // 把状态栏的位置从前景部分挤出来\n\n```\n\n\n#### 3. 点击输入框页面被软键盘遮挡问题\n\n```json\n\"pages\": [ // pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages\n	{\n		\"path\" : \"pages/release/release\",\n		\"style\": {\n			\"app-plus\": {\n				\"softinputMode\": \"adjustResize\" // 设置这个即可\n			}\n		}\n	},\n]\n\n```\n\n\n\n\n',0,0,0),(171,NULL,39,'分页模板','为了方便快速开发，写了个简易的表格分页模板',1596551336347,NULL,2,0,0,'```html\n<el-pagination class=\"ta-right mt20\" @size-change=\"handleSizeChange\" @current-change=\"clickPage\" :current-page=\"pagination.currentPage\"\n	:page-sizes=\"pagination.pageSizes\" :page-size=\"pagination.pageSize\" layout=\"total, sizes, prev, pager, next, jumper\"\n	:total=\"pagination.total\">\n</el-pagination>\n```\n\n```js\n\npagination: {\n	total: 0,\n	currentPage: 1,\n	pageSize: 10,\n	pageSizes: [5, 10, 15, 20],\n},\n\n// 每页条数改变时执行\nhandleSizeChange (val) {\n	// 更新每页条数\n	this.pagination.pageSize = val\n	// 获取分页数据并渲染\n	this.loadData()\n},\n// 点击页码\nclickPage (val) {\n	// 更新当前页码\n	this.pagination.currentPage = val\n	// 获取分页数据并渲染\n	this.loadData()\n},',0,0,0),(172,NULL,3,'js偶然性问题','脑子不在服务区时，容易犯的低级错误',1597036417851,NULL,0,0,0,'#### scroll\n\n起因：页面元素的父级元素已经设置了高度，但是没有出现滚动条\n\n结果：给页面元素添加滚动事件，但是就是没有效果\n\n原因：我给元素设置了高度，出现了滚动条，但是出现的却是父元素的滚动条，没有在意，于是导致了，滚动事件无效\n\n解决：给元素设置`高度`后必须得设置`overflow`\n\n---',0,0,0),(173,NULL,53,'名言警句','所谓名言，极有可能是杨某某自创...',1597051372092,NULL,0,0,0,'别对一件事情抱有太大的希望，也别对某件事情太过于悲观，生活总是出人意料\n\n---\n\n',0,0,0),(174,NULL,39,'tabs','解决tabs，首次载入时没有选中当前tab的问题',1597310466231,NULL,0,0,0,'可以使用计算属性，或者使用v-if解决',0,0,0),(175,NULL,38,'druid 简单的实际应用','记录工作中遇到的问题，方便开发及参考',1597654226391,1597654365362,0,0,0,'官网：`https://druid.apache.org/docs/latest/design/index.html`\n|标签|维度|\n|-|-|\n|性别|男、女|\n|品牌|huawei、honor、oppo、vivo、samsung、xiaomi、其他|\n|城市等级|一线城市、二线城市、三线城市、四线城市、五线城市、未知|\n|年龄|1-17岁、18-29岁、30-40岁、41-50岁、51岁以上|\n\n---\n> 代码实现\n\n```js\nexport default [\n    {\n        \"field\": \"男\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"gender\",\n            \"value\": \"男\"\n        }\n    },\n    {\n        \"field\": \"女\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"gender\",\n            \"value\": \"女\"\n        }\n    },\n    {\n        \"field\": \"1-17岁\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"bound\",\n            \"dimension\": \"age\",\n            \"lower\": \"1\",\n            \"upper\": \"17\"\n        }\n    },\n    {\n        \"field\": \"18-29岁\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"bound\",\n            \"dimension\": \"age\",\n            \"lower\": \"18\",\n            \"upper\": \"29\"\n        }\n    },\n    {\n        \"field\": \"30-40岁\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"bound\",\n            \"dimension\": \"age\",\n            \"lower\": \"30\",\n            \"upper\": \"40\"\n        }\n    },\n    {\n        \"field\": \"41-50岁\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"bound\",\n            \"dimension\": \"age\",\n            \"lower\": \"41\",\n            \"upper\": \"50\"\n        }\n    },\n    {\n        \"field\": \"51岁以上\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"bound\",\n            \"dimension\": \"age\",\n            \"lower\": \"51\",\n        }\n    },\n    {\n        \"field\": \"一线城市\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"city_level\",\n            \"value\": \"一线城市\"\n        }\n    },\n    {\n        \"field\": \"二线城市\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"city_level\",\n            \"value\": \"二线城市\"\n        }\n    },\n    {\n        \"field\": \"三线城市\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"city_level\",\n            \"value\": \"三线城市\"\n        }\n    },\n    {\n        \"field\": \"四线城市\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"city_level\",\n            \"value\": \"四线城市\"\n        }\n    },\n    {\n        \"field\": \"五线城市\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"city_level\",\n            \"value\": \"五线城市\"\n        }\n    },\n    {\n        \"field\": \"未知\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"city_level\",\n            \"value\": \"\"\n        }\n    },\n    {\n        \"field\": \"huawei\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"brand\",\n            \"value\": \"huawei\"\n        }\n    },\n    {\n        \"field\": \"honor\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"brand\",\n            \"value\": \"honor\"\n        }\n    },\n    {\n        \"field\": \"oppo\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"brand\",\n            \"value\": \"oppo\"\n        }\n    },\n    {\n        \"field\": \"vivo\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"brand\",\n            \"value\": \"vivo\"\n        }\n    },\n    {\n        \"field\": \"samsung\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"brand\",\n            \"value\": \"samsung\"\n        }\n    },\n    {\n        \"field\": \"xiaomi\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"source\": \"yyb_abtest_guid_data\",\n        \"filter\": {\n            \"type\": \"selector\",\n            \"dimension\": \"brand\",\n            \"value\": \"xiaomi\"\n        }\n    },\n    {\n        \"field\": \"其他\",\n        \"source\": \"yyb_abtest_guid_data\",\n        \"dependents\": {\n            \"type\": 1,\n            \"fields\": [&apos;active_1st&apos;]\n        },\n        \"filters\": [\n            {\n                \"type\":\"not\",\n                \"field\": {\n                    \"type\": \"selector\",\n                    \"dimension\": \"brand\",\n                    \"value\": \"huawei\",\n                    \"extractionFn\": null\n                }\n            },\n            {\n                \"type\":\"not\",\n                \"field\": {\n                    \"type\": \"selector\",\n                    \"dimension\": \"brand\",\n                    \"value\": \"honor\",\n                    \"extractionFn\": null\n                }\n            },\n            {\n                \"type\":\"not\",\n                \"field\": {\n                    \"type\": \"selector\",\n                    \"dimension\": \"brand\",\n                    \"value\": \"oppo\",\n                    \"extractionFn\": null\n                }\n            },\n            {\n                \"type\":\"not\",\n                \"field\": {\n                    \"type\": \"selector\",\n                    \"dimension\": \"brand\",\n                    \"value\": \"vivo\",\n                    \"extractionFn\": null\n                }\n            },\n            {\n                \"type\":\"not\",\n                \"field\": {\n                    \"type\": \"selector\",\n                    \"dimension\": \"brand\",\n                    \"value\": \"samsung\",\n                    \"extractionFn\": null\n                }\n            },\n            {\n                \"type\":\"not\",\n                \"field\": {\n                    \"type\": \"selector\",\n                    \"dimension\": \"brand\",\n                    \"value\": \"xiaomi\",\n                    \"extractionFn\": null\n                }\n            },\n        ],\n    },\n]\n```\n\n',0,0,0);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bookmark`
--

DROP TABLE IF EXISTS `bookmark`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookmark` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT,
  `name` text NOT NULL COMMENT '书签名称',
  `class_name` varchar(30) NOT NULL DEFAULT '第一层级' COMMENT '书签分类名称',
  `pid` smallint(6) NOT NULL DEFAULT '0' COMMENT '父id',
  `link` text COMMENT '链接',
  `weight` int(11) NOT NULL DEFAULT '0' COMMENT '权重',
  `icon` varchar(30) NOT NULL DEFAULT '' COMMENT 'icon',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=206 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookmark`
--

LOCK TABLES `bookmark` WRITE;
/*!40000 ALTER TABLE `bookmark` DISABLE KEYS */;
INSERT INTO `bookmark` VALUES (3,'手册','第一层级',0,'',0,'bookmark-shiyongshouce-copy'),(5,'iconFont','第一层级',0,NULL,0,'bookmark-tubiao-'),(6,'插件素材','第一层级',0,NULL,0,'bookmark-wulianwang-'),(7,'框架||插件','第一层级',0,NULL,0,'bookmark-zuzhikuangjia'),(8,'下载','第一层级',0,NULL,0,'bookmark-xiazai'),(9,'前端之巅','第一层级',0,NULL,0,'bookmark-RectangleCopy'),(10,'nodeJs','第一层级',0,NULL,0,'bookmark-Nodejs'),(11,'blog参考','第一层级',0,NULL,0,'bookmark-blogger'),(12,'开发工具','第一层级',0,NULL,0,'bookmark-gongju'),(13,'css样式参考','第一层级',0,NULL,0,'bookmark-CSS'),(14,'效果','第一层级',0,NULL,0,'bookmark-wenzixiaoguo-copy'),(15,'服务器','第一层级',0,'null',0,'bookmark-yun'),(17,'Vue','第一层级',0,NULL,0,'bookmark-vue'),(18,'常用','第一层级',0,NULL,0,''),(19,'mysql','第一层级',0,NULL,0,'bookmark-mysql'),(21,'工作','第一层级',0,NULL,0,'bookmark-gongzuotai'),(22,'面试','第一层级',0,NULL,0,'bookmark-gongzuomianshi'),(23,'图片参考','第一层级',0,NULL,0,'bookmark-tupian'),(24,'觅元素','图片参考',23,'http://www.51yuansu.com/',0,''),(25,'包图网','图片参考',23,'https://ibaotu.com/shipin/7-0-0-5048-3-1.html',0,''),(26,'千图网','图片参考',23,'https://www.58pic.com/tupian/bannerbeijing-801-0-default-0-1-banner%e8%83%8c%e6%99%af-0_2_0__0_0_0-.html',0,''),(27,'标点狗-logo','图片参考',23,'https://www.logoko.com.cn/index.php?m=content&c=index&a=design',0,''),(28,'页面缓存','前端之巅',9,'http://www.jsjtt.com/webkaifa/HTML/41.html',0,''),(29,'Node.js 手册','nodeJs',10,'https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_stat_path_callback',0,''),(30,'express 中文网','框架||插件',7,'https://www.expressjs.com.cn/starter/installing.html',0,''),(31,'菜鸟教程','前端之巅',9,'https://www.runoob.com/',0,''),(32,'小程序','框架||插件',7,'https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html',0,''),(33,'腾讯云','服务器',15,'https://cloud.tencent.com/login?s_url=https%3A%2F%2Fconsole.cloud.tencent.com%2F',0,''),(34,'webpack 中文网','框架||插件',7,'https://www.webpackjs.com/concepts/',0,''),(35,'MDN','手册',3,'https://developer.mozilla.org/zh-CN/',0,''),(36,'JSDoc','手册',3,'http://shouce.jb51.net/jsdoc/tags-param.html',0,''),(37,'博文','第一层级',0,NULL,0,''),(38,'快速搭建一个简单server','博文',37,'https://www.cnblogs.com/itfantasy/p/6043111.html',0,''),(39,'axios','手册',3,'https://github.com/axios/axios',0,''),(40,'markdown','手册',3,'https://www.cnblogs.com/liugang-vip/p/6337580.html',0,''),(41,'http 常见错误码','博文',37,'https://blog.csdn.net/w894819398/article/details/51161241',0,''),(42,'css 作用域','手册',3,'https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html',0,''),(43,'Vue-Router','手册',3,'https://router.vuejs.org/zh/',0,''),(44,'layDate-时间插件','框架||插件',7,'https://www.layui.com/laydate/',0,''),(45,'Layui','手册',3,'https://www.layui.com/doc/',0,''),(46,'mavonEditor','框架||插件',7,'https://github.com/hinesboy/mavonEditor',0,''),(47,'codelf-命名规范','手册',3,'https://github.com/hinesboy/mavonEditor',0,''),(48,'formidable-上传文件','框架||插件',7,'https://www.npmjs.com/package/formidable',0,''),(49,'判断JavaScript对象为null或者属性为空','博文',37,'https://blog.csdn.net/jiang_my/article/details/76283719',0,''),(50,'函数式编程','手册',3,'https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html#%E4%B8%BA%E4%BD%95%E9%92%9F%E7%88%B1%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91',0,''),(51,'sass','手册',3,'https://www.sasscss.com/',0,''),(52,'pug','手册',3,'https://www.pugjs.cn/api/getting-started.html',0,''),(53,'sass+compass生成css的使用方法（总结）','博文',37,'https://blog.csdn.net/wjq_xxq/article/details/67657118',0,''),(54,'下载文件','blog参考',11,'https://www.cnblogs.com/EnSnail/p/9018946.html',0,''),(55,'Nuxt开发经验分享，让你踩少点坑！','博文',37,'https://www.jianshu.com/p/840169ba92e6',0,''),(56,'网页特殊符号(HTML字符实体)大全','博文',37,'https://blog.csdn.net/u013778905/article/details/53177042',0,''),(57,'TypeScript','手册',3,'https://ts.xcatliu.com/basics/built-in-objects',0,''),(58,'canvas手册','手册',3,'https://www.runoob.com/w3cnote/html5-canvas-intro.html',0,''),(59,'阿里云','服务器',15,'https://account.aliyun.com/login/login.htm?oauth_callback=http%3A%2F%2Fnetcn.console.aliyun.com%2Fcore%2Fdomain%2Flist%3Fspm%3D5176.2020520137.1002.d10domain.Cd09bk',0,''),(60,'Ubuntu命令卸载软件','博文',37,'https://blog.csdn.net/luckydog612/article/details/80877179',0,''),(61,'css','第一层级',37,NULL,0,''),(62,'CSS3 线性渐变(linear-gradient)奇效详解','css',61,'http://www.myexception.cn/HTML-CSS/1988895.html',0,''),(63,'动画--过渡属性 transition-property','css',61,'https://www.cnblogs.com/siwy/p/4907026.html',0,''),(64,'CSS3 渐变（Gradients','css',61,'https://www.runoob.com/css3/css3-gradients.html',0,''),(65,'10个demo示例学会CSS3 radial-gradient径向渐变','css',61,'https://www.zhangxinxu.com/wordpress/2017/11/css3-radial-gradient-syntax-example/',0,''),(66,'Iconfont-阿里巴巴矢量图标库','iconFont',5,'https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2',0,''),(67,'Font Awesome','iconFont',5,'https://fontawesome.dashgame.com/',0,''),(68,'分享10款效果惊艳的HTML5图片特效','网站素材',6,'https://www.html5tricks.com/10-html5-image-effect.html',0,''),(69,'图片轮播-初期','插件素材',6,'http://sc.chinaz.com/jiaoben/tupiandaima.html',0,''),(70,'图片压缩','插件素材',6,'https://tinypng.com/',0,''),(71,'表白动画','插件素材',6,'http://sc.chinaz.com/jiaobendemo.aspx?downloadid=14318151356878',0,''),(72,'懒人图库','图片参考',23,'http://www.lanrentuku.com/js/qita.html',0,''),(73,'H5插件','插件素材',6,'https://www.html5tricks.com/',0,''),(74,'H5炫酷动画','插件素材',6,'https://www.html5tricks.com/16-html5-animations.html',0,''),(75,'animate.css','手册',3,'https://www.17sucai.com/pins/demo-show?id=9411',0,''),(76,'input placeholder属性 样式修改(颜色,大小,位置)','css',61,'https://www.cnblogs.com/ooo0/p/6141764.html',0,''),(77,'CSS3 transform 属性','手册',3,'https://www.w3school.com.cn/cssref/pr_transform.asp',0,''),(78,'H5动画','插件素材',6,'https://www.html5tricks.com/9-html5-css3-person-animation.html',0,''),(79,'HTML5 canvas实现雪花飘落特效','blog参考',11,'https://www.jb51.net/html5/437750.html',0,''),(80,'JQ背景','插件素材',6,'http://www.jqueryfuns.com/texiao-18-0-1',0,''),(81,'html5 WebGL图形背景动画特效','插件素材',6,'https://www.17sucai.com/pins/demo-show?id=27241',0,''),(82,'css3绘制圆形的行星背景动画特效','插件素材',6,'https://www.17sucai.com/pins/26501.html',0,''),(83,'在线制作ico图标','开发工具',12,'http://www.bitbug.net/',0,''),(84,'摄图网','图片参考',23,'https://www.17sucai.com/',0,''),(85,'Three.js制作一个基本的飞行3D场景','插件素材',6,'http://www.jq22.com/jquery-info17198',0,''),(86,'拓展||问题','第一层级',0,NULL,0,''),(87,'javascript阻止scroll事件多次执行的思路及实现','拓展||问题',86,'https://www.jb51.net/article/42972.htm',0,''),(88,'怎样在电脑上下载哔哩哔哩的视频？','blog参考',11,'https://www.zhihu.com/question/41367609',0,''),(89,'HTTP与HTTPS握手的那些事','blog参考',11,'https://www.cnblogs.com/lovesong/p/5186200.html',0,''),(90,'es6','第一层级',37,NULL,0,''),(91,'理解 let','es6',90,'https://zhuanlan.zhihu.com/p/28140450',0,''),(92,'JavaScript 操作 Cookie','博文',37,'https://www.cnblogs.com/Darren_code/archive/2011/11/24/Cookie.html',0,''),(93,'linux','第一层级',37,NULL,0,''),(94,'ubuntu 16.04 更换源','linux',93,'https://blog.csdn.net/jjmjeffrey/article/details/74999907',0,''),(95,'HTTP常见的状态码','手册',3,'https://www.cnblogs.com/hjxcode/p/5663830.html',0,''),(96,'js','第一层级',37,NULL,0,''),(97,'javascript中加var和不加var的区别 你真的懂吗','js',96,'https://www.jb51.net/article/77585.htm',0,''),(98,'Mock.js 生成随机数据，拦截 Ajax 请求','框架||插件',7,'https://github.com/nuysoft/Mock/wiki/Getting-Started',0,''),(99,'NodeJS服务总是崩溃的解决办法','nodeJs',10,'https://blog.csdn.net/xiunai78/article/details/40378965',0,''),(100,'CDN缓存那些事','博文',37,'https://blog.csdn.net/wangxin1982314/article/details/51050206',0,''),(101,'处理 Vue 单页面应用 SEO 的另一种思路','Vue',17,'https://www.cnblogs.com/tiedaweishao/p/7493971.html',0,''),(102,'NodeJS项目迁移兼Ubuntu下NodeJS环境部署','nodeJs',10,'https://www.cnblogs.com/bergwhite/p/7290036.html',0,''),(103,'五大主流浏览器及四大内核','博文',37,'https://blog.csdn.net/yuyanjing123456789/article/details/78689595',0,''),(104,'前端面试-浏览器渲染机制','面试',22,'https://blog.csdn.net/cde7070/article/details/50619853',0,''),(105,'Ubuntu16.04安装最新版nodejs','服务器',15,'https://blog.csdn.net/well2049/article/details/79138045',0,''),(106,'Ubuntu16.04 + Nginx 配置虚拟主机','服务器',15,'https://blog.csdn.net/forrest_gao/article/details/74522337',0,''),(107,'pm2 日常使用','服务器',15,'https://www.cnblogs.com/wangrongxiang/p/7909885.html',0,''),(108,'生活','第一层级',0,NULL,0,''),(109,'查号码','生活',108,'https://haoma.baidu.com/query',0,''),(110,'通过Jquery判断页面元素是否在浏览器的可视区域内','js',96,'https://blog.csdn.net/huileiforever/article/details/38872411',0,''),(111,'table中tr间距的设定','css',61,'https://blog.csdn.net/yuanzhugen/article/details/46426957',0,''),(112,'自定义input[type=\"checkbox\"]的样式','css',61,'https://www.cnblogs.com/xinjie-just/p/7302020.html',0,''),(113,'点击按钮实现文件上传（web前端），ajax提交formdata','js',96,'https://blog.csdn.net/Imagine_Dragon/article/details/79504608',0,''),(114,'如何免费的让网站启用HTTPS','服务器',15,'https://blog.csdn.net/weixin_36841920/article/details/79437759',0,''),(115,'滑动拼图验证码体验','插件素材',6,'https://dun.163.com/trial/jigsaw',0,''),(116,'windows系统下nodejs安装、环境配置及删除NPM全局配置','博文',37,'https://www.cnblogs.com/fighxp/p/7411608.html',0,''),(117,'HTML特殊字符的html、js、css写法汇总','css',61,'https://blog.csdn.net/realghost/article/details/11613649',0,''),(118,'JS 用正则表达式，验证密码包含数字和字母的方法','js',96,'https://www.cnblogs.com/SweetMemory/p/6323323.html',0,''),(119,'CSS counter计数器(content目录序号自动递增)详解','css',61,'https://www.zhangxinxu.com/wordpress/2014/08/css-counters-automatic-number-content/',0,''),(120,'$.ajax()方法详解','js',96,'https://www.cnblogs.com/tylerdonet/p/3520862.html',0,''),(121,'Bootstrap','手册',3,'https://www.bootcss.com/',0,''),(122,'BootCDN','手册',3,'https://www.bootcdn.cn/',0,''),(123,'npm','手册',3,'https://www.npmjs.com/',0,''),(124,'Express','手册',3,'https://www.expressjs.com.cn/',0,''),(125,'vue.js','手册',3,'https://cn.vuejs.org/',0,''),(126,'微信公众平台','手册',3,'https://mp.weixin.qq.com/',0,''),(127,'element-ui','手册',3,'https://element.eleme.cn/#/zh-CN/component/quickstart',0,''),(128,'swiper','手册',3,'https://www.swiper.com.cn/',0,''),(129,'echarts','手册',3,'https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all',0,''),(130,'highlight.js','手册',3,'https://highlightjs.org/',0,''),(131,'jQuery - 图片叠加旋转木马轮播切换效果','效果',14,'https://blog.csdn.net/weixin_41170223/article/details/78976338',0,''),(132,'atom','开发工具',12,'https://atom.io/',0,''),(133,'wangeditor','插件素材',6,'http://www.wangeditor.com/',0,''),(134,'nuxtjs','手册',3,'https://zh.nuxtjs.org/guide',0,''),(135,'Ant Design Vue','框架||插件',7,'https://www.antdv.com/docs/vue/getting-started-cn/',0,''),(136,'uniapp','框架||插件',7,'https://uniapp.dcloud.io/',0,''),(137,'lodashjs','框架||插件',7,'https://www.lodashjs.com/',0,''),(138,'avuejs','框架||插件',7,'https://avuejs.com/doc/form/form',0,''),(139,'vscoed2017安装和使用教程（详细）','开发工具',12,'https://blog.csdn.net/qq_36556893/article/details/79430133',0,''),(140,'VS Code 编写代码段','开发工具',12,'https://blog.csdn.net/u010019717/article/details/52148864',0,''),(141,'yarn','手册',3,'https://yarnpkg.com/zh-Hans/',0,''),(142,' photoshop cc 2018 破解版','开发工具',12,'http://www.downza.cn/soft/270078.html',0,''),(143,'截图工具','开发工具',12,'https://zh.snipaste.com/download.html',0,''),(144,'切图工具','开发工具',12,'http://www.cutterman.cn/zh/cutterman',0,''),(145,'PS（Photoshop CC）2018中文破解图文安装教程','开发工具',12,'https://jingyan.baidu.com/article/495ba841bb7ce138b30ede8f.html',0,''),(146,'MySQL基础知识-安装MySQL','服务器',15,'https://www.cnblogs.com/ayyl/p/5978418.html',0,''),(147,'mysql下载地址','下载',8,'https://dev.mysql.com/downloads/file/?id=484901',0,''),(148,'nzh','框架||插件',7,'https://www.npmjs.com/package/nzh',0,''),(149,'array','前端之巅',9,'https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247489492&idx=1&sn=98aa58c8a48cc8ad14d753be22c6dc0f&chksm=f951a297ce262b81d5b047ac30b737a38c0ac7df0218cbbf47f965a43f3c60c697b9faf3e6b8&mpshare=1&scene=23&srcid=09101KmeVpQ3jbZee5nTuXqC#rd',0,''),(150,'浏览器地址栏运行JavaScript代码','前端之巅',9,'https://www.cnblogs.com/pcyy/p/5655542.html',0,''),(151,'学习 canvas 的 globalCompositeOperation 做出的神奇效果','js',96,'https://blog.csdn.net/fe_dev/article/details/81985367',0,''),(152,'canvas','第一层级',37,NULL,0,''),(153,'用canvas绘制一个曲线动画——深入理解贝塞尔曲线','canvas',152,'https://www.imooc.com/article/22628',0,''),(154,'Vue / keep-alive','Vue',17,'https://www.jianshu.com/p/4b55d312d297',0,''),(155,'基于 Token 的身份验证：JSON Web Token','nodeJs',10,'https://ninghao.net/blog/2834',0,''),(156,'nodejs中的async模块学习','nodeJs',10,'https://blog.csdn.net/zzwwjjdj1/article/details/51857959',0,''),(157,'解决nodejs中json序列化时Date类型默认为UTC格式','nodeJs',10,'https://blog.csdn.net/zhupengfei/article/details/80089156',0,''),(158,'js把年月日时间转化成刚刚，几分钟前，几小时前，几天前','js',96,'https://blog.csdn.net/caimingxian401/article/details/79841631',0,''),(159,'nodeJs之express 生成token','nodeJs',10,'https://blog.csdn.net/wwww001001/article/details/83381683',0,''),(160,'highlight.js 增加行数 （codesnippet插件添加行号）','blog参考',11,'https://www.jiangfei.net/jianzhan/1098.html',0,''),(161,'highlight.js之vue指令——排版高亮网页代码块','博文',37,'https://blog.csdn.net/littlebearGreat/article/details/81131463',0,''),(162,'一款使用marked和highlight.js开发的一款markdown编辑器','框架||插件',7,'https://javascript.ctolib.com/coinsuper-vue-markdown.html',0,''),(163,'Prism Demo - Default Theme-代码块','插件素材',6,'https://9iphp.com/demos/syntax-highlighter-demos/prism.html',0,''),(164,'JS对HTML字符的转义和反转义','js',96,'https://blog.csdn.net/u013026207/article/details/53994032',0,''),(165,'个人博客模板','插件素材',6,'https://www.yangqq.com/download/',0,''),(166,'CORS通信','博文',37,'https://javascript.ruanyifeng.com/bom/cors.html',0,''),(167,'Vue编写markdown或者展示markdown','插件素材',6,'https://blog.csdn.net/wn1245343496/article/details/82147850',0,''),(168,'js中的事件委托或是事件代理详解','面试',22,'https://www.cnblogs.com/liugang-vip/p/5616484.html',0,''),(169,'Bing-搜索','拓展||问题',86,'https://cn.bing.com/?FORM=Z9FD1&toHttps=1&redig=78090DA64D9D415A95BD2AD22A1EC1A3',0,''),(170,'Visual Studio Code 常用快捷键','开发工具',12,'https://www.cnblogs.com/bindong/p/6045957.html',0,''),(171,'css-文字阴影','css',61,'https://www.w3.org/Style/Examples/007/text-shadow',0,''),(172,'html写流星雨','插件素材',6,'https://blog.csdn.net/tswc_byy/article/details/81609845',0,''),(173,'用 CSS3 做一个流星雨动画','插件素材',6,'https://www.cnblogs.com/wisewrong/p/7124920.html',0,''),(174,'如何在ubuntu 16.04 上安装Nginx','服务器',15,'https://www.nginx.cn/4723.html',0,''),(175,'卸载 nginx 彻底删除','服务器',15,'https://blog.csdn.net/sinat_34344123/article/details/79105254',0,''),(176,'nginx反向代理实例','服务器',15,'https://www.cnblogs.com/hanmk/p/9289069.html',0,''),(177,'PM2来部署nodejs服务器永久开启','服务器',15,'https://www.cnblogs.com/lxg0/p/7771229.html',0,''),(178,'echarts案例','第一层级',7,NULL,0,''),(179,'本年商场顾客男女人数统计','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xSJJXiE1Wx',0,''),(180,'三国演义中人名出现次数排名','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xrkQJnJWpe',0,''),(181,'南丁格尔玫瑰图--PieHalfRose','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xHkjKKrz_M',0,''),(182,'湖北省车辆占比-环形图','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xB1IjqF-Cf',0,''),(183,'柱状图','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xBJXl_9pSz',0,''),(184,'饼图-带边框的饼图','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xS1-WnKz_G',0,''),(185,'自定义 tooltip-轮播-中国地图','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xr1W9m5LOG',0,''),(186,'民众言论倾向性分析','echarts案例',178,'https://gallery.echartsjs.com/editor.html?c=xryZPx0QOf',0,''),(187,'echarts-地图详解','手册',3,'https://www.cnblogs.com/zxyun/p/6221765.html',0,''),(188,'loading','图片参考',23,'https://loading.io/',0,''),(189,'代码对比/归并','开发工具',12,'https://tool.oschina.net/diff/',0,''),(190,'指定文件不使用 ESLint 语法检查','博文',37,'https://blog.csdn.net/qq_35430000/article/details/80960317',0,''),(191,'_self.$scopedSlots.default is not a function','拓展||问题',86,'https://blog.csdn.net/beichen3997/article/details/80605699',0,''),(192,'vue单文件 style important引入样式','css',61,'https://www.cnblogs.com/mengfangui/p/9377415.html',0,''),(193,'【Vue】Vue中的父子组件通讯以及使用sync同步父子组件数据','Vue',17,'https://www.cnblogs.com/penghuwan/p/7473375.html',0,''),(194,'其他','第一层级',0,NULL,0,''),(195,'虾米','其他',194,'https://emumo.xiami.com/play?ids=/song/playlist/id/33085444/type/3#loaded',0,''),(196,'CORS——跨域请求那些事儿','拓展||问题',86,'https://blog.csdn.net/u014344668/article/details/54948546',0,''),(197,'163邮箱','其他',194,'https://mail.163.com/',0,''),(198,'百度翻译','其他',194,'https://fanyi.baidu.com/?aldtype=16047#auto/zh',0,''),(199,'qq音乐','其他',194,'https://y.qq.com/',0,''),(200,'智联','其他',194,'https://www.zhaopin.com/',0,''),(201,'拉钩','其他',194,'https://passport.lagou.com/login/login.html?signature=D9C6AD03CB1387FD6E3440B07973AA05&service=http%253A%252F%252Fwww.lagou.com%252Fresume%252Fmyresume.html&action=login&serviceId=lagou&ts=1598453566205',0,''),(202,'网页嵌入式 HTML5+Flash(swf) 视频播放器','拓展||问题',86,'https://www.fghrsh.net/post/17.html',0,''),(203,'全网vip视频在线解析','其他',194,'http://www.vi1.cc/',0,''),(204,'解决mysql执行SQL文件， 报错：Got a packet bigger than max_allowed_packet bytes','mysql',19,'https://blog.csdn.net/github_39325328/article/details/79549756',0,'');
/*!40000 ALTER TABLE `bookmark` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT,
  `classname` varchar(30) NOT NULL COMMENT '分类名称',
  `pid` smallint(6) NOT NULL DEFAULT '0' COMMENT '父id',
  `pid_classname` varchar(30) NOT NULL COMMENT '父分类名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'HTML',0,'第一层级'),(2,'CSS',0,'第一层级'),(3,'JavaScript',0,'第一层级'),(9,'方法',3,'Javascript'),(21,'功能',0,'undefined'),(29,'Vue',36,'前端常用库||插件||UI'),(30,'Vuex',29,'Vue'),(31,'兼容问题',0,'第一层级'),(32,'优化',0,'第一层级'),(33,'css 问题',2,'CSS'),(34,'开发工具',0,'第一层级'),(35,'mysql',0,'第一层级'),(36,'前端常用库||插件||UI',0,'第一层级'),(37,'async',36,'前端常用库||插件||UI'),(38,'后端常用框架||插件||包',0,'第一层级'),(39,'element-ui',36,'前端常用库||插件||UI'),(40,'form',39,'element-ui'),(41,'table',39,'element-ui'),(42,'tabs',39,'element-ui'),(43,'面试',0,'第一层级'),(45,'Ant Design Vue',36,'前端常用库||插件||UI'),(46,'大锅饭',0,'第一层级'),(47,'工作',0,'第一层级'),(48,'开发中遇到的问题',0,'第一层级'),(49,'test',0,'第一层级'),(50,'test-a',49,'test'),(51,'nginx',0,'第一层级'),(52,'uni-app',36,'前端常用库||插件||UI'),(53,'生活',0,'第一层级');
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `mailbox` varchar(50) DEFAULT NULL COMMENT '邮箱',
  `article_id` int(11) NOT NULL COMMENT '文章id',
  `comment_content` text NOT NULL COMMENT '评论的内容',
  `comment_id` int(11) NOT NULL DEFAULT '0' COMMENT '评论id',
  `alias` varchar(20) NOT NULL DEFAULT '游客' COMMENT '昵称',
  `password` varchar(32) DEFAULT NULL COMMENT '用于验证身份（高强度验证）',
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '评论的时间',
  `head_portrait_url` varchar(100) CHARACTER SET utf32 NOT NULL DEFAULT 'head_portrait_url/test.jpeg' COMMENT '头像路径',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (1,'',107,'aaa',0,'cs1','','2019-03-06 08:43:10','uploadFileURl/upload_fa0a31c156619577eefd63c842c4d15f.jpg'),(2,NULL,83,'测试一下',0,'cs2','','2019-03-12 23:18:15','user_head_portrait/test.jpeg'),(3,NULL,83,'无密码',0,'cs2','','2019-03-12 23:18:34','user_head_portrait/test.jpeg'),(4,'null',83,'有密码',0,'cs3','123456','2019-03-12 23:18:53','user_head_portrait//upload_e394b24346fd4e6dbddb8117f65472d4.jpg'),(5,NULL,83,'cs2->cs3',4,'cs2','','2019-03-12 23:19:10','user_head_portrait/test.jpeg'),(6,'null',83,'cs3->cs2',3,'cs3','123456','2019-03-12 23:20:04','user_head_portrait//upload_e394b24346fd4e6dbddb8117f65472d4.jpg'),(7,NULL,63,'aabb\n',0,'name','','2020-01-22 04:52:31','user_head_portrait/test.jpeg'),(8,'',107,'123',1,'csyixia ','','2020-01-28 05:54:14','uploadFileURl/upload_45b58b22ab938da53678ca59677b8124.jpeg'),(9,'null',107,'啦啦啦啦',0,'有密码的','123456','2020-01-28 12:05:51','uploadFileURl/upload_147765a6f01d2cdde8163dc072046dcb.jpg'),(10,NULL,107,'asasasas',9,'ff','','2020-01-28 12:29:10','head_portrait_url/test.jpeg'),(11,NULL,107,'asass',0,'as','','2020-02-13 06:29:00','head_portrait_url/test.jpeg'),(12,NULL,107,'测试一下',0,'','','2020-02-13 07:00:31','head_portrait_url/test.jpeg'),(13,NULL,107,'886',0,'','','2020-02-13 07:00:45','head_portrait_url/test.jpeg'),(14,NULL,107,'rr',0,'','','2020-02-13 07:06:34','head_portrait_url/test.jpeg'),(15,NULL,107,'dd',0,'yanghanliang','123456','2020-02-13 07:10:04','head_portrait_url/test.jpeg'),(16,NULL,107,'test123',0,'123','','2020-02-13 07:26:32','head_portrait_url/test.jpeg'),(17,'null',107,'123',0,'ii','','2020-02-13 07:28:34','uploadFileURl/upload_82f5f7d32fce3025840e8e781a99b673.jpg'),(18,NULL,107,'123',0,'有密码的','123456','2020-02-13 07:48:12','head_portrait_url/test.jpeg'),(19,NULL,107,'123456',0,'有密码的','123456','2020-02-13 07:50:31','head_portrait_url/test.jpeg'),(20,NULL,107,'123456',0,'有密码的','123456','2020-02-13 08:01:32','head_portrait_url/test.jpeg'),(21,NULL,107,'12345\n',0,'test','123456','2020-02-13 08:06:39','head_portrait_url/test.jpeg'),(22,NULL,107,'123',0,'aaa','123456','2020-02-13 08:06:55','head_portrait_url/test.jpeg'),(23,NULL,128,'评论',0,'yanghanliang','123456','2020-03-10 12:50:27','head_portrait_url/test.jpeg'),(24,NULL,128,'真帅\n',23,'yanghanliang','123456','2020-03-10 12:50:58','head_portrait_url/test.jpeg'),(25,NULL,128,'啦啦啦',0,'yanghanliang','123456','2020-03-10 12:51:09','head_portrait_url/test.jpeg'),(26,'',128,'123',0,'gg','','2020-03-10 12:53:07','uploadFileURl/upload_d4c48dd165488de1df1648643d5432c4.gif'),(27,NULL,129,'4545',0,'yanghanliang','123456','2020-03-13 09:21:25','head_portrait_url/test.jpeg'),(28,NULL,161,'kk',0,'yanghanliang','yang123*','2020-06-06 05:00:53','head_portrait_url/test.jpeg'),(29,NULL,162,'啊撒',0,'yanghanliang','yang123*','2020-06-09 06:04:07','head_portrait_url/test.jpeg');
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `components`
--

DROP TABLE IF EXISTS `components`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `components` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL COMMENT '组件名',
  `content` text COMMENT '内容',
  `category_id` int(11) DEFAULT NULL COMMENT '分类id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `components`
--

LOCK TABLES `components` WRITE;
/*!40000 ALTER TABLE `components` DISABLE KEYS */;
INSERT INTO `components` VALUES (1,'progress','> element-ui 没有可拖动的进度条，根据产品需求，自己写了一个\n\n```\n<template>\n    <my-progress :progressValue=\"50\">\n        <div slot=\"content\">文字描述</div>\n    </my-progress>\n</template>\n\n<script>\n\nimport myProgress from &apos;@/components/canvas/progress/index&apos;\n\nexport default {\n    components: {\n        myProgress,\n    }\n}\n</script>\n```\n\n### slot\n\n> 默认值\n\n```\n<ul>					 \n    <li>aaa</li>					   \n    <li>bbb</li>\n</ul>\n```\n\n> 使用\n\n```\n<div slot=\"content\">123</div>\n```',NULL),(2,'echartsBase','### 默认示例\n\n```vue\n<template>\n    <my-echarts></my-echarts>\n    <my-echarts type=\"line\" class=\"mt20 mb20\"></my-echarts>\n    <my-echarts type=\"pie\"></my-echarts>\n</template>\n\n<script>\nimport myEcharts from &apos;@/components/function/myEcharts&apos;\n\nexport default {\n    components: {\n	myEcharts\n    },\n}\n</script>\n```',NULL),(3,'optionEcharts','### 传入配置项\n\n> 传入的配置项会继承默认配置项（如果默认的配置中存在传入的配置项，则传入的配置会替换掉默认的配置；如果默认配置没有被替换，则仍然保留默认配置）\n\n```vue\n<template>\n    <my-echarts :time=\"2\" title=\"柱状图动画延迟\" :option=\"option\" key=\"abc\"></my-echarts>\n</template>\n\n<script>\nimport myEcharts from &apos;@/components/function/myEcharts&apos;\n\nvar xAxisData = []\nvar data1 = []\nvar data2 = []\nfor (var i = 0; i < 100; i++) {\n	xAxisData.push(&apos;类目&apos; + i)\n	data1.push((Math.sin(i / 5) * (i / 5 - 10) + i / 6) * 5)\n	data2.push((Math.cos(i / 5) * (i / 5 - 10) + i / 6) * 5)\n}\n\nlet option = {\n	legend: {\n		data: [&apos;bar&apos;, &apos;bar2&apos;]\n	},\n	toolbox: {\n		// y: &apos;bottom&apos;,\n		feature: {\n			magicType: {\n				type: [&apos;stack&apos;, &apos;tiled&apos;]\n			},\n			dataView: {},\n			saveAsImage: {\n				pixelRatio: 2\n			}\n		}\n	},\n	tooltip: {},\n	xAxis: {\n		data: xAxisData,\n		splitLine: {\n			show: false\n		}\n	},\n	yAxis: {\n	},\n	series: [{\n		name: &apos;bar&apos;,\n		type: &apos;bar&apos;,\n		data: data1,\n		animationDelay: function (idx) {\n			return idx * 10\n		}\n	}, {\n		name: &apos;bar2&apos;,\n		type: &apos;bar&apos;,\n		data: data2,\n		animationDelay: function (idx) {\n			return idx * 10 + 100\n		}\n	}],\n	animationEasing: &apos;elasticOut&apos;,\n	animationDelayUpdate: function (idx) {\n		return idx * 5\n	}\n}\n\nexport default {\n    components: {\n	myEcharts\n    },\n    data() {\n	return {\n	    option: option\n	}\n    }\n}\n</script>\n```',NULL),(4,'configEcharts','### 可以传入数据或者传入方法\n\n> 如果传入的是方法，则此方法必须返回数据\n\n```vue\n<template>\n    <my-echarts :txt=\"[&apos;北京&apos;, &apos;上海&apos;, &apos;广东&apos;, &apos;深圳&apos;]\" :data=\"[600, 800, 200, 1000]\"></my-echarts>\n    <my-echarts :txt=\"[&apos;北京&apos;, &apos;上海&apos;, &apos;广东&apos;, &apos;深圳&apos;]\" title=\"站点信息\" :getDataFn=\"configGetData\" :time=\"3\" :axisLabel=\"{}\" key=\"yy\"></my-echarts>\n</template>\n\n<script>\nimport myEcharts from &apos;@/components/function/myEcharts&apos;\n\nexport default {\n    components: {\n	myEcharts\n    },\n    methods: {\n	// 获取数据\n	configGetData(params) {\n	    return [10, 40, 80, 120]\n	}\n    }\n}\n</script>\n```',NULL),(5,'filters','```html\n<li class=\"mb20 mt20\">分转元</li>\n<li>\n    123456 ------ {{ 123456 | money }}\n</li>\n<li>\n    123456 ------ {{ 123456 | money({ symbol: false, decimal: false }) }}\n</li>\n<li>\n    12345600 ------ {{ 12345600 | money({ symbol: false, decimal: false }) }}\n</li>\n<li class=\"mb20 mt20\">元转分</li>\n<li>1 ------ {{ 1 | money({ conversion: &apos;down&apos; }) }}</li>\n<li>1.12 ------ {{ 1.12 | money({ conversion: &apos;down&apos; }) }}</li>\n<li>1.06 ------ {{ 1.06 | money({ conversion: &apos;down&apos; }) }}</li>\n```',NULL);
/*!40000 ALTER TABLE `components` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `jurisdiction`
--

DROP TABLE IF EXISTS `jurisdiction`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `jurisdiction` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `j_name` varchar(25) NOT NULL COMMENT '权限名',
  `j_pid` smallint(6) NOT NULL DEFAULT '0' COMMENT '父id',
  `identification` text NOT NULL COMMENT '标识: 用它来判断权限',
  `is_open` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否开启权限:1(开启),0(关闭)',
  `weight` tinyint(4) DEFAULT '0' COMMENT '权重：默认为0，意思是默认只有管理员有权限',
  `distribution` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0(后端)，1（前端）',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `j_name` (`j_name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `jurisdiction`
--

LOCK TABLES `jurisdiction` WRITE;
/*!40000 ALTER TABLE `jurisdiction` DISABLE KEYS */;
INSERT INTO `jurisdiction` VALUES (1,'分类列表',1,'category',1,2,0),(18,'index',0,'index',1,2,0),(19,'文章列表',0,'articlelist',1,2,0),(20,'前端-权限列表',0,'jurisdiction/list',1,2,0),(21,'用户权限',0,'user/jurisdiction',0,2,0),(22,'文章详情页',0,'articleDetails',0,2,1),(23,'文章评论',0,'comment',1,2,0),(24,'文章详情-api',0,'articledetails',1,2,0),(25,'首页',0,'common',0,2,1),(26,'获取文章详情-上一页或者下一页',0,'during',1,2,0),(27,'后台',0,'admin',0,0,1),(30,'文章列表-view',0,'articleList',0,0,1),(31,'文章编辑&&添加文章-view',0,'handleArticle',1,0,1),(32,'修改文章-api',0,'editArticle',1,0,0),(33,'删除文章',0,'deleteArticle',1,0,0),(34,'修改分类',0,'editCategory',1,0,1),(35,'组件',0,'component',1,0,1),(36,'ss',0,'ss',0,0,1),(37,'权限状态',0,'jurisdiction/edit',1,0,0),(39,'删除分类',0,'deleteCategory',1,0,0);
/*!40000 ALTER TABLE `jurisdiction` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `previewdata`
--

DROP TABLE IF EXISTS `previewdata`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `previewdata` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT,
  `ip` text NOT NULL COMMENT 'ip地址',
  `last_time` bigint(13) DEFAULT NULL COMMENT '最近一次预览时间',
  `sum_time` bigint(13) DEFAULT NULL COMMENT '总共预览时间',
  `user_id` smallint(6) DEFAULT NULL COMMENT '用户id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=269 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `previewdata`
--

LOCK TABLES `previewdata` WRITE;
/*!40000 ALTER TABLE `previewdata` DISABLE KEYS */;
INSERT INTO `previewdata` VALUES (31,'111.201.230.34',1584197096153,39836,NULL),(32,'223.20.199.152',1583906532848,173,NULL),(33,'122.115.226.189',1583908416378,611,NULL),(34,'101.72.58.124',1583909196319,427,NULL),(35,'114.249.194.237',1584201868262,6244,NULL),(36,'27.115.124.70',1589401110825,15949,NULL),(37,'180.163.220.67',1599368329513,9458,NULL),(38,'42.236.10.117',1599398110000,29652,NULL),(39,'180.163.220.68',1592038208164,26518,NULL),(40,'42.236.10.125',1595741384315,30145,NULL),(41,'223.104.95.64',1584063604291,2349,NULL),(42,'117.136.38.188',1584089402278,440,NULL),(43,'111.192.76.102',1584114212239,131,NULL),(44,'42.236.10.75',1599701588373,39532,NULL),(45,'27.115.124.6',1599398098438,10656,NULL),(46,'223.104.95.86',1584858837356,2901,NULL),(47,'223.104.3.11',1584179427665,439,NULL),(48,'42.236.10.114',1595741389839,33630,NULL),(49,'58.16.228.189',1584183829812,1009,NULL),(50,'223.104.95.84',1584187891849,865,NULL),(51,'14.116.141.2',1584187998502,3142,NULL),(52,'42.236.10.84',1596551334155,18247,NULL),(53,'111.201.230.252',1584705675071,9640,NULL),(54,'1.94.231.129',1584239899422,794,NULL),(55,'180.163.220.5',1597672952726,8034,NULL),(56,'117.136.0.254',1584419897466,358,NULL),(57,'111.201.144.81',1584427344848,2864,NULL),(58,'106.121.163.3',1584428382584,554,NULL),(59,'121.69.46.90',1584605083511,155,NULL),(60,'180.163.220.66',1592224085359,12180,NULL),(61,'180.163.220.3',1595090971581,37490,NULL),(62,'42.236.10.78',1597673776191,16401,NULL),(63,'220.197.208.177',1584710767438,266,NULL),(64,'111.201.229.105',1585232149697,15472,NULL),(65,'223.104.95.43',1584873556821,733,NULL),(66,'180.163.220.4',1593073125956,10576,NULL),(67,'124.64.19.146',1584929311322,598,NULL),(68,'125.34.11.206',1584944232035,649,NULL),(69,'39.155.215.156',1585018477490,185,NULL),(70,'223.71.125.253',1585042419180,2045,NULL),(71,'42.236.10.93',1596551334681,13714,NULL),(72,'111.201.231.67',1585710678916,8111,NULL),(73,'111.201.146.236',1585295066265,2708,NULL),(74,'111.198.245.106',1585553152715,117,NULL),(75,'219.239.42.66',1585556519447,333,NULL),(76,'111.200.193.19',1585797444963,821,NULL),(77,'36.110.36.247',1585557825896,1515,NULL),(78,'223.99.217.221',1585645929668,197,NULL),(79,'111.37.152.134',1585705916105,674,NULL),(80,'111.201.229.44',1586168641037,31711,NULL),(81,'111.206.124.2',1585810302900,1787,NULL),(82,'124.65.186.186',1585816260376,305,NULL),(83,'111.199.187.61',1586056178731,148,NULL),(84,'111.201.228.95',1586227212237,144,NULL),(85,'117.136.38.139',1586242229011,287,NULL),(86,'54.71.187.124',1586310514516,1176,NULL),(87,'118.144.11.141',1586331301425,311,NULL),(88,'61.149.4.214',1587897873019,1478,NULL),(89,'39.155.215.206',1586337166454,268,NULL),(90,'111.201.224.145',1586750810762,1517,NULL),(91,'124.65.239.118',1586396684785,153,NULL),(92,'106.121.140.250',1586401896169,9355,NULL),(93,'117.136.38.134',1586432357719,2510,NULL),(94,'114.242.249.77',1586415779792,278,NULL),(95,'123.116.100.138',1586423032394,2686,NULL),(96,'60.247.21.202',1586483452195,403,NULL),(97,'125.33.25.122',1586577337210,369,NULL),(98,'111.201.224.33',1587053734621,2730,NULL),(99,'124.64.18.163',1586932768203,395,NULL),(100,'123.116.197.150',1587114647640,1256,NULL),(101,'223.104.3.181',1587086288794,280,NULL),(102,'223.104.3.60',1587104639382,565,NULL),(103,'1.202.180.194',1587101720939,952,NULL),(104,'221.223.100.16',1587111615981,140,NULL),(105,'123.118.94.178',1587351788990,2225,NULL),(106,'111.201.231.236',1587612785074,635,NULL),(107,'223.104.3.56',1587357929226,378,NULL),(108,'123.118.8.123',1587359361229,971,NULL),(109,'124.202.169.110',1587450438659,967,NULL),(110,'111.196.245.231',1587471096047,272,NULL),(111,'111.196.245.231',1587471096064,292,NULL),(112,'124.42.103.1',1587549090725,153,NULL),(113,'117.136.0.244',1587808041996,346,NULL),(114,'58.16.97.80',1588325358566,568,NULL),(115,'58.16.93.203',1588407594028,7042,NULL),(116,'23.98.43.159',1588388322691,345,NULL),(117,'101.200.35.231',1588404942981,734,NULL),(118,'58.16.45.253',1588753588367,27657,NULL),(119,'58.16.45.251',1588939336458,2904,NULL),(120,'40.83.103.222',1588773960689,1561,NULL),(121,'101.22.3.210',1588854982038,1740,NULL),(122,'223.72.52.65',1588856077164,165,NULL),(123,'58.16.93.202',1589110081213,18239,NULL),(124,'58.16.93.40',1589173214737,906,NULL),(125,'114.135.177.235',1589172568918,1107,NULL),(126,'106.108.45.93',1589197249156,3648,NULL),(127,'111.121.68.56',1589259292647,1601,NULL),(128,'223.104.97.31',1589274556851,995,NULL),(129,'223.104.97.25',1589290546976,1267,NULL),(130,'223.104.97.0',1589335916098,7464,NULL),(131,'223.104.97.12',1589337606182,1267,NULL),(132,'111.121.75.202',1589465983830,1174,NULL),(133,'111.121.77.61',1589383510544,4044,NULL),(134,'223.104.94.232',1589392061203,25401,NULL),(135,'114.138.53.3',1589448906586,42834,NULL),(136,'223.104.94.245',1589428692193,3562,NULL),(137,'114.249.195.124',1589467318175,142,NULL),(138,'223.104.94.252',1589522576790,374,NULL),(139,'223.104.97.15',1589530182804,647,NULL),(140,'114.138.41.166',1589535485473,314,NULL),(141,'111.121.65.105',1589616699959,12489,NULL),(142,'223.104.24.114',1589559137801,23411,NULL),(143,'1.204.117.21',1589695822623,194,NULL),(144,'223.104.24.122',1589764210172,1445,NULL),(145,'111.121.71.146',1589872452729,23996,NULL),(146,'223.104.96.38',1589948962380,5801,NULL),(147,'221.178.126.212',1589812662694,1707,NULL),(148,'106.43.208.26',1589937584741,634,NULL),(149,'223.104.96.60',1589946054055,6902,NULL),(150,'223.104.255.95',1589987542664,791,NULL),(151,'223.104.96.43',1589990653508,2414,NULL),(152,'223.104.96.34',1590024250031,958,NULL),(153,'223.104.96.100',1590050865780,18643,NULL),(154,'223.104.96.57',1590041269796,7467,NULL),(155,'106.108.21.160',1590050813470,2119,NULL),(156,'1.204.113.148',1590064463634,9593,NULL),(157,'111.121.71.157',1590243979843,369469,NULL),(158,'111.85.220.58',1590603845430,4427,NULL),(159,'223.104.96.186',1590337043077,8996,NULL),(160,'223.104.97.27',1590417538306,437,NULL),(161,'223.104.96.163',1590504110709,1199,NULL),(162,'111.121.64.176',1590640871114,5211,NULL),(163,'1.204.117.216',1590800189886,1514,NULL),(164,'223.104.96.105',1590860387746,38931,NULL),(165,'223.104.96.127',1590917529427,983,NULL),(166,'223.104.96.99',1590917368477,359,NULL),(167,'117.188.24.38',1590918254041,1076,NULL),(168,'223.104.96.161',1590937639342,1157,NULL),(169,'117.188.19.38',1590934508814,1208,NULL),(170,'1.204.11.229',1590970364669,396,NULL),(171,'106.11.0.202',1591006667560,1537,NULL),(172,'223.104.96.181',1591020040689,756,NULL),(173,'223.104.24.113',1591020684993,1094,NULL),(174,'117.188.102.40',1591191485763,315,NULL),(175,'120.236.178.184',1591252846682,538,NULL),(176,'223.104.94.44',1591272618077,404,NULL),(177,'223.104.94.37',1591342260048,626,NULL),(178,'223.104.94.53',1591376277784,22950,NULL),(179,'114.249.196.61',1591376399976,101,NULL),(180,'223.104.3.207',1591401429129,474,NULL),(181,'223.104.94.54',1591407142895,1303,NULL),(182,'14.146.95.89',1591409643662,2317,NULL),(183,'223.104.94.43',1591424557748,12140,NULL),(184,'223.104.95.107',1591436809093,14418,NULL),(185,'223.104.95.99',1591691396278,10702,NULL),(186,'223.104.95.96',1591523463556,1313,NULL),(187,'223.104.95.100',1591593724328,330,NULL),(188,'172.16.142.160',1591713398728,198182500,NULL),(189,'223.104.95.106',1591691456527,4667,NULL),(190,'223.104.95.103',1591608863878,NULL,NULL),(191,'',1591706831816,NULL,NULL),(192,'[object Object]',1591706863573,NULL,NULL),(193,'::ffff:223.104.94.45',1591707124313,NULL,NULL),(194,'没有获取到ip',1591709430520,NULL,NULL),(195,'undefined',1591712111858,NULL,NULL),(196,'undefined',1591712112580,NULL,NULL),(198,'223.104.94.45',1591713819624,198459297,NULL),(200,'58.16.249.98',1591868394052,5510835,NULL),(201,'223.104.95.112',1591766605154,201477,NULL),(202,'58.16.249.97',1591765045267,NULL,NULL),(203,'58.16.249.99',1591842289556,449067,NULL),(204,'114.246.185.59',1591782487091,NULL,NULL),(205,'116.22.134.55',1591783651456,690771,NULL),(206,'223.104.96.227',1591868513888,NULL,NULL),(207,'106.108.51.46',1592037327301,39115324,NULL),(208,'117.188.11.170',1592138626629,NULL,NULL),(209,'223.104.96.242',1592193229223,NULL,NULL),(210,'114.135.184.63',1592288122821,12738,NULL),(211,'113.118.224.197',1592202360969,NULL,NULL),(212,'223.70.232.118',1592207082887,NULL,NULL),(213,'113.102.184.72',1592294361244,NULL,NULL),(214,'113.105.2.146',1592535281256,465971,NULL),(215,'121.32.95.229',1592380311975,188596,NULL),(216,'113.110.196.147',1592381141261,NULL,NULL),(217,'198.11.176.14',1592533979481,NULL,NULL),(218,'223.104.63.188',1592534469945,157274,NULL),(219,'113.87.200.227',1592534326612,NULL,NULL),(220,'47.88.5.130',1592534674894,NULL,NULL),(221,'101.227.27.188',1592609522426,0,NULL),(222,'113.118.125.44',1592732396077,133140,NULL),(223,'113.87.21.174',1592921117901,1408998,NULL),(224,'113.87.201.242',1592984342661,20334962,NULL),(225,'218.18.145.208',1593133021501,23878198,NULL),(226,'113.87.21.104',1593260609509,24088903,NULL),(227,'113.87.200.235',1593574467809,62762785,NULL),(228,'121.35.101.79',1593327637311,70360,NULL),(229,'113.118.85.23',1593352753111,1670735,NULL),(230,'119.123.34.177',1593403757327,NULL,NULL),(231,'113.87.42.118',1593424330001,32271,NULL),(232,'113.87.202.219',1594031266024,3324487,NULL),(233,'113.118.148.43',1593695528436,NULL,NULL),(234,'218.18.146.245',1593851403821,NULL,NULL),(235,'218.18.147.223',1594170535839,629603,NULL),(236,'113.87.201.165',1594374898177,18675655,NULL),(237,'113.118.124.97',1594519493059,NULL,NULL),(238,'113.118.149.23',1594601935146,NULL,NULL),(239,'113.118.7.246',1594607572860,NULL,NULL),(240,'113.87.201.250',1594970373805,57548380,NULL),(241,'117.136.33.149',1594811960417,NULL,NULL),(242,'1.204.116.226',1594817655441,NULL,NULL),(243,'113.88.14.37',1594904162830,157696,NULL),(244,'117.136.33.206',1594915566251,NULL,NULL),(245,'113.118.125.137',1595084166800,954720,NULL),(246,'117.136.33.195',1595295123693,0,NULL),(247,'221.13.63.23',1595317662789,NULL,NULL),(248,'116.24.64.177',1595324183072,NULL,NULL),(249,'14.17.22.34',1600129438566,4473914,NULL),(250,'113.87.22.181',1595514836416,196542,NULL),(251,'113.87.23.65',1595753868702,910626,NULL),(252,'14.17.22.35',1600222190895,33065063,NULL),(253,'113.118.148.145',1596299081618,133843,NULL),(254,'211.95.50.5',1596515903996,0,NULL),(255,'211.95.50.4',1596515910342,0,NULL),(256,'113.118.124.3',1596551313528,NULL,NULL),(257,'106.11.167.104',1596782325747,NULL,NULL),(258,'106.11.167.98',1596836764176,NULL,NULL),(259,'14.17.22.36',1599878977918,59958,NULL),(260,'113.118.126.124',1597672806571,NULL,NULL),(261,'14.17.22.253',1597816108013,0,NULL),(262,'14.17.22.32',1597775822046,299608,NULL),(263,'218.18.144.208',1599068478834,1191913,NULL),(264,'223.104.63.172',1599106203874,NULL,NULL),(265,'117.136.33.233',1599274961265,NULL,NULL),(266,'14.17.22.40',1599549270433,28956,NULL),(267,'14.17.22.37',1599617591675,NULL,NULL),(268,'113.118.148.92',1599667451643,380060,NULL);
/*!40000 ALTER TABLE `previewdata` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(25) NOT NULL COMMENT '用户名',
  `password` varchar(32) NOT NULL COMMENT '密码',
  `name` varchar(25) DEFAULT NULL COMMENT '姓名',
  `alias` varchar(25) DEFAULT 'yanghanliang' COMMENT '别名',
  `tel` char(11) DEFAULT NULL COMMENT '电话',
  `background_wall` varchar(50) DEFAULT NULL COMMENT '背景墙',
  `head_portrait` varchar(50) DEFAULT NULL COMMENT '头像',
  `occupation` varchar(20) DEFAULT 'WEB开发工程师' COMMENT '职业',
  `synopsis` varchar(255) DEFAULT NULL COMMENT '简介',
  `updatetime` bigint(13) DEFAULT NULL COMMENT '更新时间',
  `createtime` bigint(13) NOT NULL COMMENT '创建时间',
  `cipher_order` varchar(32) DEFAULT NULL COMMENT '密码顺序',
  `jurisdiction_id` text COMMENT '权限id,用逗号分割',
  `role_id` tinyint(4) NOT NULL DEFAULT '1' COMMENT '角色: 0(管理员), 1(普通用户)',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'admin','yang123*','杨汉梁','yanghanliang','147852315**','../../../assets/images/index/banner.png','../../../assets/images/index/avatar.jpg','WEB开发工程师','一个喜欢游戏和编程的前端小菜鸟, 在这里分享一些,个人关于前端的知识感悟,以及一些自己觉得不错的dd',NULL,0,NULL,'1,18,20,22,23,31,32,33,34,39,35',1),(19,'test','123456',NULL,'',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1581186320835,NULL,'37',1),(20,'abc','123456',NULL,'abc',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1582729692979,NULL,NULL,1),(21,'f','123456',NULL,'123456',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1582729860022,NULL,NULL,1),(22,'111','111',NULL,'111',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1586422678459,NULL,NULL,1),(27,'jcy','a123456',NULL,'jcy',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1590048497696,NULL,NULL,1),(28,'1','1',NULL,'1',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1592534469075,NULL,NULL,1),(29,'showDemo','123456',NULL,'showDemo',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1592984313599,NULL,NULL,1),(30,'steve','111',NULL,'',NULL,NULL,NULL,'WEB开发工程师',NULL,NULL,1593424329113,NULL,NULL,1);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-09-16 10:12:44
